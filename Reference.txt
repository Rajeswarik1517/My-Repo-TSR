---------------------------------------- SQL -------------------------------------------------------

DBCC CHECKIDENT ('PS_BPS_EMPLOYEEID_SEED_TBL', RESEED, 0)  ---- Re Seeding
SELECT * FROM PS_PERSON WHERE ISNUMERIC(EMPLID) = 0		---- to get the list whith only numeric values not the characters

SELECT * FROM SYS.SERVERS
select * from sys.databases
SELECT * FROM SYS.TABLES
SELECT * FROM SYS.PROCEDURES
SELECT * FROM SYS.OBJECTS
SELECT * FROM INFORMATION_SCHEMA.COLUMNS 

ALTER DATABASE RMG SET COMPATIBILITY_LEVEL = 130

------------------------------------------------------------------------------------------
CREATE NONCLUSTERED INDEX S_EMPLOYEE_BREAKUP_ID_AND_D_LAST_UPDATED_DTTM
ON M_RT_PS_UPLOAD_EMPLOYEE_BREAKUP(S_EMPLOYEE_BREAKUP_ID,D_LAST_UPDATED_DTTM ASC)
--------------------------------------------------------------------------------------------

SELECT SNO=IDENTITY(int,1,1) ,A.* INTO #TEMP_RESULT FROM RMG.DBO.M_FPP_TB_PM_PD_AFFIRMATION A LEFT JOIN  M_FPP_TB_BILLING_FOR_THE_MONTH_SUB_TOTAL B ON
A.N_SOW_ID=B.N_SOW_ID AND A.N_YEAR=B.N_YEAR AND A.N_MONTH=B.N_MONTH
 where A.n_year = 2020 and A.n_month = 8 AND B.N_SOW_ID IS NULL AND S_STATUS IN ('Accrual with Cap on Invoice','Accrued')

 SELECT * from #TEMP_RESULT
 DECLARE @COUNT INT=1,@LOOP_COUNT INT=(SELECT MAX(SNO) FROM #TEMP_RESULT)
 DECLARE @SOWID INT,    @MONTH INT,    @YEAR INT 
 WHILE(@COUNT<=@LOOP_COUNT)
 BEGIN
 SELECT @SOWID=N_SOW_ID,@MONTH=N_MONTH,@YEAR=N_YEAR FROM #TEMP_RESULT WHERE SNO=@COUNT
 EXEC [USP_FPP_RT_BILLING_FOR_THE_MONTH_TEST] @SOWID,@MONTH,@YEAR,'N'
 SET @COUNT=@COUNT+1;
 END
 
 ------------------------------------------------------------------------------------
 
 select DISTINCT S1.name [ITPROOF_Schema], O1.name as [ITPROOF_Object], O1.modify_date,
S2.name [ITPROOF_9JAN22_Schema], O2.name as [ITPROOF_9JAN22_Object], O2.modify_date
from [ITPROOF].sys.all_objects O1
inner join [ITPROOF_9JAN22].sys.all_objects O2 on O1.name = O2.name
inner join [ITPROOF].sys.syscomments C1 on O1.object_id = C1.id
inner join [ITPROOF_9JAN22].sys.syscomments C2 on O2.object_id = C2.id
inner join [ITPROOF].sys.schemas S1 on O1.schema_id = S1.schema_id
inner join [ITPROOF_9JAN22].sys.schemas S2 on O2.schema_id = S2.schema_id
where C1.text <> C2.text 
-- remove the line below if you want to search all objects
and O1.type = 'P'

----------------------------------------------------------------------------------
CREATE PROCEDURE dbo.spsSearchCode   
(  
@Strings   
AS VARCHAR (255)   
)  
AS  
BEGIN  
SET  
NOCOUNT ON   
SET  
TRANSACTION ISOLATION LEVEL READ UNCOMMITTED   
   
DECLARE @tmpString TABLE   
(   
RowNum   
int NOT NULL IDENTITY (1, 1)   
, String varchar(2000)   
)   
DECLARE @tmp TABLE   
(   
RowNum   
int   
, objType varchar(50)   
, objSeq int   
, objName varchar(255)   
, objParentName varchar(255)   
)   
insert into   
@tmpString  
(   
String  
)   
select   
String  
from   
dbo.SplitString(@Strings, ',')   
DECLARE @StringCount int   
SELECT @StringCount = MAX(RowNum) FROM @tmpString   
DECLARE @RowNum int   
DECLARE @String varchar(255)   
DECLARE curString CURSOR FOR   
SELECT   
RowNum  
, String   
FROM   
@tmpString  
OPEN curString   
FETCH NEXT FROM curString INTO @RowNum, @String   
WHILE @@FETCH_STATUS = 0   
BEGIN   
   
insert into   
@tmp  
select distinct   
@RowNum  
,   
CASE sysobjects.type   
when 'P' THEN 'Stored Proc'   
when 'V' THEN 'View'   
when 'FN' THEN 'Function'   
when 'TF' THEN 'Function'   
when 'TR' THEN 'Trigger'   
END AS objType,   
CASE sysobjects.type   
when 'P' THEN 1   
when 'V' THEN 2   
when 'FN' THEN 3   
WHEN 'TF' THEN 3   
when 'TR' THEN 4   
END AS objSeq,   
sysobjects  
.Name as objName,   
NULL as objParentName   
from   
sysobjects   
(nolock)   
inner join syscomments (nolock) on syscomments.ID = sysobjects.ID   
where   
sysobjects  
.type in ('P', 'V', 'FN', 'TR', 'TF') -- stored procs, views, functions, triggers   
and (syscomments.text like '%' + @String + '%')   
-- jobs   
insert into   
@tmp  
select   
@RowNum  
, 'Job' As objType   
, 5 as objSeq   
, 'Step ' + cast(js.step_id as varchar(5)) + ': ' + js.step_name as objName   
, j.name + ' ' + case when j.enabled = 1 then '(Enabled)' else '(Disabled)' end as objParentName   
from   
msdb  
..sysjobsteps js (nolock)   
inner join msdb..sysjobs j (nolock) on js.job_id = j.job_id   
where   
js  
.command like '%' + @String + '%'   
-- table names   
insert into   
@tmp  
select   
@RowNum  
, 'Table' as objType   
, 6 as objSeq   
, syscolumns.name as objName   
, sysobjects.name as objParentName   
from   
syscolumns   
(nolock)   
inner join sysobjects (nolock) on syscolumns.id = sysobjects.id   
where   
syscolumns  
.name like '%' + @String + '%'   
and sysobjects.type = 'U'   
FETCH NEXT FROM curString INTO @RowNum, @String   
END   
CLOSE curString   
DEALLOCATE curString   
delete from   
@tmp  
where   
(objName like '%_tmp%' or objName like '%tmp_%' or objName like '%_bak%' or objName like '%bak_%' or objName like '%_tommy%' or objName like '%tommy_%')   
select   
t1  
.objType as Type   
, t1.objName as Object   
, t1.objParentName as Parent   
from   
@tmp t1  
INNER JOIN   
(   
SELECT   
objType  
, objName   
, objParentName   
FROM   
@tmp  
GROUP BY   
objType  
, objName   
, objParentName   
HAVING   
COUNT(*) = @StringCount   
) as t2 ON t1.objType = t2.objType and t1.objName = t2.ObjName and coalesce(t1.objParentName, '') = coalesce(t2.objParentName, '')   
group by   
t1  
.objType   
, t1.objName   
, t1.objParentName   
order by   
MIN(t1.objSeq)   
, t1.objType   
, t1.objName   
, t1.objParentName   
END  

-----------------------------------------------------------------------------------------------------------------------------
 ------- Query to Find and Replace text -------------------
 
DECLARE @searchFor VARCHAR(100), @replaceWith VARCHAR(100);
DECLARE @count INT
DECLARE @i INT =1
DECLARE @SPName VARCHAR(1000)
Declare @moddef nvarchar(max)
--Declare Table variables for storing data
DECLARE @TStoredProcedures TABLE ( SNo INT IDENTITY(1,1),
SPName varchar(max)
)

SET @searchFor = 'HCM88PRD'
-- text to replace with
SET @replaceWith = 'HCM92Dev'


INSERT INTO @TStoredProcedures(SPName)
select distinct object_name(c.id) as SPName
from syscomments c, sysobjects o
where (c.text like '%HCM88PRD%')-- and c.text not like '%' + @replaceWith + '%')
and c.id = o.id
and o.type = 'P'
--and object_name(c.id)='USP_ALLOCATION_GET_ASSIGNMENT_DETAILS'



--sp_helptext 'USP_ALLOCATION_GET_ASSIGNMENT_DETAILS'

SELECT @count = COUNT(SNo) FROM @TStoredProcedures WHILE (@i <= @count)
BEGIN
SELECT @SPName = SPName FROM @TStoredProcedures WHERE SNo = @i
Set @moddef =
(SELECT
Replace (REPLACE(definition,@searchFor,@replaceWith) ,'create ','ALTER ')
FROM sys.sql_modules a
JOIN
( select type, name,object_id
from sys.objects b
where type in (
'p' -- procedures
)
and is_ms_shipped = 0
)b
ON a.object_id=b.object_id where b.name = @SPName)
--exec('drop procedure dbo.' + @spname)
execute sp_executesql @moddef
--select @SPName
SELECT @i = @i + 1
END

-----------------------------------------------------------------------------------------------------------------------------
------- QUERY TO GET ALL THE HRMSDB OBJECTS GETTING USED IN ALL THE DB OBJECTS------------------------

select --schema_name(obj.schema_id) as schema_name,
       obj.name as 'Object_name',
       --schema_name(dep_obj.schema_id) as referenced_object_schema,
       --dep_obj.name as referenced_object_name,
       --dep_obj.type_desc as object_type,
	   obj.type,
	   obj.type_desc
	   ,dep.referenced_database_name
	   --,dep.referenced_schema_name
	   ,dep.referenced_entity_name
	   ,'RMG' as Datebase_name
	   ,ob2.type as entity_type,ob2.type_desc as entity_type_desc
from sys.all_objects obj
left join sys.sql_expression_dependencies dep on dep.referencing_id = obj.object_id
left join sys.all_objects dep_obj on dep_obj.object_id = dep.referenced_id
left join HRMSDB.HCM88PRD.sys.objects ob2 on ob2.name  collate Latin1_General_BIN=dep.referenced_entity_name
where --obj.type in ('P', 'X', 'PC', 'RF') and
dep.referenced_database_name like '%HCM%' -- HCM88PRD
      --and  obj.name = 'VISA_DUMP'  -- put procedure name here
order by --schema_name,
         'Object_name';
		 
-----------------------------------------------------------------------------------------------------------------------------

------------- open xml reading-------------------------------------
           
CREATE PROCEDURE [dbo].[USP_PS_EMAIL_ADDRESSES_SYNC]                       
AS                      
BEGIN                      
SET NOCOUNT ON                   
DECLARE @DocumentId INT,                     
  @DDOCNAME Varchar(400),                      
  @docHandle int,                        
  @xmlDocument nvarchar(max),               
  @StrRaiseError VARCHAR(100),                    
  @RECCNT  INT ,                     
  @EMPLID Varchar(11),@E_ADDR_TYPE VARCHAR(30) ,                     
  @DID INT ,           
  @EMPLID1 VARCHAR(11),        
  @i INT=1             
                      
-- PART A - XML Sync to Staging Table                      
                    
 DECLARE @tblxml TABLE                        
 (                        
   U_ID INT IDENTITY(1,1)                         
  , DID BIGINT                        
  , ENTITYNAME VARCHAR(50)                        
  , EXTRACT_XML nvarchar(max)                        
  , DDOCNAME VARCHAR(50)                        
  )                       
  DECLARE @TotalFiles INT                       
                         
  SELECT @TotalFiles = COUNT(1) FROM ORA_EMAIL_ADDRESSES_XML_SYNC WHERE PROCESS_FLAG = 0                        
  INSERT INTO @tblxml (DID, ENTITYNAME, EXTRACT_XML, DDOCNAME)                         
  SELECT   DISTINCT                      
   DID, ENTITYNAME, EXTRACT_XML, DDOCNAME FROM ORA_EMAIL_ADDRESSES_XML_SYNC                         
  WHERE                         
   PROCESS_FLAG = 0                        
  AND DID NOT IN (SELECT DID FROM PS_EMAIL_ADDRESSES_STG)                   
     ORDER BY DID                     
                 
                       
 SET @StrRaiseError= 'Process Start on '+ CONVERT(VARCHAR(20),GETDATE(),121)         
 + ':No_of_files to be procssed: ' + RTRIM(CAST(@TotalFiles AS varchar(10)));                      
 RAISERROR (@StrRaiseError, 10, 1) WITH NOWAIT                      
                      
                       
 WHILE @i<=@TotalFiles  --Main Loop                      
  BEGIN                       
   SET @StrRaiseError= 'Processing file ... '+ @DDOCNAME                      
   RAISERROR (@StrRaiseError, 10, 1) WITH NOWAIT                      
                  
    SELECT @XmlDocument = EXTRACT_XML                      
    , @DDOCNAME = DDOCNAME                      
    , @DID = DID                       
    from @tblxml WHERE U_ID = @i                       
                         
   EXEC sp_xml_preparedocument @docHandle OUTPUT, @xmlDocument;                       
                         
   SET @StrRaiseError= 'Xml prepare and parsing process completed for the file ... '+ @DDOCNAME                      
   RAISERROR (@StrRaiseError, 10, 1) WITH NOWAIT                      
                         
   IF @XmlDocument <>''                       
                          
    SET @StrRaiseError= 'Xml to Staging table for the file ... '+ @DDOCNAME                      
    RAISERROR (@StrRaiseError, 10, 1) WITH NOWAIT                      
--TRUNCATE TABLE PS_EMAIL_ADDRESSES_STG                      
    BEGIN                  
      
  INSERT INTO PS_EMAIL_ADDRESSES_STG (                      
  EMPLID,PersonID,E_ADDR_TYPE,EMAIL_ADDR,--PREF_EMAIL_FLAG,                      
  EMAIL_ADDRESS_ID,PRIM_EMAIL_ADDRESS_ID,                      
  PROCESS_FLAG,DID                      
  )                      
  SELECT DISTINCT         
  P.Person_Number ,                      
  P.Person_ID ,                       
  [E-Mail_Type] ,                      
  [E-Mail_Address] ,                      
  [E-Mail_Address_ID] ,                      
  [Primary_E-Mail_ID] ,                            
  'N',@DID                      
  FROM OPENXML(@docHandle, '/DATA_DS/G_1/G_2/FILE_FRAGMENT/HEX_Email_Addresses/Person_DG/Person_Record/Email_Addresses_DG/Email_Addresses_Record', 2) WITH (                      
  Person_ID NVARCHAR(20) ,                      
  [E-Mail_Type] NVARCHAR(20),                      
  [E-Mail_Address] NVARCHAR(100),         
  [E-Mail_Address_ID] NVARCHAR(30),                      
  [Primary_E-Mail_ID] NVARCHAR(30)                      
  )C                        
  JOIN           
  (                      
  (SELECT                         
  Person_ID , Person_Number                        
  FROM                         
  OPENXML(@docHandle, '/DATA_DS/G_1/G_2/FILE_FRAGMENT/HEX_Email_Addresses/Person_DG/Person_Record',2)                        
  WITH                         
  (                          
  Person_ID NVARCHAR(100),                          
  Person_Number NVARCHAR(200)                        
  )                         
  )) P ON P.Person_ID = C.Person_ID                        
        WHERE (C.Person_ID IS NOT NULL OR C.Person_ID <> 'NULL' OR LEN(C.Person_ID) <> 0)                    
     END                       
     IF @docHandle <> 0         
  BEGIN        
   EXEC sp_xml_removedocument @docHandle;         
   UPDATE ORA_EMAIL_ADDRESSES_XML_SYNC SET PROCESS_FLAG=1 ,PROCESSED_DATE=getdate() where DID=@DID          
   SET @StrRaiseError= 'xml document released from memory... '        
   RAISERROR (@StrRaiseError, 10, 1) WITH NOWAIT          
  END                          
      SET @StrRaiseError= 'Xml to Staging table process completed for the file ... '+ @DDOCNAME                      
      RAISERROR (@StrRaiseError, 10, 1) WITH NOWAIT                      
                           
      SET @StrRaiseError= 'Transform Process start... '+ @DDOCNAME                      
      RAISERROR (@StrRaiseError, 10, 1) WITH NOWAIT                     
           
   --- TRANSFORM LOGIC START                      
                            
      UPDATE A                       
  SET PREF_EMAIL_FLAG=(CASE WHEN EMAIL_ADDRESS_ID=PRIM_EMAIL_ADDRESS_ID THEN 'Y' ELSE 'N' END)      ,E_ADDR_TYPE=dbo.GET_MAPPING_INFO_INTERFACE ('E_ADDR_TYPE',ISNULL( E_ADDR_TYPE,'W1'))                
  FROM PS_EMAIL_ADDRESSES_STG A                      
  WHERE A.PROCESS_FLAG='N' AND DID=@DID                      
              
             
  SET @StrRaiseError= 'Transform Process End... '+ @DDOCNAME                      
  RAISERROR (@StrRaiseError, 10, 1) WITH NOWAIT                      
             
  --TRANSFORM LOGIC END                      
        
  SET @StrRaiseError= 'update XML SYNC file and start picking next XML file.'                       
  RAISERROR (@StrRaiseError, 10, 1) WITH NOWAIT                      
         
                 
        
  SET @i=@i+1                      
                      
 END -- While loop ends here           
  --inserting 10 digit EMPLID to PS_HX_EMPLMAP_TBL table - start        
 -- SELECT * FROM PS_EMAIL_ADDRESSES_STG        
        
 IF object_id('tempdb..#EMPLID') IS NOT NULL        
BEGIN        
DROP TABLE #EMPLID        
END        
CREATE TABLE #EMPLID -- Declaring a temporary table        
(        
TABLEID INT        
,EMPLID VARCHAR(10)        
,DID INT        
)        
IF object_id('tempdb..#EMPLID_DUPLICATE') IS NOT NULL        
BEGIN        
DROP TABLE #EMPLID_DUPLICATE        
END        
CREATE TABLE #EMPLID_DUPLICATE -- Declaring a temporary table        
(        
EMPLID VARCHAR(10)        
,DID INT        
)        
INSERT INTO #EMPLID_DUPLICATE        
SELECT DISTINCT        
RIGHT(EMPLID,10),       
DID        
FROM        
PS_EMAIL_ADDRESSES_STG        
WHERE        
PROCESS_FLAG = 'N' AND EMPLID IS NOT NULL        
        
        
        
INSERT INTO #EMPLID        
SELECT ROW_NUMBER() OVER (ORDER BY EMPLID),        
EMPLID,        
DID        
FROM        
#EMPLID_DUPLICATE        
        
DECLARE @EMPLCNT INT = ( SELECT COUNT(1) FROM #EMPLID)        
PRINT 'EMP COUNT ='+CAST(@EMPLCNT AS VARCHAR(1000))        
DECLARE @k INT = 1        
        
DECLARE @OUT VARCHAR(5)        
WHILE @k <= @EMPLCNT        
BEGIN        
SET @EMPLID1 = (SELECT EMPLID FROM #EMPLID WHERE TABLEID = @k)        
EXEC USP_GET_EMPLID @EMPLID1,'', @OUT OUT        
-- print 'output='+ @OUT        
--SELECT @OUT        
UPDATE A        
SET A.EMPLID=RIGHT(A.EMPLID,5)--@OUT        
FROM PS_EMAIL_ADDRESSES_STG A,        
#EMPLID B        
WHERE A.EMPLID =@EMPLID1        
AND A.DID = B.DID        
AND PROCESS_FLAG = 'N'        
AND B.TABLEID = @k        
SET @k=@k+1        
END        
         
  DROP TABLE #EMPLID        
  DROP TABLE #EMPLID_DUPLICATE        
        
  --inserting 10 digit EMPLID to PS_HX_EMPLMAP_TBL table - end        
        
        
 if object_id('tempdb..##EMAIL_ADDRESSES_SYNC_B') is not null                      
 begin                      
 drop table ##EMAIL_ADDRESSES_SYNC_B                      
 end                      
        
 select * into ##EMAIL_ADDRESSES_SYNC_B from PS_EMAIL_ADDRESSES_STG where 1=2                      
 ALTER TABLE ##EMAIL_ADDRESSES_SYNC_B ADD TABLEID INT                      
               
 INSERT INTO ##EMAIL_ADDRESSES_SYNC_B                      
 SELECT DISTINCT  *,ROW_NUMBER() OVER(ORDER BY EMPLID,DID) FROM PS_EMAIL_ADDRESSES_STG               
 WHERE PROCESS_FLAG='N'  AND E_ADDR_TYPE IS NOT NULL              
 ORDER BY EMPLID,DID                  
                
 DECLARE @TotalRecs INT=(SELECT COUNT(1)FROM ##EMAIL_ADDRESSES_SYNC_B )                      
 DECLARE @j INT=1            
 DECLARE @EMAILID AS VARCHAR(70)             
 SET @EMAILID=''              
 Declare @sqldata varchar(max)               
                        
   SET @StrRaiseError= 'PartA-Staging Table to PeopleSoft Table:Process Start on '+ CONVERT(VARCHAR(20),GETDATE(),121)           
  + ':No_of_Recs to be procssed: '+ RTRIM(CAST(@TotalRecs AS varchar(10)));                      
   RAISERROR (@StrRaiseError, 10, 1) WITH NOWAIT                      
                      
  SET @DID=0                      
                       
 WHILE @j<=@TotalRecs  --Main Loop               
                  
  BEGIN                       
   SET @EMPLID=(SELECT EMPLID from ##EMAIL_ADDRESSES_SYNC_B WHERE TABLEID=@j)                      
   SET @DID=(SELECT DID FROM ##EMAIL_ADDRESSES_SYNC_B WHERE TABLEID=@j)                      
   SET @E_ADDR_TYPE=(SELECT E_ADDR_TYPE from ##EMAIL_ADDRESSES_SYNC_B WHERE TABLEID=@j)                      
   SET @EMAILID=   (SELECT EMAIL_ADDR FROM ##EMAIL_ADDRESSES_SYNC_B WHERE TABLEID=@j)           
                         
   SET @StrRaiseError= 'Processing-Employee ID ... '+ @EMPLID                      
   RAISERROR (@StrRaiseError, 10, 1) WITH NOWAIT                   
             
     IF  EXISTS (SELECT 'X' FROM PS_EMAIL_ADDRESSES WHERE EMPLID=@EMPLID AND E_ADDR_TYPE=@E_ADDR_TYPE)             
  BEGIN TRY          
   UPDATE A                       
   SET A.E_ADDR_TYPE=ISNULL(B.E_ADDR_TYPE,'')                      
   ,A.EMAIL_ADDR=ISNULL(B.EMAIL_ADDR,'')                      
   ,A.PREF_EMAIL_FLAG=ISNULL(B.PREF_EMAIL_FLAG,'')                       
   FROM PS_EMAIL_ADDRESSES A,##EMAIL_ADDRESSES_SYNC_B B                      
   WHERE A.EMPLID =B.EMPLID COLLATE SQL_Latin1_General_CP1_CI_AS                       
   AND A.E_ADDR_TYPE=B.E_ADDR_TYPE                      
   AND A.EMPLID=@EMPLID AND B.TABLEID=@j AND B.PROCESS_FLAG='N' AND DID=@DID                   
        
   INSERT INTO PSAUDIT (AUDIT_OPRID,AUDIT_STAMP,AUDIT_ACTN,RECNAME,FIELDNAME,OLDVALUE,NEWVALUE,KEY1          
   ,KEY2,KEY3, KEY4, KEY5, KEY6, KEY7, KEY8, KEY9, KEY10, KEY11, KEY12, KEY13,KEY14,KEY15)               
   SELECT DISTINCT EMPLID,GETDATE(),'C','EMAIL_ADDRESSES','EMAIL_ADDR','',ISNULL(EMAIL_ADDR,''),EMPLID          
   ,ISNULL(E_ADDR_TYPE,''),'' ,'','','','','','','','','','','',''               
   FROM ##EMAIL_ADDRESSES_SYNC_B WHERE TABLEID=@j AND EMPLID=@EMPLID AND PROCESS_FLAG='N' AND DID=@DID             
        
   UPDATE PSOPRDEFN SET EMAILID= LEFT(@EMAILID,70) WHERE EMPLID=@EMPLID AND  @E_ADDR_TYPE='BUSN'               
   UPDATE  PS_EMAIL_ADDRESSES_STG SET PROCESS_FLAG='Y',LASTUPDDTTM=GETDATE()         
    where EMPLID=@EMPLID AND PROCESS_FLAG='N' AND DID=@DID                    
  END TRY                      
        
  BEGIN CATCH                    
   SELECT                    
   ERROR_NUMBER() AS ErrorNumber,               
   ERROR_STATE() AS ErrorState,                    
   ERROR_SEVERITY() AS ErrorSeverity,                    
   ERROR_PROCEDURE() AS ErrorProcedure,                    
   ERROR_LINE() AS ErrorLine,                    
   ERROR_MESSAGE() AS ErrorMessage;                    
        
   select @sqldata = ('DID - ')+ Convert(varchar(100),@DID) + (',EMPLID - ')+ @EMPLID                  
        
   EXEC usp_GetInterfaceErrorInfo @sqldata               
  END CATCH                                       
        
              
   IF NOT EXISTS (SELECT 'X' FROM PS_EMAIL_ADDRESSES WHERE EMPLID=RIGHT(@EMPLID,5) AND E_ADDR_TYPE=@E_ADDR_TYPE)                      
                      
    BEGIN TRY                    
    INSERT INTO PS_EMAIL_ADDRESSES (EMPLID,E_ADDR_TYPE,EMAIL_ADDR,PREF_EMAIL_FLAG)                      
    SELECT RIGHT(EMPLID,5)  
    ,ISNULL(E_ADDR_TYPE,'')              
    ,ISNULL(EMAIL_ADDR,''),ISNULL(PREF_EMAIL_FLAG,'')                      
    FROM ##EMAIL_ADDRESSES_SYNC_B WHERE TABLEID=@j AND EMPLID=@EMPLID AND PROCESS_FLAG='N' AND DID=@DID                      
           
    INSERT INTO PSAUDIT (AUDIT_OPRID,AUDIT_STAMP,AUDIT_ACTN,RECNAME,FIELDNAME,OLDVALUE,NEWVALUE,KEY1,KEY2,KEY3          
  , KEY4, KEY5, KEY6, KEY7, KEY8, KEY9, KEY10, KEY11, KEY12, KEY13,KEY14,KEY15)               
    SELECT DISTINCT  EMPLID,GETDATE(),'A','EMAIL_ADDRESSES','EMAIL_ADDR','',ISNULL(EMAIL_ADDR,''),EMPLID          
   ,ISNULL(E_ADDR_TYPE,''),'' ,'','','','','','','','','','','',''               
    FROM ##EMAIL_ADDRESSES_SYNC_B WHERE TABLEID=@j AND EMPLID=@EMPLID AND PROCESS_FLAG='N' AND DID=@DID            
              
    UPDATE PSOPRDEFN SET EMAILID= LEFT(@EMAILID,70) WHERE EMPLID=@EMPLID AND  @E_ADDR_TYPE='BUSN'               
    UPDATE  PS_EMAIL_ADDRESSES_STG SET PROCESS_FLAG='Y',LASTUPDDTTM=GETDATE()         
    where EMPLID=@EMPLID AND PROCESS_FLAG='N' AND DID=@DID             
              
     END TRY          
           
  BEGIN CATCH                    
     SELECT                    
     ERROR_NUMBER() AS ErrorNumber,                    
     ERROR_STATE() AS ErrorState,                    
     ERROR_SEVERITY() AS ErrorSeverity,                    
     ERROR_PROCEDURE() AS ErrorProcedure,                    
     ERROR_LINE() AS ErrorLine,                    
     ERROR_MESSAGE() AS ErrorMessage;                    
            
     select @sqldata = ('DID - ')+ Convert(varchar(100),@DID) + (',EMPLID - ')+ @EMPLID                  
             
     EXEC usp_GetInterfaceErrorInfo @sqldata               
           
  END CATCH                        
           
  SET @j=@j+1                      
                      
 END -- While loop ends here                      
                       
  SET @StrRaiseError= 'delete the global temp table... '                      
  RAISERROR (@StrRaiseError, 10, 1) WITH NOWAIT                      
                         
  DROP TABLE ##EMAIL_ADDRESSES_SYNC_B                      
  --SELECT * FROM PS_EMAIL_ADDRESSES                      
                       
  SET @StrRaiseError= 'Process End on'+ CONVERT(VARCHAR(20),GETDATE(),121);                      
  RAISERROR (@StrRaiseError, 10, 1) WITH NOWAIT                      
  SET NOCOUNT OFF        
          
END 

---------------------------------- PS number generation --------------------------------------------------------------------------------
USE [RMG]
GO

/****** Object:  StoredProcedure [dbo].[USP_RT_PS_FIN_UPLOAD_NUMB_GEN]    Script Date: 12/17/2020 3:02:36 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

--------------------------------13-----------------------------------------
ALTER PROCEDURE [dbo].[USP_RT_PS_FIN_UPLOAD_NUMB_GEN] @tblPsupdate PS_NUMBER_UPDATE_ID READONLY
	,@S_USER_ID VARCHAR(50)
	,@N_MONTH INT
	,@N_YEAR INT
	,@S_GENERATION_TYPE VARCHAR(20)
AS
BEGIN
	-- SET NOCOUNT ON;      
	CREATE TABLE #TEMP_PS_NUM (
		N_ID INT
		,S_INV_LEVEL NVARCHAR(50)
		)

	INSERT INTO #TEMP_PS_NUM (
		N_Id
		,S_INV_LEVEL
		)
	SELECT N_Id
		,S_INV_LEVEL
	FROM @tblPsupdate

	--DECLARE @S_USER_ID VARCHAR(50), @D_CREATED_DATE DATETIME      
	--SET @S_USER_ID= (SELECT DISTINCT S_USER_ID FROM PS_NUMBER_UPDATE_ID)  
	DECLARE @S_GENERATION_TYPE_DESC NVARCHAR(20)

	SELECT @S_GENERATION_TYPE_DESC = S_GENERATION_TYPE
	FROM M_RT_GENERATION_TYPE
	WHERE N_ID = CONVERT(INT, @S_GENERATION_TYPE)

	IF @S_GENERATION_TYPE_DESC = 'ALL'
		SET @S_GENERATION_TYPE_DESC = NULL

	CREATE TABLE #TEMP_PS_UPDATE (
		N_ID INT
		,S_PROJ_TYPE VARCHAR(50)
		,S_CUST_ID VARCHAR(50)
		,S_CUST_NAME VARCHAR(500)
		,S_INV_LEVEL VARCHAR(50)
		,S_FIN_ID VARCHAR(50)
		,S_BU VARCHAR(50)
		,S_SOW VARCHAR(500)
		,N_SOW_ID INT
		,D_START_DATE DATE
		,D_END_DATE DATE
		,S_ENTRY_TYPE VARCHAR(50)
		,N_QTY FLOAT
		,N_INVOICE_VALUE FLOAT
		,S_RT_STATUS VARCHAR(50)
		,N_MONTH INT
		,N_YEAR INT
		,N_PS_UPLOAD_NUMBER VARCHAR(150)
		,S_CREATED_USER_ID VARCHAR(20)
		,D_CREATED_DATE DATETIME
		,S_MILESTONE VARCHAR(150)
		,N_VERSION_NUMB INT
		,N_IS_NUM INT
		,N_IS_VALID INT
		,N_SEQ_TYPE INT
		,D_INVOICE_DATE DATETIME
		,N_COST_CENTER_ID INT
		,S_VERSION_TYPE VARCHAR(20)
		,S_SEQUENCE_TYPE VARCHAR(100)
		,S_GENERATION_TYPE VARCHAR(20)
		,N_GENERATION_STATUS INT
		,N_PROJ_INVOICE_ID INT
		,S_CURRENCY VARCHAR(20)
		)

	IF EXISTS (
			SELECT *
			FROM #TEMP_PS_NUM
			WHERE S_INV_LEVEL = 'Fin ID'
			)
	BEGIN
		PRINT 'FIN 1'

		INSERT INTO #TEMP_PS_UPDATE (
			N_ID
			,S_PROJ_TYPE
			,S_CUST_ID
			,S_CUST_NAME
			,S_INV_LEVEL
			,S_FIN_ID
			,S_BU
			,S_SOW
			,N_SOW_ID
			,D_START_DATE
			,D_END_DATE
			,S_ENTRY_TYPE
			,N_QTY
			,N_INVOICE_VALUE
			,S_RT_STATUS
			,N_MONTH
			,N_YEAR
			,N_PS_UPLOAD_NUMBER
			,S_CREATED_USER_ID
			,D_CREATED_DATE
			,S_MILESTONE
			,N_VERSION_NUMB
			,N_IS_NUM
			,N_IS_VALID
			,N_SEQ_TYPE
			,D_INVOICE_DATE
			,N_COST_CENTER_ID
			,S_VERSION_TYPE
			,S_SEQUENCE_TYPE
			,S_GENERATION_TYPE
			,N_GENERATION_STATUS
			,N_PROJ_INVOICE_ID
			,S_CURRENCY
			)
		SELECT A.N_ID
			,S_PROJ_TYPE
			,S_CUST_ID
			,S_CUST_NAME
			,A.S_INV_LEVEL
			,S_FIN_ID
			,S_BU
			,S_SOW
			,A.N_SOW_ID
			,A.D_START_DATE
			,A.D_END_DATE
			,S_ENTRY_TYPE
			,N_QTY
			,N_INVOICE_VALUE
			,S_RT_STATUS
			,N_MONTH
			,N_YEAR
			,N_PS_UPLOAD_NUMBER
			,S_CREATED_USER_ID
			,A.D_CREATED_DATE
			,S_MILESTONE
			,N_VERSION_NUMB
			,N_IS_NUM
			,N_IS_VALID
			,NULL
			,D_INVOICE_DATE
			,N_COST_CENTER_ID
			,S_VERSION_TYPE
			,S_SEQUENCE_TYPE
			,S_GENERATION_TYPE
			,N_GENERATION_STATUS
			,N_PROJ_INVOICE_ID
			,F.S_CURRENCY
		FROM dbo.M_RT_PS_FINANCE_UPLOAD A --, #TEMP_PS_NUM B
			,M_RT_SOW_MASTER F
		WHERE --A.N_ID=B.N_ID AND      
			S_FIN_ID IN (
				SELECT S_FIN_ID
				FROM dbo.M_RT_PS_FINANCE_UPLOAD
				WHERE N_ID IN (
						SELECT N_ID
						FROM #TEMP_PS_NUM
						WHERE S_INV_LEVEL = 'Fin ID'
						)
				)
			AND S_ENTRY_TYPE IN (
				SELECT S_ENTRY_TYPE
				FROM DBO.M_RT_PS_FINANCE_UPLOAD
				WHERE N_ID IN (
						SELECT N_ID
						FROM #TEMP_PS_NUM
						WHERE S_INV_LEVEL = 'Fin ID'
						)
				)
			AND N_PS_UPLOAD_NUMBER = '0'
			AND A.S_INV_LEVEL = 'Fin ID'
			AND S_GENERATION_TYPE = ISNULL(@S_GENERATION_TYPE_DESC,S_GENERATION_TYPE)
			AND S_VERSION_TYPE = 'CURRENT'
			--N_ID IN (SELECT N_ID FROM #TEMP_PS_NUM)    
			AND F.S_FINANCE_ID = A.S_FIN_ID
			AND F.S_CUSTOMER_ID = A.S_CUST_ID
			AND A.N_MONTH = @N_MONTH
			AND A.N_YEAR = @N_YEAR
	END

	IF EXISTS (
			SELECT *
			FROM #TEMP_PS_NUM
			WHERE S_INV_LEVEL IN (
					'SOW'
					,'PO'
					)
			)
	BEGIN
		INSERT INTO #TEMP_PS_UPDATE (
			N_ID
			,S_PROJ_TYPE
			,S_CUST_ID
			,S_CUST_NAME
			,S_INV_LEVEL
			,S_FIN_ID
			,S_BU
			,S_SOW
			,N_SOW_ID
			,D_START_DATE
			,D_END_DATE
			,S_ENTRY_TYPE
			,N_QTY
			,N_INVOICE_VALUE
			,S_RT_STATUS
			,N_MONTH
			,N_YEAR
			,N_PS_UPLOAD_NUMBER
			,S_CREATED_USER_ID
			,D_CREATED_DATE
			,S_MILESTONE
			,N_VERSION_NUMB
			,N_IS_NUM
			,N_IS_VALID
			,N_SEQ_TYPE
			,D_INVOICE_DATE
			,N_COST_CENTER_ID
			,S_VERSION_TYPE
			,S_SEQUENCE_TYPE
			,S_GENERATION_TYPE
			,N_GENERATION_STATUS
			,N_PROJ_INVOICE_ID
			,S_CURRENCY
			)
		SELECT N_ID
			,S_PROJ_TYPE
			,S_CUST_ID
			,S_CUST_NAME
			,A.S_INV_LEVEL
			,S_FIN_ID
			,S_BU
			,S_SOW
			,A.N_SOW_ID
			,A.D_START_DATE
			,A.D_END_DATE
			,S_ENTRY_TYPE
			,N_QTY
			,N_INVOICE_VALUE
			,S_RT_STATUS
			,N_MONTH
			,N_YEAR
			,N_PS_UPLOAD_NUMBER
			,S_CREATED_USER_ID
			,A.D_CREATED_DATE
			,S_MILESTONE
			,N_VERSION_NUMB
			,N_IS_NUM
			,N_IS_VALID
			,NULL
			,D_INVOICE_DATE
			,N_COST_CENTER_ID
			,S_VERSION_TYPE
			,S_SEQUENCE_TYPE
			,S_GENERATION_TYPE
			,N_GENERATION_STATUS
			,N_PROJ_INVOICE_ID
			,F.S_CURRENCY
		FROM dbo.M_RT_PS_FINANCE_UPLOAD A
			,M_RT_SOW_MASTER F
		WHERE --S_FIN_ID IN (select S_FIN_ID from dbo.M_RT_PS_FINANCE_UPLOAD WHERE N_ID IN (SELECT N_ID FROM #TEMP_PS_NUM))      
			N_ID IN (
				SELECT N_ID
				FROM #TEMP_PS_NUM
				WHERE S_INV_LEVEL IN (
						'SOW'
						,'PO'
						)
				)
			AND S_ENTRY_TYPE IN (
				SELECT S_ENTRY_TYPE
				FROM DBO.M_RT_PS_FINANCE_UPLOAD
				WHERE N_ID IN (
						SELECT N_ID
						FROM #TEMP_PS_NUM
						WHERE S_INV_LEVEL IN (
								'SOW'
								,'PO'
								)
						)
				)
			AND N_PS_UPLOAD_NUMBER = '0'
			AND S_GENERATION_TYPE = ISNULL(@S_GENERATION_TYPE_DESC,S_GENERATION_TYPE)
			AND A.N_SOW_ID = F.N_SOW_ID
			------- TO INSERT PREVIOUS VERSION DATA FOR NUMBER GENERATION AT CUSTOMER LEVEL --------------------------      
			--INSERT INTO #TEMP_PS_UPDATE      
			--(N_ID, S_PROJ_TYPE, S_CUST_ID, S_CUST_NAME, S_INV_LEVEL, S_FIN_ID, S_BU, S_SOW, N_SOW_ID, D_START_DATE, D_END_DATE, S_ENTRY_TYPE,      
			--N_QTY, N_INVOICE_VALUE, S_RT_STATUS, N_MONTH, N_YEAR, N_PS_UPLOAD_NUMBER,S_CREATED_USER_ID, D_CREATED_DATE, S_MILESTONE,      
			--N_VERSION_NUMB, N_IS_NUM,N_IS_VALID, N_SEQ_TYPE, D_INVOICE_DATE,N_COST_CENTER_ID,S_VERSION_TYPE,S_SEQUENCE_TYPE)      
			--select A.N_ID, A.S_PROJ_TYPE, A.S_CUST_ID, A.S_CUST_NAME, A.S_INV_LEVEL,A.S_FIN_ID, A.S_BU, A.S_SOW, A.N_SOW_ID, A.D_START_DATE,A.D_END_DATE, A.S_ENTRY_TYPE,      
			-- A.N_QTY, A.N_INVOICE_VALUE, A.S_RT_STATUS, A.N_MONTH, A.N_YEAR, A.N_PS_UPLOAD_NUMBER, A.S_CREATED_USER_ID, A.D_CREATED_DATE, A.S_MILESTONE,      
			-- A.N_VERSION_NUMB, A.N_IS_NUM, A.N_IS_VALID, NULL, A.D_INVOICE_DATE ,A.N_COST_CENTER_ID,A.S_VERSION_TYPE,A.S_SEQUENCE_TYPE      
			--from M_RT_PS_FINANCE_UPLOAD A,      
			--#TEMP_PS_UPDATE B      
			--WHERE A.S_FIN_ID = B.S_FIN_ID  and A.S_VERSION_TYPE='PREVIOUS' and      
			--A.N_SOW_ID=B.N_SOW_ID AND A.S_FIN_ID=B.S_FIN_ID AND A.D_START_DATE = B.D_START_DATE      
	END

	IF EXISTS (
			SELECT *
			FROM #TEMP_PS_NUM
			WHERE S_INV_LEVEL = 'BILLING CENTER'
			) --'BILLING CENTER'      
	BEGIN
		INSERT INTO #TEMP_PS_UPDATE (
			N_ID
			,S_PROJ_TYPE
			,S_CUST_ID
			,S_CUST_NAME
			,S_INV_LEVEL
			,S_FIN_ID
			,S_BU
			,S_SOW
			,N_SOW_ID
			,D_START_DATE
			,D_END_DATE
			,S_ENTRY_TYPE
			,N_QTY
			,N_INVOICE_VALUE
			,S_RT_STATUS
			,N_MONTH
			,N_YEAR
			,N_PS_UPLOAD_NUMBER
			,S_CREATED_USER_ID
			,D_CREATED_DATE
			,S_MILESTONE
			,N_VERSION_NUMB
			,N_IS_NUM
			,N_IS_VALID
			,N_SEQ_TYPE
			,D_INVOICE_DATE
			,N_COST_CENTER_ID
			,S_VERSION_TYPE
			,S_SEQUENCE_TYPE
			,S_GENERATION_TYPE
			,N_GENERATION_STATUS
			,N_PROJ_INVOICE_ID
			,S_CURRENCY
			)
		SELECT N_ID
			,S_PROJ_TYPE
			,S_CUST_ID
			,S_CUST_NAME
			,A.S_INV_LEVEL
			,S_FIN_ID
			,S_BU
			,S_SOW
			,A.N_SOW_ID
			,A.D_START_DATE
			,A.D_END_DATE
			,S_ENTRY_TYPE
			,N_QTY
			,N_INVOICE_VALUE
			,S_RT_STATUS
			,N_MONTH
			,N_YEAR
			,N_PS_UPLOAD_NUMBER
			,S_CREATED_USER_ID
			,A.D_CREATED_DATE
			,S_MILESTONE
			,N_VERSION_NUMB
			,N_IS_NUM
			,N_IS_VALID
			,NULL
			,D_INVOICE_DATE
			,N_COST_CENTER_ID
			,S_VERSION_TYPE
			,S_SEQUENCE_TYPE
			,S_GENERATION_TYPE
			,N_GENERATION_STATUS
			,N_PROJ_INVOICE_ID
			,F.S_CURRENCY
		FROM dbo.M_RT_PS_FINANCE_UPLOAD A
			,M_RT_SOW_MASTER F
		WHERE --S_FIN_ID IN (select S_FIN_ID from dbo.M_RT_PS_FINANCE_UPLOAD WHERE N_ID IN (SELECT N_ID FROM #TEMP_PS_NUM))      
			N_ID IN (
				SELECT N_ID
				FROM #TEMP_PS_NUM
				WHERE S_INV_LEVEL = 'BILLING CENTER'
				)
			AND S_ENTRY_TYPE IN (
				SELECT S_ENTRY_TYPE
				FROM DBO.M_RT_PS_FINANCE_UPLOAD
				WHERE N_ID IN (
						SELECT N_ID
						FROM #TEMP_PS_NUM
						WHERE S_INV_LEVEL IN ('BILLING CENTER')
						)
				)
			AND N_PS_UPLOAD_NUMBER = '0'
			AND S_GENERATION_TYPE = ISNULL(@S_GENERATION_TYPE_DESC,S_GENERATION_TYPE)
			AND A.N_SOW_ID = F.N_SOW_ID
			--INSERT INTO #TEMP_PS_UPDATE      
			--(N_ID, S_PROJ_TYPE, S_CUST_ID, S_CUST_NAME, S_INV_LEVEL, S_FIN_ID, S_BU, S_SOW, N_SOW_ID, D_START_DATE, D_END_DATE, S_ENTRY_TYPE,      
			--N_QTY, N_INVOICE_VALUE, S_RT_STATUS, N_MONTH, N_YEAR, N_PS_UPLOAD_NUMBER,S_CREATED_USER_ID, D_CREATED_DATE, S_MILESTONE,      
			--N_VERSION_NUMB, N_IS_NUM,N_IS_VALID, N_SEQ_TYPE, D_INVOICE_DATE,N_COST_CENTER_ID,S_VERSION_TYPE,S_SEQUENCE_TYPE)      
			--select A.N_ID, A.S_PROJ_TYPE, A.S_CUST_ID, A.S_CUST_NAME, A.S_INV_LEVEL,A.S_FIN_ID, A.S_BU, A.S_SOW, A.N_SOW_ID, A.D_START_DATE,A.D_END_DATE, A.S_ENTRY_TYPE,      
			-- A.N_QTY, A.N_INVOICE_VALUE, A.S_RT_STATUS, A.N_MONTH, A.N_YEAR, A.N_PS_UPLOAD_NUMBER, A.S_CREATED_USER_ID, A.D_CREATED_DATE, A.S_MILESTONE,      
			-- A.N_VERSION_NUMB, A.N_IS_NUM, A.N_IS_VALID, NULL, A.D_INVOICE_DATE ,A.N_COST_CENTER_ID,A.S_VERSION_TYPE,A.S_SEQUENCE_TYPE      
			--from M_RT_PS_FINANCE_UPLOAD A,      
			--#TEMP_PS_UPDATE B      
			--WHERE A.S_FIN_ID = B.S_FIN_ID  and A.S_VERSION_TYPE='PREVIOUS' and      
			--A.N_SOW_ID=B.N_SOW_ID AND A.S_FIN_ID=B.S_FIN_ID AND A.D_START_DATE = B.D_START_DATE      
	END

	--if EXISTS (SELECT * FROM #TEMP_PS_NUM WHERE S_INV_LEVEL='SOW with BC')      
	--BEGIN      
	-- INSERT INTO #TEMP_PS_UPDATE      
	-- (N_ID, S_PROJ_TYPE, S_CUST_ID, S_CUST_NAME, S_INV_LEVEL, S_FIN_ID, S_BU, S_SOW, N_SOW_ID, D_START_DATE, D_END_DATE, S_ENTRY_TYPE,      
	-- N_QTY, N_INVOICE_VALUE, S_RT_STATUS, N_MONTH, N_YEAR, N_PS_UPLOAD_NUMBER,S_CREATED_USER_ID, D_CREATED_DATE, S_MILESTONE,      
	-- N_VERSION_NUMB, N_IS_NUM,N_IS_VALID, N_SEQ_TYPE, D_INVOICE_DATE,N_COST_CENTER_ID,S_VERSION_TYPE,S_SEQUENCE_TYPE)      
	-- SELECT      
	-- N_ID, S_PROJ_TYPE, S_CUST_ID, S_CUST_NAME, S_INV_LEVEL,S_FIN_ID, S_BU, S_SOW, N_SOW_ID, D_START_DATE,D_END_DATE, S_ENTRY_TYPE,      
	-- N_QTY, N_INVOICE_VALUE, S_RT_STATUS, N_MONTH, N_YEAR, N_PS_UPLOAD_NUMBER, S_CREATED_USER_ID, D_CREATED_DATE, S_MILESTONE,      
	-- N_VERSION_NUMB, N_IS_NUM, N_IS_VALID, NULL, D_INVOICE_DATE,N_COST_CENTER_ID,S_VERSION_TYPE,S_SEQUENCE_TYPE      
	-- FROM dbo.M_RT_PS_FINANCE_UPLOAD WHERE --S_FIN_ID IN (select S_FIN_ID from dbo.M_RT_PS_FINANCE_UPLOAD WHERE N_ID IN (SELECT N_ID FROM #TEMP_PS_NUM))      
	--   N_ID IN (SELECT N_ID FROM #TEMP_PS_NUM WHERE S_INV_LEVEL='SOW with BC')      
	-- AND N_PS_UPLOAD_NUMBER='0'      
	-- AND S_GENERATION_TYPE=@S_GENERATION_TYPE_DESC      
	--END      
	IF EXISTS (
			SELECT *
			FROM #TEMP_PS_UPDATE
			WHERE (
					S_VERSION_TYPE = 'CURRENT'
					AND S_SEQUENCE_TYPE = 'ACCRUAL'
					)
				OR (
					S_VERSION_TYPE = 'CURRENT'
					AND S_SEQUENCE_TYPE = 'INVOICE'
					)
			)
	BEGIN
		INSERT INTO #TEMP_PS_UPDATE (
			N_ID
			,S_PROJ_TYPE
			,S_CUST_ID
			,S_CUST_NAME
			,S_INV_LEVEL
			,S_FIN_ID
			,S_BU
			,S_SOW
			,N_SOW_ID
			,D_START_DATE
			,D_END_DATE
			,S_ENTRY_TYPE
			,N_QTY
			,N_INVOICE_VALUE
			,S_RT_STATUS
			,N_MONTH
			,N_YEAR
			,N_PS_UPLOAD_NUMBER
			,S_CREATED_USER_ID
			,D_CREATED_DATE
			,S_MILESTONE
			,N_VERSION_NUMB
			,N_IS_NUM
			,N_IS_VALID
			,N_SEQ_TYPE
			,D_INVOICE_DATE
			,N_COST_CENTER_ID
			,S_VERSION_TYPE
			,S_SEQUENCE_TYPE
			,S_GENERATION_TYPE
			,N_GENERATION_STATUS
			,N_PROJ_INVOICE_ID
			)
		SELECT DISTINCT A.N_ID
			,A.S_PROJ_TYPE
			,A.S_CUST_ID
			,A.S_CUST_NAME
			,A.S_INV_LEVEL
			,A.S_FIN_ID
			,A.S_BU
			,A.S_SOW
			,A.N_SOW_ID
			,A.D_START_DATE
			,A.D_END_DATE
			,A.S_ENTRY_TYPE
			,A.N_QTY
			,A.N_INVOICE_VALUE
			,A.S_RT_STATUS
			,A.N_MONTH
			,A.N_YEAR
			,A.N_PS_UPLOAD_NUMBER
			,A.S_CREATED_USER_ID
			,A.D_CREATED_DATE
			,A.S_MILESTONE
			,A.N_VERSION_NUMB
			,A.N_IS_NUM
			,A.N_IS_VALID
			,NULL
			,A.D_INVOICE_DATE
			,A.N_COST_CENTER_ID
			,A.S_VERSION_TYPE
			,A.S_SEQUENCE_TYPE
			,A.S_GENERATION_TYPE
			,A.N_GENERATION_STATUS
			,A.N_PROJ_INVOICE_ID
		FROM M_RT_PS_FINANCE_UPLOAD A
			,#TEMP_PS_UPDATE B
		WHERE A.S_FIN_ID = B.S_FIN_ID
			AND A.S_VERSION_TYPE = 'PREVIOUS'
			AND A.S_BU = B.S_BU
			--AND A.N_SOW_ID=B.N_SOW_ID AND A.D_START_DATE = B.D_START_DATE      
	END

	IF EXISTS (
			SELECT *
			FROM #TEMP_PS_UPDATE
			WHERE S_SEQUENCE_TYPE = 'DIFF'
			)
	BEGIN
		PRINT 'DIFF'

		SELECT *
		INTO #TEMP_CURRENT_DIFF
		FROM #TEMP_PS_UPDATE
		WHERE S_SEQUENCE_TYPE = 'DIFF'
			AND S_VERSION_TYPE = 'CURRENT'

		SELECT A.*
		INTO #TEMP_PREVIOUS_DIFF
		FROM M_RT_PS_FINANCE_UPLOAD A
			,#TEMP_PS_UPDATE B
		WHERE A.N_ID = B.N_ID
			AND A.S_FIN_ID = B.S_FIN_ID
			AND A.S_VERSION_TYPE = 'PREVIOUS'

		--SELECT * FROM #TEMP_CURRENT_DIFF      
		--SELECT * FROM  #TEMP_PREVIOUS_DIFF      
		--SELECT N_QTY,N_INVOICE_VALUE,S_SEQUENCE_TYPE,S_SEQUENCE_TYPE_CODE, * FROM M_RT_PS_FINANCE_UPLOAD WHERE N_ID IN(496399,496400)      
		UPDATE C
		SET C.N_QTY = A.N_QTY - B.N_QTY
			,C.N_INVOICE_VALUE = A.N_INVOICE_VALUE - B.N_INVOICE_VALUE
			,C.S_SEQUENCE_TYPE = CASE 
				WHEN ((A.N_INVOICE_VALUE - B.N_INVOICE_VALUE) >= 0)
					THEN 'INVOICE'
				ELSE 'CREDITNOTE'
				END
			,C.S_SEQUENCE_TYPE_CODE = CASE 
				WHEN ((A.N_INVOICE_VALUE - B.N_INVOICE_VALUE) >= 0)
					THEN 'INV'
				ELSE 'CN'
				END
		FROM M_RT_PS_FINANCE_UPLOAD C
			,#TEMP_CURRENT_DIFF A
			,#TEMP_PREVIOUS_DIFF B
		WHERE A.S_FIN_ID = B.S_FIN_ID
			AND A.S_FIN_ID = C.S_FIN_ID
			AND C.S_VERSION_TYPE = 'CURRENT'
			AND C.S_SEQUENCE_TYPE = 'DIFF'

		UPDATE C
		SET C.N_QTY = A.N_QTY - B.N_QTY
			,C.N_INVOICE_VALUE = A.N_INVOICE_VALUE - B.N_INVOICE_VALUE
			,C.S_SEQUENCE_TYPE = CASE 
				WHEN ((A.N_INVOICE_VALUE - B.N_INVOICE_VALUE) >= 0)
					THEN 'INVOICE'
				ELSE 'CREDITNOTE'
				END
			,C.S_SEQUENCE_TYPE_CODE = CASE 
				WHEN ((A.N_INVOICE_VALUE - B.N_INVOICE_VALUE) >= 0)
					THEN 'INV'
				ELSE 'CN'
				END
		FROM M_RT_PS_FINANCE_UPLOAD_REPORT C
			,#TEMP_CURRENT_DIFF A
			,#TEMP_PREVIOUS_DIFF B
		WHERE A.S_FIN_ID = B.S_FIN_ID
			AND A.S_FIN_ID = C.S_FIN_ID
			AND C.S_VERSION_TYPE = 'CURRENT'
			AND C.S_SEQUENCE_TYPE = 'DIFF'

		DELETE A
		FROM M_RT_PS_FINANCE_UPLOAD A
			,#TEMP_PREVIOUS_DIFF B
		WHERE A.N_ID = B.N_ID
			AND A.S_FIN_ID = B.S_FIN_ID
			AND A.S_VERSION_TYPE = 'PREVIOUS'

		DELETE A
		FROM M_RT_PS_FINANCE_UPLOAD_REPORT A
			,#TEMP_PREVIOUS_DIFF B
		WHERE A.N_ID = B.N_ID
			AND A.S_FIN_ID = B.S_FIN_ID
			AND A.S_VERSION_TYPE = 'PREVIOUS'

		DELETE
		FROM #TEMP_PS_UPDATE
		WHERE S_SEQUENCE_TYPE = 'DIFF' --AND S_VERSION_TYPE='PREVIOUS'   

		INSERT INTO #TEMP_PS_UPDATE (
			N_ID
			,S_PROJ_TYPE
			,S_CUST_ID
			,S_CUST_NAME
			,S_INV_LEVEL
			,S_FIN_ID
			,S_BU
			,S_SOW
			,N_SOW_ID
			,D_START_DATE
			,D_END_DATE
			,S_ENTRY_TYPE
			,N_QTY
			,N_INVOICE_VALUE
			,S_RT_STATUS
			,N_MONTH
			,N_YEAR
			,N_PS_UPLOAD_NUMBER
			,S_CREATED_USER_ID
			,D_CREATED_DATE
			,S_MILESTONE
			,N_VERSION_NUMB
			,N_IS_NUM
			,N_IS_VALID
			,N_SEQ_TYPE
			,D_INVOICE_DATE
			,N_COST_CENTER_ID
			,S_VERSION_TYPE
			,S_SEQUENCE_TYPE
			,S_GENERATION_TYPE
			,N_GENERATION_STATUS
			,N_PROJ_INVOICE_ID
			)
		SELECT N_ID
			,S_PROJ_TYPE
			,S_CUST_ID
			,S_CUST_NAME
			,S_INV_LEVEL
			,S_FIN_ID
			,S_BU
			,S_SOW
			,N_SOW_ID
			,D_START_DATE
			,D_END_DATE
			,S_ENTRY_TYPE
			,N_QTY
			,N_INVOICE_VALUE
			,S_RT_STATUS
			,N_MONTH
			,N_YEAR
			,N_PS_UPLOAD_NUMBER
			,S_CREATED_USER_ID
			,D_CREATED_DATE
			,S_MILESTONE
			,N_VERSION_NUMB
			,N_IS_NUM
			,N_IS_VALID
			,NULL
			,D_INVOICE_DATE
			,N_COST_CENTER_ID
			,S_VERSION_TYPE
			,S_SEQUENCE_TYPE
			,S_GENERATION_TYPE
			,N_GENERATION_STATUS
			,N_PROJ_INVOICE_ID
		FROM dbo.M_RT_PS_FINANCE_UPLOAD
		WHERE N_ID IN (
				SELECT N_ID
				FROM #TEMP_CURRENT_DIFF
				)
			AND N_PS_UPLOAD_NUMBER = '0'

		UPDATE #TEMP_PS_UPDATE
		SET S_SEQUENCE_TYPE = 'INVOICE'
		WHERE S_VERSION_TYPE = 'CURRENT'
			AND S_SEQUENCE_TYPE = 'DIFF'
			--SELECT * FROM #TEMP_PS_UPDATE where S_FIN_ID ='04371'      
	END

	--DECLARE      @S_USER_ID VARCHAR(50)='32373',      @N_MONTH int=5,      @N_YEAR int=2018      
	CREATE TABLE #TEMP_LAST_NUMB_SEED (
		N_LATEST_NUM INT
		,S_BUSINESS_UNIT VARCHAR(50)
		,S_INV_TYPE VARCHAR(50)
		)

	--select * from #TEMP_PS_UPDATE      
	--ALTER TABLE #TEMP_PS_UPDATE ADD N_SEQ_TYPE int      
	--UPDATE #TEMP_PS_UPDATE SET N_SEQ_TYPE =      
	--CASE WHEN ( (S_ENTRY_TYPE ='BILLING SHEET' AND S_RT_STATUS='REVIEWED')      
	--            OR (S_ENTRY_TYPE ='MILESTONE' AND S_RT_STATUS='REVIEWED')               
	--            OR (S_ENTRY_TYPE ='ONE TIME ENTRY' AND S_RT_STATUS='FINANCE REVIEWED')      
	--   OR (S_ENTRY_TYPE ='DISCOUNT' AND S_RT_STATUS='REVIEWED'))       THEN 1      
	--WHEN ( (S_ENTRY_TYPE ='BILLING SHEET' AND S_RT_STATUS='ACCRUED')      
	--   OR (S_ENTRY_TYPE ='DISCOUNT' AND S_RT_STATUS='ACCRUED')      
	--            OR (S_ENTRY_TYPE ='ACCRUAL SHEET' AND S_RT_STATUS IN ('ACCRUED','ACCRUAL WITH CAP ON INVOICE'))      
	--            OR (S_ENTRY_TYPE ='REVERSAL' AND (S_RT_STATUS='FINREVERSED' OR S_RT_STATUS='ACCRUED'))      
	--            OR (S_ENTRY_TYPE ='UNBILLED TRANSFER' AND S_RT_STATUS='REVIEWED')      
	--            OR (S_ENTRY_TYPE='ACCRUAL REVERSAL'))               THEN 2      
	--WHEN ((S_ENTRY_TYPE ='ADVANCE BILLING' AND S_RT_STATUS='ACCRUED')      
	--  OR (S_ENTRY_TYPE ='DISCOUNT PROVISION' AND S_RT_STATUS IN('ACCRUED','REVIEWED','ACCRUAL WITH CAP ON INVOICE'))      
	--  OR (S_ENTRY_TYPE='DISCOUNT PROVISION REVERSAL' AND S_RT_STATUS='FINANCE REVIEWED'))     THEN 3      
	--WHEN ((S_ENTRY_TYPE ='REVERSAL' AND (S_RT_STATUS='FINREVERSED' OR S_RT_STATUS='REVIEWED'))      
	--  OR(S_ENTRY_TYPE='THIRD PARTY SERVICES REVERSAL' AND S_RT_STATUS='FINANCE REVIEWED'))    THEN 4 END      
	--FROM #TEMP_PS_UPDATE      
	--  SELECT * FROM M_RT_PS_REFERENCE_SEQUENCE      
	-- select * from #TEMP_PS_UPDATE      
	--UPDATE M_RT_PS_FINANCE_UPLOAD_REPORT SET S_SEQUENCE_TYPE =  'INVOICE' , S_SEQUENCE_TYPE_CODE =  'INV'      
	--WHERE S_SEQUENCE_TYPE ='DIFF'      
	--UPDATE M_RT_PS_FINANCE_UPLOAD SET S_SEQUENCE_TYPE =  'INVOICE' , S_SEQUENCE_TYPE_CODE =  'INV'      
	--WHERE S_SEQUENCE_TYPE ='DIFF'      
	UPDATE A
	SET S_SEQUENCE_TYPE = 'INVOICE'
		,S_SEQUENCE_TYPE_CODE = 'INV'
	FROM M_RT_PS_FINANCE_UPLOAD_REPORT A
		,#TEMP_PS_UPDATE B
	WHERE A.S_FIN_ID = B.S_FIN_ID
		AND B.S_SEQUENCE_TYPE = 'DIFF'

	UPDATE A
	SET S_SEQUENCE_TYPE = 'INVOICE'
		,S_SEQUENCE_TYPE_CODE = 'INV'
	FROM M_RT_PS_FINANCE_UPLOAD A
		,#TEMP_PS_UPDATE B
	WHERE A.S_FIN_ID = B.S_FIN_ID
		AND B.S_SEQUENCE_TYPE = 'DIFF'

	UPDATE #TEMP_PS_UPDATE
	SET N_SEQ_TYPE = CASE 
			WHEN ((S_ENTRY_TYPE = 'DISCOUNT PROVISION'))
				THEN 5
			WHEN ((S_ENTRY_TYPE = 'DISCOUNT PROVISION REVERSAL'))
				THEN 6
			WHEN (
					S_SEQUENCE_TYPE = 'CREDITNOTE'
					OR S_ENTRY_TYPE = 'REVENUE REVERSAL'
					OR (
						S_ENTRY_TYPE = 'REVERSAL'
						AND (
							S_RT_STATUS = 'FINREVERSED'
							OR S_RT_STATUS = 'REVIEWED'
							)
						)
					OR (
						S_ENTRY_TYPE = 'THIRD PARTY SERVICES REVERSAL'
						AND S_RT_STATUS = 'FINANCE REVIEWED'
						)
					)
				THEN 4
			WHEN (
					S_VERSION_TYPE = 'PREVIOUS'
					AND S_SEQUENCE_TYPE = 'UNBILLED REVERSAL'
					)
				THEN 7
			WHEN (
					(
						S_ENTRY_TYPE = 'ADVANCE BILLING'
						AND S_RT_STATUS = 'REVIEWED'
						)
					)
				THEN 8
			WHEN ((S_ENTRY_TYPE = 'ADVANCE BILLING REVERSAL'))
				THEN 9
			WHEN (
					(
						S_VERSION_TYPE = 'CURRENT'
						AND S_SEQUENCE_TYPE = 'INVOICE'
						)
					OR (
						S_ENTRY_TYPE = 'MILESTONE'
						AND S_RT_STATUS = 'REVIEWED'
						)
					OR (
						S_ENTRY_TYPE = 'ONE TIME ENTRY'
						AND S_RT_STATUS = 'FINANCE REVIEWED'
						)
					)
				THEN 1
			WHEN (
					(
						S_VERSION_TYPE = 'CURRENT'
						AND S_SEQUENCE_TYPE = 'ACCRUAL'
						)
					--OR (S_ENTRY_TYPE ='BILLING SHEET' AND S_VERSION_TYPE ='PREVIOUS' AND S_SEQUENCE_TYPE='UNBILLED REVERSAL')      
					OR (
						S_ENTRY_TYPE = 'ACCRUAL SHEET'
						AND S_RT_STATUS IN (
							'ACCRUED'
							,'ACCRUAL WITH CAP ON INVOICE'
							)
						)
					OR (
						S_ENTRY_TYPE = 'REVERSAL'
						AND (
							S_RT_STATUS = 'FINREVERSED'
							OR S_RT_STATUS = 'ACCRUED'
							)
						)
					OR (
						S_ENTRY_TYPE = 'UNBILLED TRANSFER'
						AND S_RT_STATUS = 'REVIEWED'
						)
					OR (S_ENTRY_TYPE = 'ACCRUAL REVERSAL')
					)
				THEN 2
					--WHEN ((S_ENTRY_TYPE ='ADVANCE BILLING' AND S_RT_STATUS='ACCRUED'))           THEN 3      
			END
	FROM #TEMP_PS_UPDATE

	CREATE TABLE #TEMP_BILLED_NUM (
		ID INT IDENTITY
		,N_LATEST_NUM INT
		,N_ID INT
		,S_BU VARCHAR(50)
		,N_SEQ_TYPE INT
		,S_SEQ_TYPE VARCHAR(50)
		,S_INV_LEVEL VARCHAR(30)
		,S_FIN_ID INT
		,D_START_DATE DATE
		,D_END_DATE DATE
		,S_ENTRY_TYPE VARCHAR(100)
		,N_SOW_ID INT
		,D_INVOICE_DATE DATE
		,S_CUST_ID VARCHAR(50)
		,S_CURRENCY VARCHAR(20)
		)

	CREATE TABLE #TEMP_SEED_UPDATE (
		INC_VAL INT
		,S_BU VARCHAR(50)
		,N_SEQ_TYPE INT
		,S_SEQ_TYPE VARCHAR(50)
		)

	--SELECT (MIN(N_LATEST_NUM)) AS N_LATEST_NUM,      
	--(A.N_ID) AS N_ID,      
	--A.S_BU,A.N_SEQ_TYPE,S_SEQ_TYPE ,A.S_INV_LEVEL,A.S_FIN_ID,D_START_DATE,D_END_DATE,S_ENTRY_TYPE      
	--INTO #TEMP_FIN_LEVEL      
	--from      
	--#TEMP_PS_UPDATE A,      
	--#TEMP_LAST_NUMB_SEED B,      
	--dbo.M_RT_PS_REFERENCE_SEQUENCE C      
	--where B.S_BUSINESS_UNIT=A.S_BU      
	--and A.N_SEQ_TYPE=C.N_ID      
	--AND B.S_INV_TYPE=C.S_SEQ_TYPE      
	--AND S_INV_LEVEL='Fin ID'      
	----AND S_FIN_ID='03841'      
	--AND S_ENTRY_TYPE IN ('BILLING SHEET','ACCRUAL SHEET','DISCOUNT PROVISION','ADVANCE BILLING')      
	--GROUP BY A.S_INV_LEVEL,A.S_FIN_ID,D_START_DATE,D_END_DATE,S_ENTRY_TYPE,A.S_BU,A.N_SEQ_TYPE,C.S_SEQ_TYPE,A.N_ID      
	CREATE TABLE #TEMP_FIN_LEVEL (
		N_LATEST_NUM INT
		,N_ID INT
		,S_BU VARCHAR(10)
		,N_SEQ_TYPE INT
		,S_SEQ_TYPE VARCHAR(50)
		,S_INV_LEVEL VARCHAR(10)
		,S_FIN_ID INT
		,D_START_DATE DATE
		,D_END_DATE DATE
		,S_ENTRY_TYPE VARCHAR(100)
		,N_SOW_ID INT
		,D_INVOICE_DATE DATE
		,S_CUST_ID VARCHAR(50)
		)

	CREATE TABLE #TEMP_FIN_LEVEL_DIFF (
		N_LATEST_NUM INT
		,N_ID INT
		,S_BU VARCHAR(10)
		,N_SEQ_TYPE INT
		,S_SEQ_TYPE VARCHAR(50)
		,S_INV_LEVEL VARCHAR(10)
		,S_FIN_ID INT
		,D_START_DATE DATE
		,D_END_DATE DATE
		,S_ENTRY_TYPE VARCHAR(100)
		)

	---------------------------------------------------------------------------------------------------------------- 
	------- To delete all BPS revenue where there is a corresponding billing sheet available ------------------------
	------- To generate PS Number for BPS revenue where the billing sheet belongs to only BPF Revenue ------------------------
	DELETE
	FROM #TEMP_PS_UPDATE
	WHERE S_ENTRY_TYPE = 'BPS REVENUE'
		AND S_FIN_ID IN (
			SELECT DISTINCT S_FIN_ID
			FROM #TEMP_PS_UPDATE
			WHERE S_ENTRY_TYPE = 'BILLING SHEET'
			)
		AND S_INV_LEVEL = 'Fin ID'

	DELETE
	FROM #TEMP_PS_UPDATE
	WHERE S_ENTRY_TYPE = 'BPS REVENUE'
		AND N_PROJ_INVOICE_ID IN (
			SELECT DISTINCT N_PROJ_INVOICE_ID
			FROM #TEMP_PS_UPDATE
			WHERE S_ENTRY_TYPE = 'BILLING SHEET'
			)
		AND S_INV_LEVEL != 'Fin ID'

	-----------------------------------------------------------------------------------------------------------------     
	-- select * from #TEMP_BILLED_NUM      
	IF EXISTS (
			SELECT *
			FROM #TEMP_PS_UPDATE
			WHERE (
					S_VERSION_TYPE = 'CURRENT'
					AND S_GENERATION_TYPE = 'ACCRUAL'
					)
			)
		--OR (S_VERSION_TYPE ='PREVIOUS' AND S_SEQUENCE_TYPE='INVOICE')      
		--   OR (S_VERSION_TYPE ='PREVIOUS' AND S_SEQUENCE_TYPE='UNBILLED REVERSAL'))      
	BEGIN
		PRINT 'ACCRUAL'

		-- SELECT * FROM M_RT_PS_FINANCE_UPLOAD WHERE S_FIN_ID='04788'      
		SELECT DISTINCT A.S_CUST_ID
			,A.N_PS_UPLOAD_NUMBER
			,A.S_VERSION_TYPE
			,A.S_SEQUENCE_TYPE
			,A.S_ENTRY_TYPE --,A.N_MONTH,A.N_YEAR      
		INTO #TEMP_NUMBER_GEN_CUSTOMERS
		FROM M_RT_PS_FINANCE_UPLOAD A
			,#TEMP_PS_UPDATE B
		WHERE --A.N_ID = B.N_ID AND      
			A.S_CUST_ID = B.S_CUST_ID
			AND A.S_VERSION_TYPE = 'CURRENT'
			AND A.S_GENERATION_TYPE = 'ACCRUAL'
			-- AND B.N_MONTH=@N_MONTH AND B.N_YEAR=@N_YEAR      
			AND A.N_PS_UPLOAD_NUMBER != '0'

		IF EXISTS (
				SELECT *
				FROM #TEMP_NUMBER_GEN_CUSTOMERS
				)
		BEGIN
			UPDATE B
			SET B.N_PS_UPLOAD_NUMBER = A.N_PS_UPLOAD_NUMBER
				,B.N_GENERATION_STATUS = 2
			FROM #TEMP_NUMBER_GEN_CUSTOMERS A
				,#TEMP_PS_UPDATE B
			WHERE A.S_CUST_ID = B.S_CUST_ID
				AND A.S_VERSION_TYPE = B.S_VERSION_TYPE
				AND A.S_SEQUENCE_TYPE = B.S_SEQUENCE_TYPE
				--AND A.S_ENTRY_TYPE = B.S_ENTRY_TYPE      
				-- AND A.N_MONTH=B.N_MONTH      
				-- AND A.N_YEAR=B.N_YEAR      
				AND B.N_PS_UPLOAD_NUMBER = '0'
				AND N_GENERATION_STATUS IN (
					1
					,2
					)
		END

		--UPDATE A SET A.N_PS_UPLOAD_NUMBER=B.N_PS_UPLOAD_NUMBER      
		--FROM M_RT_PS_FINANCE_UPLOAD A, #TEMP_NUMBER_GEN_CUSTOMERS B      
		--, #TEMP_PS_UPDATE C      
		--WHERE A.S_CUST_ID=B.S_CUST_ID      
		--AND A.S_FIN_ID=C.S_FIN_ID --AND A.N_ID = C.N_ID      
		--AND A.S_VERSION_TYPE=C.S_VERSION_TYPE AND A.S_SEQUENCE_TYPE=C.S_SEQUENCE_TYPE      
		--AND A.S_VERSION_TYPE ='CURRENT' AND A.S_SEQUENCE_TYPE='ACCRUAL'      
		--AND A.N_MONTH=@N_MONTH AND A.N_YEAR=@N_YEAR      
		--AND A.N_PS_UPLOAD_NUMBER ='0'      
		--SELECT * FROM M_RT_PS_FINANCE_UPLOAD WHERE S_FIN_ID='04788'      
		--SELECT * FROM #TEMP_NUMBER_GEN_CUSTOMERS      
		--SELECT * FROM #TEMP_PS_UPDATE WHERE S_CUST_ID NOT IN (SELECT S_CUST_ID FROM #TEMP_NUMBER_GEN_CUSTOMERS)      
		IF EXISTS (
				SELECT *
				FROM #TEMP_PS_UPDATE
				WHERE N_PS_UPLOAD_NUMBER = '0'
				) --S_CUST_ID NOT IN (SELECT S_CUST_ID FROM #TEMP_NUMBER_GEN_CUSTOMERS))      
		BEGIN
			PRINT 'YES'

			DELETE
			FROM #TEMP_LAST_NUMB_SEED

			INSERT INTO #TEMP_LAST_NUMB_SEED
			SELECT MAX(N_PS_NUMB_SEED) AS N_LATEST_NUM
				,S_BUSINESS_UNIT
				,S_INV_TYPE
			--INTO #TEMP_LAST_NUMB_SEED      
			FROM dbo.M_RT_PS_NUMBER_SEED
			WHERE N_MONTH = @N_MONTH
				AND N_YEAR = @N_YEAR
			GROUP BY S_BUSINESS_UNIT
				,S_INV_TYPE

			INSERT INTO #TEMP_BILLED_NUM
			--SELECT  (ROW_NUMBER() OVER(PARTITION BY S_BU, A.N_SEQ_TYPE ORDER BY [S_BU]) + N_LATEST_NUM) AS N_LATEST_NUM,      
			--SELECT (DENSE_RANK() OVER(PARTITION BY S_BU, A.N_SEQ_TYPE ORDER BY [S_BU],A.S_FIN_ID) + MAX(N_LATEST_NUM)) AS N_LATEST_NUM,      
			SELECT
				/*RITM0099709 || Single invoice no for GBP and USD in PS upload – by Jamal Mytheen on 28-Oct-2020 – Start */
				CASE 
					WHEN S_INV_LEVEL IN (
							'SOW'
							,'PO'
							)
						THEN (
								DENSE_RANK() OVER (
									PARTITION BY S_BU
									,A.N_SEQ_TYPE ORDER BY N_SOW_ID
										,[S_BU]
										,D_START_DATE
										,D_END_DATE
										,A.S_FIN_ID
										,D_INVOICE_DATE
										,S_CUST_ID
										,S_CURRENCY
									) + MAX(N_LATEST_NUM)
								)
					ELSE (
							DENSE_RANK() OVER (
								PARTITION BY S_BU
								,A.N_SEQ_TYPE ORDER BY [S_BU]
									,D_START_DATE
									,D_END_DATE
									,A.S_FIN_ID
									,D_INVOICE_DATE
									,S_CUST_ID
									,S_CURRENCY
								) + MAX(N_LATEST_NUM)
							)
					END AS N_LATEST_NUM
				,
				--(DENSE_RANK() OVER(PARTITION BY S_BU, A.N_SEQ_TYPE ORDER BY [S_BU],S_CUST_ID) + MAX(N_LATEST_NUM)) AS N_LATEST_NUM,      
				/*RITM0099709 || Single invoice no for GBP and USD in PS upload – by Jamal Mytheen on 28-Oct-2020 – End */
				A.N_ID
				,A.S_BU
				,A.N_SEQ_TYPE
				,S_SEQ_TYPE
				,A.S_INV_LEVEL
				,A.S_FIN_ID
				,D_START_DATE
				,D_END_DATE
				,S_ENTRY_TYPE
				,N_SOW_ID
				,D_INVOICE_DATE
				,S_CUST_ID
				,S_CURRENCY
			--INTO #TEMP_BILLED_NUM      
			FROM #TEMP_PS_UPDATE A
				,#TEMP_LAST_NUMB_SEED B
				,dbo.M_RT_PS_REFERENCE_SEQUENCE C
			WHERE B.S_BUSINESS_UNIT = A.S_BU
				--and A.S_SEQUENCE_TYPE = B.S_INV_TYPE      
				AND A.N_SEQ_TYPE = C.N_ID
				AND B.S_INV_TYPE = C.S_SEQ_TYPE
			--AND A.S_CUST_ID NOT IN (SELECT S_CUST_ID FROM #TEMP_NUMBER_GEN_CUSTOMERS)      
			--AND S_INV_LEVEL IN ('Fin ID')      
			--and S_ENTRY_TYPE != 'DISCOUNT'      
			GROUP BY A.N_ID
				,A.S_BU
				,A.N_SEQ_TYPE
				,S_SEQ_TYPE
				,A.S_INV_LEVEL
				,A.S_FIN_ID
				,D_START_DATE
				,D_END_DATE
				,S_ENTRY_TYPE
				,N_SOW_ID
				,D_INVOICE_DATE
				,S_CUST_ID
				,S_CURRENCY

			INSERT INTO #TEMP_SEED_UPDATE
			SELECT MAX(N_LATEST_NUM) AS INC_VAL
				,S_BU
				,N_SEQ_TYPE
				,S_SEQ_TYPE
			--INTO #TEMP_SEED_UPDATE      
			FROM #TEMP_BILLED_NUM
			GROUP BY S_BU
				,N_SEQ_TYPE
				,S_SEQ_TYPE

			UPDATE dbo.M_RT_PS_NUMBER_SEED
			SET N_PS_NUMB_SEED = INC_VAL
			FROM dbo.M_RT_PS_NUMBER_SEED A
				,#TEMP_SEED_UPDATE B
			WHERE A.S_BUSINESS_UNIT = B.S_BU
				AND A.S_INV_TYPE = B.S_SEQ_TYPE
				AND N_MONTH = @N_MONTH
				AND N_YEAR = @N_YEAR

			DELETE
			FROM #TEMP_SEED_UPDATE
				--RAISERROR (15600,-1,-1, 'SELECT * from #TEMP_PS_UPDATE');      
		END
	END

	IF EXISTS (
			SELECT *
			FROM #TEMP_PS_UPDATE
			WHERE (
					S_VERSION_TYPE = 'CURRENT'
					AND S_GENERATION_TYPE = 'INVOICE'
					)
			)
		--OR (S_VERSION_TYPE ='PREVIOUS' AND S_SEQUENCE_TYPE='INVOICE')      
		--OR (S_VERSION_TYPE ='PREVIOUS' AND S_SEQUENCE_TYPE='UNBILLED REVERSAL'))      
	BEGIN
		PRINT 'INVOICE'

		IF EXISTS (
				SELECT *
				FROM #TEMP_PS_UPDATE
				WHERE S_INV_LEVEL IN (
						'SOW'
						,'PO'
						)
					AND S_ENTRY_TYPE IN (
						'BILLING SHEET'
						,'BPS REVENUE'
						,'ONE TIME ENTRY'
						,'SOFTWARE EXPENSES (OTE)'
						,'DISCOUNT PROVISION'
						,'DISCOUNT PROVISION REVERSAL'
						,'ADVANCE BILLING'
						,'ADVANCE BILLING REVERSAL'
						,'THIRD PARTY SERVICES'
						,'THIRD PARTY SERVICES REVERSAL'
						)
				)
		BEGIN
			PRINT 'SOW LEVEL'

			DELETE
			FROM #TEMP_LAST_NUMB_SEED

			INSERT INTO #TEMP_LAST_NUMB_SEED
			SELECT MAX(N_PS_NUMB_SEED) AS N_LATEST_NUM
				,S_BUSINESS_UNIT
				,S_INV_TYPE
			--INTO #TEMP_LAST_NUMB_SEED      
			FROM dbo.M_RT_PS_NUMBER_SEED
			WHERE N_MONTH = @N_MONTH
				AND N_YEAR = @N_YEAR
			GROUP BY S_BUSINESS_UNIT
				,S_INV_TYPE

			INSERT INTO #TEMP_BILLED_NUM
			SELECT (
					ROW_NUMBER() OVER (
						PARTITION BY S_BU
						,A.N_SEQ_TYPE ORDER BY [S_BU]
						) + N_LATEST_NUM
					) AS N_LATEST_NUM
				,A.N_ID
				,A.S_BU
				,A.N_SEQ_TYPE
				,S_SEQ_TYPE
				,A.S_INV_LEVEL
				,A.S_FIN_ID
				,D_START_DATE
				,D_END_DATE
				,S_ENTRY_TYPE
				,N_SOW_ID
				,D_INVOICE_DATE
				,S_CUST_ID
				,S_CURRENCY
			--INTO #TEMP_BILLED_NUM      
			FROM #TEMP_PS_UPDATE A
				,#TEMP_LAST_NUMB_SEED B
				,dbo.M_RT_PS_REFERENCE_SEQUENCE C
			WHERE B.S_BUSINESS_UNIT = A.S_BU
				AND A.N_SEQ_TYPE = C.N_ID
				AND B.S_INV_TYPE = C.S_SEQ_TYPE
				AND S_INV_LEVEL IN (
					'SOW'
					,'PO'
					)
				AND S_ENTRY_TYPE IN (
					'BILLING SHEET'
					,'BPS REVENUE'
					,'ONE TIME ENTRY'
					,'SOFTWARE EXPENSES (OTE)'
					,'DISCOUNT PROVISION'
					,'DISCOUNT PROVISION REVERSAL'
					,'ADVANCE BILLING'
					,'ADVANCE BILLING REVERSAL'
					,'THIRD PARTY SERVICES'
					,'THIRD PARTY SERVICES REVERSAL'
					)

			INSERT INTO #TEMP_SEED_UPDATE
			SELECT MAX(N_LATEST_NUM) AS INC_VAL
				,S_BU
				,N_SEQ_TYPE
				,S_SEQ_TYPE
			--INTO #TEMP_SEED_UPDATE      
			FROM #TEMP_BILLED_NUM
			GROUP BY S_BU
				,N_SEQ_TYPE
				,S_SEQ_TYPE

			UPDATE dbo.M_RT_PS_NUMBER_SEED
			SET N_PS_NUMB_SEED = INC_VAL
			FROM dbo.M_RT_PS_NUMBER_SEED A
				,#TEMP_SEED_UPDATE B
			WHERE A.S_BUSINESS_UNIT = B.S_BU
				AND A.S_INV_TYPE = B.S_SEQ_TYPE
				AND N_MONTH = @N_MONTH
				AND N_YEAR = @N_YEAR

			DELETE
			FROM #TEMP_SEED_UPDATE
		END

		IF EXISTS (
				SELECT *
				FROM #TEMP_PS_UPDATE
				WHERE S_INV_LEVEL IN ('Fin ID')
					AND S_ENTRY_TYPE IN (
						'BILLING SHEET'
						,'BPS REVENUE'
						,'ONE TIME ENTRY'
						,'SOFTWARE EXPENSES (OTE)'
						,'DISCOUNT PROVISION'
						,'DISCOUNT PROVISION REVERSAL'
						,'ADVANCE BILLING'
						,'ADVANCE BILLING REVERSAL'
						,'THIRD PARTY SERVICES'
						,'THIRD PARTY SERVICES REVERSAL'
						)
				)
		BEGIN
			PRINT 'FIN 2'

			IF EXISTS (
					SELECT S_BU
						,N_SEQ_TYPE
						,S_INV_LEVEL
						,S_FIN_ID
						,D_START_DATE
						,D_END_DATE
						,S_ENTRY_TYPE
						,N_SOW_ID
						,COUNT(*) SOW_COUNT
					FROM #TEMP_PS_UPDATE
					WHERE S_INV_LEVEL IN ('Fin ID')
						AND S_ENTRY_TYPE IN (
							'BILLING SHEET'
							,'BPS REVENUE'
							,'ONE TIME ENTRY'
							,'SOFTWARE EXPENSES (OTE)'
							,'DISCOUNT PROVISION'
							,'DISCOUNT PROVISION REVERSAL'
							,'ADVANCE BILLING'
							,'ADVANCE BILLING REVERSAL'
							,'THIRD PARTY SERVICES'
							,'THIRD PARTY SERVICES REVERSAL'
							)
					GROUP BY S_BU
						,N_SEQ_TYPE
						,S_INV_LEVEL
						,S_FIN_ID
						,D_START_DATE
						,D_END_DATE
						,S_ENTRY_TYPE
						,N_SOW_ID
					HAVING COUNT(*) >= 1
					)
			BEGIN
				PRINT 'TEST FIN ID LEVEL'

				DECLARE @CR_N_SOW_ID_FIN INT

				DECLARE CR CURSOR READ_ONLY
				FOR
				SELECT N_SOW_ID
				FROM (
					SELECT S_BU
						,N_SEQ_TYPE
						,S_INV_LEVEL
						,S_FIN_ID
						,D_START_DATE
						,D_END_DATE
						,S_ENTRY_TYPE
						,N_SOW_ID
						,S_CUST_ID
						,S_CURRENCY
						,COUNT(*) SOW_COUNT
					FROM #TEMP_PS_UPDATE
					WHERE S_INV_LEVEL IN ('Fin ID')
						AND S_ENTRY_TYPE IN (
							'BILLING SHEET'
							,'BPS REVENUE'
							,'ONE TIME ENTRY'
							,'SOFTWARE EXPENSES (OTE)'
							,'DISCOUNT PROVISION'
							,'DISCOUNT PROVISION REVERSAL'
							,'ADVANCE BILLING'
							,'ADVANCE BILLING REVERSAL'
							,'THIRD PARTY SERVICES'
							,'THIRD PARTY SERVICES REVERSAL'
							)
					GROUP BY S_BU
						,N_SEQ_TYPE
						,S_INV_LEVEL
						,S_FIN_ID
						,D_START_DATE
						,D_END_DATE
						,S_ENTRY_TYPE
						,N_SOW_ID
						,S_CUST_ID
						,S_CURRENCY
					HAVING COUNT(*) >= 1
					) T

				OPEN CR

				FETCH NEXT
				FROM CR
				INTO @CR_N_SOW_ID_FIN

				WHILE @@FETCH_STATUS = 0
				BEGIN
					DELETE
					FROM #TEMP_LAST_NUMB_SEED

					INSERT INTO #TEMP_LAST_NUMB_SEED
					SELECT MAX(N_PS_NUMB_SEED) AS N_LATEST_NUM
						,S_BUSINESS_UNIT
						,S_INV_TYPE
					--INTO #TEMP_LAST_NUMB_SEED      
					FROM dbo.M_RT_PS_NUMBER_SEED
					WHERE N_MONTH = @N_MONTH
						AND N_YEAR = @N_YEAR
					GROUP BY S_BUSINESS_UNIT
						,S_INV_TYPE

					INSERT INTO #TEMP_BILLED_NUM
					--SELECT  (ROW_NUMBER() OVER(PARTITION BY S_BU, A.N_SEQ_TYPE ORDER BY [S_BU]) + N_LATEST_NUM) AS N_LATEST_NUM,      
					--SELECT (DENSE_RANK() OVER(PARTITION BY S_BU, A.N_SEQ_TYPE ORDER BY [S_BU],A.S_FIN_ID) + MAX(N_LATEST_NUM)) AS N_LATEST_NUM,      
					SELECT (
							DENSE_RANK() OVER (
								PARTITION BY S_BU
								,A.N_SEQ_TYPE ORDER BY [S_BU]
									,D_START_DATE
									,D_END_DATE
									,A.S_FIN_ID
									,D_INVOICE_DATE
									,S_CUST_ID
									,S_CURRENCY
								) + MAX(N_LATEST_NUM)
							) AS N_LATEST_NUM
						,A.N_ID
						,A.S_BU
						,A.N_SEQ_TYPE
						,S_SEQ_TYPE
						,A.S_INV_LEVEL
						,A.S_FIN_ID
						,D_START_DATE
						,D_END_DATE
						,S_ENTRY_TYPE
						,N_SOW_ID
						,D_INVOICE_DATE
						,S_CUST_ID
						,S_CURRENCY
					--INTO #TEMP_BILLED_NUM      
					FROM #TEMP_PS_UPDATE A
						,#TEMP_LAST_NUMB_SEED B
						,dbo.M_RT_PS_REFERENCE_SEQUENCE C
					WHERE B.S_BUSINESS_UNIT = A.S_BU
						--and A.S_SEQUENCE_TYPE = B.S_INV_TYPE      
						AND A.N_SEQ_TYPE = C.N_ID
						AND B.S_INV_TYPE = C.S_SEQ_TYPE
						AND S_INV_LEVEL IN ('Fin ID')
						AND S_ENTRY_TYPE IN (
							'BILLING SHEET'
							,'BPS REVENUE'
							,'ONE TIME ENTRY'
							,'SOFTWARE EXPENSES (OTE)'
							,'DISCOUNT PROVISION'
							,'DISCOUNT PROVISION REVERSAL'
							,'ADVANCE BILLING'
							,'ADVANCE BILLING REVERSAL'
							,'THIRD PARTY SERVICES'
							,'THIRD PARTY SERVICES REVERSAL'
							)
					GROUP BY A.N_ID
						,A.S_BU
						,A.N_SEQ_TYPE
						,S_SEQ_TYPE
						,A.S_INV_LEVEL
						,A.S_FIN_ID
						,D_START_DATE
						,D_END_DATE
						,S_ENTRY_TYPE
						,N_SOW_ID
						,D_INVOICE_DATE
						,S_CUST_ID
						,S_CURRENCY

					FETCH NEXT
					FROM CR
					INTO @CR_N_SOW_ID_FIN
				END

				CLOSE CR

				DEALLOCATE CR
			END

			PRINT 'OUTSIDE EXISTS'

			INSERT INTO #TEMP_SEED_UPDATE
			SELECT MAX(N_LATEST_NUM) AS INC_VAL
				,S_BU
				,N_SEQ_TYPE
				,S_SEQ_TYPE
			--INTO #TEMP_SEED_UPDATE      
			FROM #TEMP_BILLED_NUM
			GROUP BY S_BU
				,N_SEQ_TYPE
				,S_SEQ_TYPE

			UPDATE dbo.M_RT_PS_NUMBER_SEED
			SET N_PS_NUMB_SEED = INC_VAL
			FROM dbo.M_RT_PS_NUMBER_SEED A
				,#TEMP_SEED_UPDATE B
			WHERE A.S_BUSINESS_UNIT = B.S_BU
				AND A.S_INV_TYPE = B.S_SEQ_TYPE
				AND N_MONTH = @N_MONTH
				AND N_YEAR = @N_YEAR

			DELETE
			FROM #TEMP_SEED_UPDATE
		END

		IF EXISTS (
				SELECT *
				FROM #TEMP_PS_UPDATE
				WHERE S_INV_LEVEL IN ('BILLING CENTER')
					AND S_ENTRY_TYPE IN (
						'BILLING SHEET'
						,'BPS REVENUE'
						,'ONE TIME ENTRY'
						,'SOFTWARE EXPENSES (OTE)'
						,'DISCOUNT PROVISION'
						,'DISCOUNT PROVISION REVERSAL'
						,'ADVANCE BILLING'
						,'ADVANCE BILLING REVERSAL'
						,'THIRD PARTY SERVICES'
						,'THIRD PARTY SERVICES REVERSAL'
						)
				)
		BEGIN
			IF EXISTS (
					SELECT S_BU
						,N_SEQ_TYPE
						,S_INV_LEVEL
						,S_FIN_ID
						,D_START_DATE
						,D_END_DATE
						,S_ENTRY_TYPE
						,N_SOW_ID
						,COUNT(*) SOW_COUNT
					FROM #TEMP_PS_UPDATE
					WHERE S_INV_LEVEL IN ('BILLING CENTER')
						AND S_ENTRY_TYPE IN (
							'BILLING SHEET'
							,'BPS REVENUE'
							,'ONE TIME ENTRY'
							,'SOFTWARE EXPENSES (OTE)'
							,'DISCOUNT PROVISION'
							,'DISCOUNT PROVISION REVERSAL'
							,'ADVANCE BILLING'
							,'ADVANCE BILLING REVERSAL'
							,'THIRD PARTY SERVICES'
							,'THIRD PARTY SERVICES REVERSAL'
							)
					GROUP BY S_BU
						,N_SEQ_TYPE
						,S_INV_LEVEL
						,S_FIN_ID
						,D_START_DATE
						,D_END_DATE
						,S_ENTRY_TYPE
						,N_SOW_ID
					HAVING COUNT(*) >= 1
					)
			BEGIN
				PRINT 'TEST BILLING CENTER LEVEL'

				DECLARE @CR_N_SOW_ID_BC INT

				DECLARE CR CURSOR READ_ONLY
				FOR
				SELECT N_SOW_ID
				FROM (
					SELECT S_BU
						,N_SEQ_TYPE
						,S_INV_LEVEL
						,S_FIN_ID
						,D_START_DATE
						,D_END_DATE
						,S_ENTRY_TYPE
						,N_SOW_ID
						,COUNT(*) SOW_COUNT
					FROM #TEMP_PS_UPDATE
					WHERE S_INV_LEVEL IN ('BILLING CENTER')
						AND S_ENTRY_TYPE IN (
							'BILLING SHEET'
							,'BPS REVENUE'
							,'ONE TIME ENTRY'
							,'SOFTWARE EXPENSES (OTE)'
							,'DISCOUNT PROVISION'
							,'DISCOUNT PROVISION REVERSAL'
							,'ADVANCE BILLING'
							,'ADVANCE BILLING REVERSAL'
							,'THIRD PARTY SERVICES'
							,'THIRD PARTY SERVICES REVERSAL'
							)
					GROUP BY S_BU
						,N_SEQ_TYPE
						,S_INV_LEVEL
						,S_FIN_ID
						,D_START_DATE
						,D_END_DATE
						,S_ENTRY_TYPE
						,N_SOW_ID
					HAVING COUNT(*) >= 1
					) T

				OPEN CR

				FETCH NEXT
				FROM CR
				INTO @CR_N_SOW_ID_BC

				WHILE @@FETCH_STATUS = 0
				BEGIN
					DELETE
					FROM #TEMP_LAST_NUMB_SEED

					INSERT INTO #TEMP_LAST_NUMB_SEED
					SELECT MAX(N_PS_NUMB_SEED) AS N_LATEST_NUM
						,S_BUSINESS_UNIT
						,S_INV_TYPE
					--INTO #TEMP_LAST_NUMB_SEED      
					FROM dbo.M_RT_PS_NUMBER_SEED
					WHERE N_MONTH = @N_MONTH
						AND N_YEAR = @N_YEAR
					GROUP BY S_BUSINESS_UNIT
						,S_INV_TYPE

					INSERT INTO #TEMP_BILLED_NUM
					SELECT (
							ROW_NUMBER() OVER (
								PARTITION BY S_BU
								,A.N_SEQ_TYPE ORDER BY N_COST_CENTER_ID
								) + N_LATEST_NUM
							) AS N_LATEST_NUM
						,
						--SELECT (DENSE_RANK() OVER(PARTITION BY S_BU, A.N_SEQ_TYPE ORDER BY [S_BU],D_START_DATE,D_END_DATE,N_COST_CENTER_ID) + MAX(N_LATEST_NUM)) AS N_LATEST_NUM,      
						A.N_ID
						,A.S_BU
						,A.N_SEQ_TYPE
						,S_SEQ_TYPE
						,A.S_INV_LEVEL
						,A.S_FIN_ID
						,D_START_DATE
						,D_END_DATE
						,S_ENTRY_TYPE
						,N_SOW_ID
						,D_INVOICE_DATE
						,S_CUST_ID
						,S_CURRENCY
					--INTO #TEMP_BILLED_NUM      
					FROM #TEMP_PS_UPDATE A
						,#TEMP_LAST_NUMB_SEED B
						,dbo.M_RT_PS_REFERENCE_SEQUENCE C
					WHERE B.S_BUSINESS_UNIT = A.S_BU
						--and A.S_SEQUENCE_TYPE = B.S_INV_TYPE      
						AND A.N_SEQ_TYPE = C.N_ID
						AND B.S_INV_TYPE = C.S_SEQ_TYPE
						AND S_INV_LEVEL IN ('BILLING CENTER')
						AND S_ENTRY_TYPE IN (
							'BILLING SHEET'
							,'ONE TIME ENTRY'
							,'SOFTWARE EXPENSES (OTE)'
							,'DISCOUNT PROVISION'
							,'DISCOUNT PROVISION REVERSAL'
							,'ADVANCE BILLING'
							,'ADVANCE BILLING REVERSAL'
							,'THIRD PARTY SERVICES'
							,'THIRD PARTY SERVICES REVERSAL'
							)

					--GROUP BY A.N_ID,A.S_BU,A.N_SEQ_TYPE,S_SEQ_TYPE,A.S_INV_LEVEL,A.S_FIN_ID,D_START_DATE,D_END_DATE,S_ENTRY_TYPE ,N_SOW_ID,N_COST_CENTER_ID,D_INVOICE_DATE,S_CUST_ID      
					FETCH NEXT
					FROM CR
					INTO @CR_N_SOW_ID_BC
				END

				CLOSE CR

				DEALLOCATE CR
			END

			INSERT INTO #TEMP_SEED_UPDATE
			SELECT MAX(N_LATEST_NUM) AS INC_VAL
				,S_BU
				,N_SEQ_TYPE
				,S_SEQ_TYPE
			--INTO #TEMP_SEED_UPDATE      
			FROM #TEMP_BILLED_NUM
			GROUP BY S_BU
				,N_SEQ_TYPE
				,S_SEQ_TYPE

			UPDATE dbo.M_RT_PS_NUMBER_SEED
			SET N_PS_NUMB_SEED = INC_VAL
			FROM dbo.M_RT_PS_NUMBER_SEED A
				,#TEMP_SEED_UPDATE B
			WHERE A.S_BUSINESS_UNIT = B.S_BU
				AND A.S_INV_TYPE = B.S_SEQ_TYPE
				AND N_MONTH = @N_MONTH
				AND N_YEAR = @N_YEAR

			DELETE
			FROM #TEMP_SEED_UPDATE
		END
				--IF EXISTS (SELECT * FROM #TEMP_PS_UPDATE WHERE  S_INV_LEVEL IN ('Fin ID with BC') and S_ENTRY_TYPE in('BILLING SHEET','ONE TIME ENTRY','DISCOUNT PROVISION'))      
				--BEGIN      
				--  DELETE FROM #TEMP_LAST_NUMB_SEED      
				--  INSERT INTO #TEMP_LAST_NUMB_SEED      
				--  select MAX(N_PS_NUMB_SEED) AS N_LATEST_NUM,S_BUSINESS_UNIT,S_INV_TYPE      
				--  --INTO #TEMP_LAST_NUMB_SEED      
				--  FROM dbo.M_RT_PS_NUMBER_SEED WHERE N_MONTH = @N_MONTH and N_YEAR=@N_YEAR      
				--  GROUP BY S_BUSINESS_UNIT,S_INV_TYPE      
				--  INSERT INTO #TEMP_BILLED_NUM      
				--  --SELECT  (ROW_NUMBER() OVER(PARTITION BY S_BU, A.N_SEQ_TYPE ORDER BY [S_BU]) + N_LATEST_NUM) AS N_LATEST_NUM,      
				--  --SELECT (DENSE_RANK() OVER(PARTITION BY S_BU, A.N_SEQ_TYPE ORDER BY [S_BU],A.S_FIN_ID) + MAX(N_LATEST_NUM)) AS N_LATEST_NUM,      
				--  SELECT (DENSE_RANK() OVER(PARTITION BY S_BU, A.N_SEQ_TYPE ORDER BY [S_BU],D_START_DATE,D_END_DATE,A.S_FIN_ID) + MAX(N_LATEST_NUM)) AS N_LATEST_NUM,      
				--  A.N_ID,      
				--  A.S_BU,A.N_SEQ_TYPE,S_SEQ_TYPE,A.S_INV_LEVEL,A.S_FIN_ID,D_START_DATE,D_END_DATE,S_ENTRY_TYPE,N_SOW_ID,D_INVOICE_DATE,S_CUST_ID      
				--  --INTO #TEMP_BILLED_NUM      
				--  from      
				--  #TEMP_PS_UPDATE A,      
				--  #TEMP_LAST_NUMB_SEED B,      
				--  dbo.M_RT_PS_REFERENCE_SEQUENCE C      
				--  where B.S_BUSINESS_UNIT=A.S_BU      
				--  and A.N_SEQ_TYPE=C.N_ID      
				--  AND B.S_INV_TYPE=C.S_SEQ_TYPE      
				--  AND S_INV_LEVEL IN ('Fin ID with BC')      
				--  and S_ENTRY_TYPE in('BILLING SHEET','ONE TIME ENTRY','DISCOUNT PROVISION')      
				--  GROUP BY A.N_ID,A.S_BU,A.N_SEQ_TYPE,S_SEQ_TYPE,A.S_INV_LEVEL,A.S_FIN_ID,D_START_DATE,D_END_DATE,S_ENTRY_TYPE ,N_SOW_ID,N_COST_CENTER_ID,D_INVOICE_DATE,S_CUST_ID      
				--  INSERT INTO #TEMP_SEED_UPDATE      
				--  SELECT MAX(N_LATEST_NUM) AS INC_VAL,S_BU,N_SEQ_TYPE,S_SEQ_TYPE      
				--  --INTO #TEMP_SEED_UPDATE      
				--  FROM #TEMP_BILLED_NUM      
				--  GROUP BY S_BU,N_SEQ_TYPE,S_SEQ_TYPE      
				--  UPDATE dbo.M_RT_PS_NUMBER_SEED SET      
				--  N_PS_NUMB_SEED=INC_VAL      
				--  FROM      
				--  dbo.M_RT_PS_NUMBER_SEED A,      
				--  #TEMP_SEED_UPDATE B      
				--  WHERE      
				--  A.S_BUSINESS_UNIT=B.S_BU      
				--  AND A.S_INV_TYPE=B.S_SEQ_TYPE      
				--  AND N_MONTH=@N_MONTH AND N_YEAR=@N_YEAR      
				--  DELETE FROM #TEMP_SEED_UPDATE      
				--END      
	END

	UPDATE #TEMP_PS_UPDATE
	SET S_CREATED_USER_ID = @S_USER_ID
		,N_PS_UPLOAD_NUMBER = CASE 
			WHEN B.N_SEQ_TYPE = 1
				THEN 'R' + Right(YEAR(A.D_INVOICE_DATE), 2) + FORMAT(MONTH(A.D_INVOICE_DATE), '0#') + RIGHT(A.S_BU, 3) + FORMAT(B.N_LATEST_NUM, '00#')
					--WHEN B.N_SEQ_TYPE = 3      
					--THEN 'R'+ Right(@N_YEAR,2)+FORMAT(@N_MONTH,'0#')+RIGHT(A.S_BU,3)+'G'+FORMAT(B.N_LATEST_NUM,'00#')      
			WHEN B.N_SEQ_TYPE = 2
				THEN 'R' + Right(YEAR(A.D_INVOICE_DATE), 2) + RIGHT(A.S_BU, 3) + 'U' + FORMAT(B.N_LATEST_NUM, '000#')
			WHEN B.N_SEQ_TYPE = 4
				THEN 'R' + Right(YEAR(A.D_INVOICE_DATE), 2) + FORMAT(MONTH(A.D_INVOICE_DATE), '0#') + RIGHT(A.S_BU, 3) + 'C' + FORMAT(B.N_LATEST_NUM, '0#')
			WHEN B.N_SEQ_TYPE = 5
				THEN 'R' + Right(YEAR(A.D_INVOICE_DATE), 2) + RIGHT(A.S_BU, 3) + 'D' + FORMAT(B.N_LATEST_NUM, '000#')
			WHEN B.N_SEQ_TYPE = 6
				THEN 'R' + Right(YEAR(A.D_INVOICE_DATE), 2) + RIGHT(A.S_BU, 3) + 'D' + FORMAT(B.N_LATEST_NUM, '000#')
			WHEN B.N_SEQ_TYPE = 7
				THEN 'R' + Right(YEAR(A.D_INVOICE_DATE), 2) + RIGHT(A.S_BU, 3) + 'R' + FORMAT(B.N_LATEST_NUM, '000#')
			WHEN B.N_SEQ_TYPE = 8
				THEN 'R' + Right(YEAR(A.D_INVOICE_DATE), 2) + RIGHT(A.S_BU, 3) + 'A' + FORMAT(B.N_LATEST_NUM, '000#')
			WHEN B.N_SEQ_TYPE = 9
				THEN 'R' + Right(YEAR(A.D_INVOICE_DATE), 2) + RIGHT(A.S_BU, 3) + 'A' + FORMAT(B.N_LATEST_NUM, '000#')
			END
	FROM #TEMP_PS_UPDATE A
		,#TEMP_BILLED_NUM B
	WHERE A.N_ID = B.N_ID

	--UPDATE #TEMP_PS_UPDATE      
	--SET S_CREATED_USER_ID = @S_USER_ID,      
	--N_PS_UPLOAD_NUMBER=      
	--CASE WHEN B.N_SEQ_TYPE =1      
	--THEN 'R'+ Right(@N_YEAR,2)+FORMAT(@N_MONTH,'0#')+RIGHT(A.S_BU,3)+FORMAT(B.N_LATEST_NUM,'000#')      
	--WHEN B.N_SEQ_TYPE = 3      
	--THEN 'R'+ Right(@N_YEAR,2)+FORMAT(@N_MONTH,'0#')+RIGHT(A.S_BU,3)+'G'+FORMAT(B.N_LATEST_NUM,'00#')      
	--WHEN B.N_SEQ_TYPE = 2      
	--THEN 'R'+ Right(@N_YEAR,2)+FORMAT(@N_MONTH,'0#')+RIGHT(A.S_BU,3)+'U'+FORMAT(B.N_LATEST_NUM,'00#')      
	--WHEN B.N_SEQ_TYPE = 4      
	--THEN 'R'+ Right(@N_YEAR,2)+FORMAT(@N_MONTH,'0#')+RIGHT(A.S_BU,3)+'CN'+FORMAT(B.N_LATEST_NUM,'0#')      
	--WHEN B.N_SEQ_TYPE = 5      
	--THEN 'R'+ Right(@N_YEAR,2)+FORMAT(@N_MONTH,'0#')+RIGHT(A.S_BU,3)+'D'+FORMAT(B.N_LATEST_NUM,'00#')      
	--WHEN B.N_SEQ_TYPE = 6      
	--THEN 'R'+ Right(@N_YEAR,2)+FORMAT(@N_MONTH,'0#')+RIGHT(A.S_BU,3)+'D'+FORMAT(B.N_LATEST_NUM,'00#')      
	--WHEN B.N_SEQ_TYPE = 7      
	--THEN 'R'+ Right(@N_YEAR,2)+FORMAT(@N_MONTH,'0#')+RIGHT(A.S_BU,3)+'R'+FORMAT(B.N_LATEST_NUM,'00#')      
	--WHEN B.N_SEQ_TYPE = 8      
	--THEN 'R'+ Right(@N_YEAR,2)+FORMAT(@N_MONTH,'0#')+RIGHT(A.S_BU,3)+'A'+FORMAT(B.N_LATEST_NUM,'00#')      
	--WHEN B.N_SEQ_TYPE = 9      
	--THEN 'R'+ Right(@N_YEAR,2)+FORMAT(@N_MONTH,'0#')+RIGHT(A.S_BU,3)+'A'+FORMAT(B.N_LATEST_NUM,'00#')      
	--END      
	--FROM #TEMP_PS_UPDATE A,      
	--#TEMP_BILLED_NUM B      
	--WHERE A.N_ID=B.N_ID      
	UPDATE A
	SET A.S_CREATED_USER_ID = B.S_CREATED_USER_ID
		,A.D_CREATED_DATE = GETDATE()
		,A.N_PS_UPLOAD_NUMBER = B.N_PS_UPLOAD_NUMBER
		,N_IS_VALID = 1
	FROM dbo.M_RT_PS_FINANCE_UPLOAD A
		,#TEMP_PS_UPDATE B
	WHERE A.N_ID = B.N_ID

	--AND A.S_INV_LEVEL =B.S_INV_LEVEL      
	--AND A.D_START_DATE=B.D_START_DATE      
	--AND A.D_END_DATE=B.D_END_DATE      
	UPDATE A
	SET A.N_GENERATION_STATUS = 2
		,D_NUMBER_GENERATION_TIME = GETDATE()
	FROM dbo.M_RT_PS_FINANCE_UPLOAD A
		,#TEMP_PS_UPDATE B
	WHERE A.N_ID = B.N_ID
		AND A.N_PS_UPLOAD_NUMBER != '0'

	----- To update  same PS number for Discount entry type ---------------------------------------------------------------------      
	--SELECT * INTO #TEMP_NUMBER FROM M_RT_PS_FINANCE_UPLOAD where N_PROJ_INVOICE_ID in (      
	--  SELECT N_PROJ_INVOICE_ID FROM M_RT_PS_FINANCE_UPLOAD      
	--  WHERE S_ENTRY_TYPE IN('PERDIEM','DISCOUNT','SERVICE CREDIT','INCENTIVES','TRAVEL','SOFTWARE EXPENSES','SHIFT ALLOWANCE') AND N_PS_UPLOAD_NUMBER='0')      
	--and S_ENTRY_TYPE='BILLING SHEET' and N_PS_UPLOAD_NUMBER !='0'      
	--UPDATE A      
	--SET A.N_PS_UPLOAD_NUMBER=B.N_PS_UPLOAD_NUMBER      
	--from M_RT_PS_FINANCE_UPLOAD A ,      
	--#TEMP_NUMBER B      
	--WHERE A.S_ENTRY_TYPE IN('PERDIEM','DISCOUNT','SERVICE CREDIT','INCENTIVES','TRAVEL','SOFTWARE EXPENSES','SHIFT ALLOWANCE')      
	--AND A.N_PROJ_INVOICE_ID=B.N_PROJ_INVOICE_ID      
	--AND A.S_SEQUENCE_TYPE_CODE=B.S_SEQUENCE_TYPE_CODE      
	--AND A.S_RT_STATUS=B.S_RT_STATUS      
	--UPDATE A SET A.N_GENERATION_STATUS=2,D_NUMBER_GENERATION_TIME=GETDATE()      
	--from M_RT_PS_FINANCE_UPLOAD A ,      
	--#TEMP_NUMBER B      
	--WHERE A.S_ENTRY_TYPE IN('PERDIEM','DISCOUNT','SERVICE CREDIT','INCENTIVES','TRAVEL','SOFTWARE EXPENSES','SHIFT ALLOWANCE')      
	--AND A.N_PROJ_INVOICE_ID=B.N_PROJ_INVOICE_ID      
	--AND A.S_SEQUENCE_TYPE_CODE=B.S_SEQUENCE_TYPE_CODE      
	--AND A.S_RT_STATUS=B.S_RT_STATUS      
	--AND A.N_PS_UPLOAD_NUMBER!='0'      
	SELECT A.*
	INTO #TEMP_NUMBER
	FROM M_RT_PS_FINANCE_UPLOAD A
		,#TEMP_PS_UPDATE B
	WHERE A.N_ID = B.N_ID
		AND A.S_FIN_ID = B.S_FIN_ID
		AND A.N_MONTH = B.N_MONTH
		AND A.N_YEAR = B.N_YEAR
		AND A.S_BU = B.S_BU
		AND A.S_ENTRY_TYPE = ('BILLING SHEET')
		AND B.N_PS_UPLOAD_NUMBER != '0'

	UPDATE A
	SET A.N_PS_UPLOAD_NUMBER = B.N_PS_UPLOAD_NUMBER
		,A.N_GENERATION_STATUS = B.N_GENERATION_STATUS
		,A.D_NUMBER_GENERATION_TIME = B.D_NUMBER_GENERATION_TIME
	FROM M_RT_PS_FINANCE_UPLOAD A
		,#TEMP_NUMBER B
	WHERE A.S_ENTRY_TYPE IN (
			'PERDIEM'
			,'DISCOUNT'
			,'SERVICE CREDIT'
			,'INCENTIVES'
			,'TRAVEL'
			,'SOFTWARE EXPENSES'
			,'SHIFT ALLOWANCE'
			,'BPS REVENUE'
			)
		AND A.N_PROJ_INVOICE_ID = B.N_PROJ_INVOICE_ID
		AND A.S_FIN_ID = B.S_FIN_ID
		AND A.N_SOW_ID = B.N_SOW_ID
		AND A.N_MONTH = B.N_MONTH
		AND A.N_YEAR = B.N_YEAR
		AND A.S_BU = B.S_BU
		AND A.S_SEQUENCE_TYPE_CODE = B.S_SEQUENCE_TYPE_CODE
		AND A.S_RT_STATUS = B.S_RT_STATUS
		AND A.D_INVOICE_DATE = B.D_INVOICE_DATE
		AND A.N_PS_UPLOAD_NUMBER = '0'

	---------------------------------------------------------------------------------------------------------------------------------      
	UPDATE A
	SET A.S_CREATED_USER_ID = B.S_CREATED_USER_ID
		,A.D_CREATED_DATE = B.D_CREATED_DATE
		,A.N_GENERATION_STATUS = B.N_GENERATION_STATUS
		,A.N_PS_UPLOAD_NUMBER = B.N_PS_UPLOAD_NUMBER
		,N_IS_VALID = 1
		,A.D_NUMBER_GENERATION_TIME = B.D_NUMBER_GENERATION_TIME
	--SELECT B.N_PS_UPLOAD_NUMBER,A.N_PS_UPLOAD_NUMBER,B.S_SEQUENCE_TYPE_CODE,A.S_SEQUENCE_TYPE_CODE      
	FROM dbo.M_RT_PS_FINANCE_UPLOAD_REPORT A
		,M_RT_PS_FINANCE_UPLOAD B
	WHERE --A.N_PROJ_INVOICE_ID=B.N_PROJ_INVOICE_ID      
		A.N_FIN_UPLOAD_ID = B.N_ID
		AND A.S_BU = B.S_BU
		AND A.S_SEQUENCE_TYPE_CODE = B.S_SEQUENCE_TYPE_CODE
		AND A.S_RT_STATUS = B.S_RT_STATUS
		AND A.D_INVOICE_DATE = B.D_INVOICE_DATE
		AND A.S_PROJ_TYPE = 'T&M'

	--AND A.S_FIN_ID='03406'      
	-- Updated below sp's Input parameter -- Hari - 23OCT2020      
	/*INCT0028021 - Hidding the below unused sp for Timeout Error in PS upload – by Jamal Mytheen on 06-Nov-2020 – Start */
	--EXEC USP_RT_PS_UPLOAD_UPDATE_REF_NUMBER @tblPsupdate   
	/*INCT0028021 - Hidding the below unused sp for Timeout Error in PS upload – by Jamal Mytheen on 06-Nov-2020 – End */
	-- To return the count of Numbers generated and Not generated -- Hari - 23OCT2020
	SELECT COUNT(CASE 
				WHEN N_PS_UPLOAD_NUMBER != '0'
					THEN 1
				END) AS NumberGenerated
		,COUNT(CASE 
				WHEN N_PS_UPLOAD_NUMBER = '0'
					THEN 1
				END) AS NotGenerated
	FROM M_RT_PS_FINANCE_UPLOAD A
	INNER JOIN #TEMP_PS_NUM B ON A.N_ID = B.N_ID

	DROP TABLE #TEMP_PS_NUM

	DROP TABLE #TEMP_PS_UPDATE
END

-------------------------------consolidation--------------------------------------------------------------------------------------

  
/* Modified by Surendiran S (43622) for Performance Issue fixes on 6 Feb 2021 */  
/* Modified by Kameswaran (28075)   
incident id: INCT0032546  
purpose :to invoice at bulk level DeltaAirlines on 24 Feb 2021   
*/  
/* Modified by Giri for INCT0033198-Invoice Consolidation for Westwood Issue Fix - Mar 2, 2021*/  
--exec USP_INSERT_UPDATE_INVOICE_CONSOLIDATION 'AIRCANADA','T&M','25991~T&M~2','21613~T&MTBOTE~2332','47777'  
--CREATE OR aLTER procedure dbo.USP_INSERT_UPDATE_INVOICE_CONSOLIDATION_CURRENCY  
  
--exec USP_INSERT_UPDATE_INVOICE_CONSOLIDATION_TEST 'IMS BGL','t&m','25370~T&M~PRJ-7121~5~2022~01/03/2022~05/03/2022~831006,25370~T&M~PRJ-7121~5~2022~06/02/2022~12/02/2022~806040,25370~T&M~PRJ-7121~5~2022~13/02/2022~19/02/2022~806041','','34024'  
CREATE    procedure [dbo].[USP_INSERT_UPDATE_INVOICE_CONSOLIDATION]  
  
(  
@Customer_id varchar(200),  
@billing_type varchar(50),  
@sow_id varchar(MAX),  
@ote_id  varchar(MAX),  
@USERID VARCHAR(20)  
)  
AS  
BEGIN  
--DECLARE  
--@Customer_id varchar(200),  
--@billing_type varchar(50),  
--@sow_id varchar(MAX),  
--@ote_id  varchar(MAX),  
--@USERID VARCHAR(20)  
  
--SET   
--@Customer_id = 'ARTECH LLC'  
--SET @billing_type ='T&M'  
--SET @sow_id = '29799~T&M~PRJ-9413~5~2022~01/03/2022~31/03/2022~834126,29799~T&M~PRJ-9413~5~2022~01/03/2022~31/03/2022~834127,29799~T&M~PRJ-9413~5~2022~01/02/2022~28/02/2022~780515'  
--SET @ote_id  = ''  
--SET @USERID ='23396'  
PRINT 'BEGIN'  
DECLARE @STATUS_VALUE INT = 500          
,@STATUS_DESCRIPTION VARCHAR(250) = 'Error In Inserting Or Updating'          
,@message VARCHAR(250) = ''  
,@ERROR_PO_ID VARCHAR(max)  
BEGIN TRY  
DECLARE @consolidation_Key INT = 0, @Is_PO_key_mandatory varchar(250)=null  
------ Table data clean up for already existing records to restrict the duplicates ------  
  
SELECT DISTINCT BAT_INV.S_CUSTOMER_ID,BAT_INV.S_BILLING_TYPE,BAT_INV.N_SOW_ID,BAT_INV.N_BATCH_NO,BAT_INV.S_DRAFT_INVOICE_NO,INV.N_INVOICE_STATUS   
INTO #TEMP_DELETE  
FROM T_TB_INVOICE_CONSOLIDATION_O2C INV,T_TB_INVOICE_CONSOLIDATION_BUFFER_BATCH_O2C BAT_INV  
WHERE INV.N_BATCH_NO=BAT_INV.N_BATCH_NO  
--AND INV.S_DRAFT_INVOICE_NO=BAT_INV.S_DRAFT_INVOICE_NO  
AND BAT_INV.S_CUSTOMER_ID=@Customer_id AND BAT_INV.S_BILLING_TYPE=@billing_type   
---AND BAT_INV.N_SOW_ID IN(SELECT [SOW_ID] FROM #TEMP_INPUT_PARAMS)  
AND INV.N_INVOICE_STATUS in(1)  
--prevent deletion of buffer--Devi R--25-June-2021  
  DELETE A FROM T_TB_INVOICE_CONSOLIDATION_LEVEL2_O2C  A  
  INNER JOIN #TEMP_DELETE B ON A.S_DRAFT_INVOICE_NO=B.S_DRAFT_INVOICE_NO AND A.S_CUSTOMER_ID=B.S_CUSTOMER_ID   
  AND A.S_BILLING_TYPE=B.S_BILLING_TYPE  
  --IN (SELECT S_DRAFT_INVOICE_NO FROM #TEMP_DELETE)  
  DELETE A FROM T_TB_INVOICE_CONSOLIDATION_LEVEL1_O2C A INNER JOIN #TEMP_DELETE B ON A.S_DRAFT_INVOICE_NO=B.S_DRAFT_INVOICE_NO AND A.S_CUSTOMER_ID=B.S_CUSTOMER_ID   
  AND A.S_BILLING_TYPE=B.S_BILLING_TYPE  
  DELETE A FROM T_TB_INVOICE_CONSOLIDATION_O2C A  
  INNER JOIN #TEMP_DELETE B ON A.N_BATCH_NO=B.N_BATCH_NO AND A.S_CUSTOMER_ID=B.S_CUSTOMER_ID   
  AND A.S_BILLING_TYPE=B.S_BILLING_TYPE WHERE A.N_INVOICE_STATUS=1   
  --and N_BATCH_NO IN (SELECT N_BATCH_NO FROM #TEMP_DELETE)  
  DELETE  A FROM T_TB_INVOICE_CONSOLIDATION_BUFFER_BATCH_O2C A  
  INNER JOIN #TEMP_DELETE B ON A.N_BATCH_NO=B.N_BATCH_NO AND A.S_CUSTOMER_ID=B.S_CUSTOMER_ID   
  AND A.S_BILLING_TYPE=B.S_BILLING_TYPE --AND A.S_DRAFT_INVOICE_NO=B.S_DRAFT_INVOICE_NO  
  
IF EXISTS (  
  SELECT 'X'  
  FROM [dbo].[T_TB_INVOICE_CUSTOMER_CONSOLIDATION_O2C] CONSOL_DEFIN  
  WHERE ltrim(rtrim(upper(CONSOL_DEFIN.S_CUSTOMER_ID))) = ltrim(rtrim(upper(@Customer_id)))  
   AND ltrim(rtrim(upper(CONSOL_DEFIN.S_BILLING_TYPE))) = ltrim(rtrim(upper(@billing_type)))  
   AND CONSOL_DEFIN.N_CURRENT_STATUS = 4  
   AND CONSOL_DEFIN.N_FINANCE_STATUS = 4  
   AND CONSOL_DEFIN.D_EFFECTIVE_DATE=(select max(SUB_CONSOL.D_EFFECTIVE_DATE) FROM [dbo].[T_TB_INVOICE_CUSTOMER_CONSOLIDATION_O2C] SUB_CONSOL where SUB_CONSOL.S_CUSTOMER_ID=CONSOL_DEFIN.S_CUSTOMER_ID and CONSOL_DEFIN.S_BILLING_TYPE=SUB_CONSOL.S_BILLING_TY
PE)  
  )  
BEGIN  
 SELECT @consolidation_Key = CONSOL_DEFIN.n_id--,@Is_PO_key_mandatory=ltrim(rtrim(upper(CONSOL_DEFIN.S_PO_REF_ATTRIBUTE)))  
 FROM [dbo].[T_TB_INVOICE_CUSTOMER_CONSOLIDATION_O2C] CONSOL_DEFIN  
 WHERE ltrim(rtrim(upper(CONSOL_DEFIN.S_CUSTOMER_ID))) = ltrim(rtrim(upper(@Customer_id)))  
  AND ltrim(rtrim(upper(CONSOL_DEFIN.S_BILLING_TYPE))) = ltrim(rtrim(upper(@billing_type)))  
  AND CONSOL_DEFIN.N_CURRENT_STATUS = 4  
  AND CONSOL_DEFIN.N_FINANCE_STATUS = 4  
  AND CONSOL_DEFIN.D_EFFECTIVE_DATE=(select max(SUB_CONSOL.D_EFFECTIVE_DATE) FROM [dbo].[T_TB_INVOICE_CUSTOMER_CONSOLIDATION_O2C] SUB_CONSOL where SUB_CONSOL.S_CUSTOMER_ID=CONSOL_DEFIN.S_CUSTOMER_ID and CONSOL_DEFIN.S_BILLING_TYPE=SUB_CONSOL.S_BILLING_TYP
E)  
END  
ELSE IF EXISTS (  
  SELECT 'X'  
  FROM [dbo].[T_TB_INVOICE_CUSTOMER_CONSOLIDATION_O2C] CONSOL_DEFIN  
  WHERE ltrim(rtrim(upper(CONSOL_DEFIN.S_CUSTOMER_ID))) = ltrim(rtrim(upper(@Customer_id)))  
   AND ltrim(rtrim(upper(CONSOL_DEFIN.S_BILLING_TYPE))) = 'ALL'  
   AND CONSOL_DEFIN.N_CURRENT_STATUS = 4  
   AND CONSOL_DEFIN.N_FINANCE_STATUS = 4  
   AND CONSOL_DEFIN.D_EFFECTIVE_DATE=(select max(SUB_CONSOL.D_EFFECTIVE_DATE) FROM [dbo].[T_TB_INVOICE_CUSTOMER_CONSOLIDATION_O2C] SUB_CONSOL where SUB_CONSOL.S_CUSTOMER_ID=CONSOL_DEFIN.S_CUSTOMER_ID and CONSOL_DEFIN.S_BILLING_TYPE=SUB_CONSOL.S_BILLING_TY
PE)  
  )  
BEGIN  
 SELECT @consolidation_Key = CONSOL_DEFIN.n_id--,@Is_PO_key_mandatory=ltrim(rtrim(upper(CONSOL_DEFIN.S_PO_REF_ATTRIBUTE)))  
 FROM [dbo].[T_TB_INVOICE_CUSTOMER_CONSOLIDATION_O2C] CONSOL_DEFIN  
 WHERE ltrim(rtrim(upper(CONSOL_DEFIN.S_CUSTOMER_ID))) = ltrim(rtrim(upper(@Customer_id)))  
  AND ltrim(rtrim(upper(CONSOL_DEFIN.S_BILLING_TYPE))) = 'ALL'  
  AND CONSOL_DEFIN.N_CURRENT_STATUS = 4  
  AND CONSOL_DEFIN.N_FINANCE_STATUS = 4  
  AND CONSOL_DEFIN.D_EFFECTIVE_DATE=(select max(SUB_CONSOL.D_EFFECTIVE_DATE) FROM [dbo].[T_TB_INVOICE_CUSTOMER_CONSOLIDATION_O2C] SUB_CONSOL where SUB_CONSOL.S_CUSTOMER_ID=CONSOL_DEFIN.S_CUSTOMER_ID and CONSOL_DEFIN.S_BILLING_TYPE=SUB_CONSOL.S_BILLING_TYP
E)  
END  
  
--SELECT @consolidation_Key  
  
IF(@consolidation_Key>0)  
BEGIN  
--DECLARE @sow_id VARCHAR(MAX),@ote_id varchar(max)  
  
--drop table #TEMP2  
--SET @sow_id='11376|TNM|PRJ,11376|FPP|1,11376|VOL|23,11376|FPPRTOTE|4,11376|VOLRTOTE|5,11376|TNMRTOTE|6,11376|FPPTBOTE|7,11376|VOLTBOTE|8,11376|TNMTBOTE|9'  
--SET @ote_id='11376|TNM|PRJ,11376|FPP|1,11376|VOL|23,11376|FPPRTOTE|4,11376|VOLRTOTE|5,11376|TNMRTOTE|6,11376|FPPTBOTE|7,11376|VOLTBOTE|8,11376|TNMTBOTE|9'  
create table #TEMP_QRY_PARAMS(STRING varchar(1000))  
insert into #TEMP_QRY_PARAMS SELECT distinct STRING  FROM DBO.SPLITSTRING(@sow_id,',') where ISNULL(@sow_id,'')<>''  
insert into #TEMP_QRY_PARAMS  SELECT distinct STRING  FROM DBO.SPLITSTRING(@ote_id,',') WHERE ISNULL(@ote_id,'')<>''  
  
DECLARE @delimiter VARCHAR(50)  
SET @delimiter='~'  -- <=== Here, you can change the delimiter.  
;WITH CTE AS  
(   
    SELECT  
         
        --CAST('<M>' + REPLACE([STRING], @delimiter , '</M><M>') + '</M>' AS XML)   
  CAST('<M>' + REPLACE(REPLACE([STRING],'&','&amp;'), @delimiter , '</M><M>') + '</M>' AS XML)   
        AS [S_DASHBOARD_STRING]  
    FROM #TEMP_QRY_PARAMS  
)  
SELECT  
--[S_DASHBOARD_STRING]  
      [S_DASHBOARD_STRING].value('/M[1]', 'varchar(50)') As [SOW_ID],  
     [S_DASHBOARD_STRING].value('/M[2]', 'varchar(50)') As [BILLING_TYPE_REF],  
     [S_DASHBOARD_STRING].value('/M[3]', 'varchar(50)') As [VALUE],  
  [S_DASHBOARD_STRING].value('/M[4]', 'varchar(50)') As [N_MONTH],  
  [S_DASHBOARD_STRING].value('/M[5]', 'varchar(50)') As [N_YEAR],  
  [S_DASHBOARD_STRING].value('/M[6]', 'varchar(50)') As [D_INV_PEROD_START_DATE],  
  [S_DASHBOARD_STRING].value('/M[7]', 'varchar(50)') As [D_INV_PEROD_END_DATE],  
  [S_DASHBOARD_STRING].value('/M[8]', 'varchar(50)') As [N_INVOICE_PERIOD_ID]  
  INTO #TEMP_INPUT_PARAMS  
FROM CTE   
--SELECT * FROM #TEMP_INPUT_PARAMS  
--declare @Customer_id varchar(200)='AIRCANADA',  
--@billing_type varchar(50)='T&M',  
--@USERID VARCHAR(20)='28075'  
--DECLARE @USERID VARCHAR(20)  
declare @sqlinvoicelevel varchar(max),@sqlsublevel1 varchar(max),@sqlsublevel2 varchar(max),@sqlInvLevelFillDraft varchar(max)  
--,@USERID VARCHAR(20)='28075'  
Declare @batch_no numeric(18,0)  
select @batch_no=ISNULL(max(N_BATCH_NO),0)+1 from T_TB_INVOICE_CONSOLIDATION_BUFFER_BATCH_O2C  
--SELECT @batch_no  
  
  ----  
  /*fetch consolidation key column details*/  
    
DECLARE @S_CUSTOMER_ID VARCHAR(250)=@Customer_id   
CREATE TABLE #TEMP_INV_KEY_LEVEL (S_CUSTOMER_ID VARCHAR(250),S_BILLING_TYPE VARCHAR(10),S_ATTRIBUTE VARCHAR(250),DB_QRY_MAPPING_COL  VARCHAR(250),S_CUSTOMER_ID_ATTRIBUTE VARCHAR(5),KEY_LEVEL INT)  
INSERT INTO #TEMP_INV_KEY_LEVEL  
SELECT CONSOL_DEFIN.S_CUSTOMER_ID,CONSOL_DEFIN.S_BILLING_TYPE,  
'S_CUSTOMER_ID_ATTRIBUTE' AS S_ATTRIBUTE,'S_CUSTOMER_ID' as DB_QRY_MAPPING_COL ,CONSOL_DEFIN.S_CUSTOMER_ID_ATTRIBUTE,N_CUSTOMER_ID_ATTRIBUTE       
FROM [dbo].[T_TB_INVOICE_CUSTOMER_CONSOLIDATION_O2C] CONSOL_DEFIN  
LEFT JOIN  [dbo].[T_TB_INVOICE_KEY_LEVEL_MAPPING_O2C] KEY_MAP ON KEY_MAP.S_CUSTOMER_ID=CONSOL_DEFIN.S_CUSTOMER_ID AND KEY_MAP.S_BILLING_TYPE=CONSOL_DEFIN.S_BILLING_TYPE  
WHERE CONSOL_DEFIN.S_CUSTOMER_ID=@S_CUSTOMER_ID  
AND CONSOL_DEFIN.N_CURRENT_STATUS = 4 AND CONSOL_DEFIN.N_FINANCE_STATUS = 4  
/*INCT0033198 -Invoice Consolidation for Westwood Issue Fix - Mar 2, 2021 - Starts*/  
AND CONSOL_DEFIN.N_CURRENT_STATUS = KEY_MAP.N_CURRENT_STATUS   
AND CONSOL_DEFIN.N_FINANCE_STATUS = KEY_MAP.N_FINANCE_STATUS  
/*INCT0033198 -Invoice Consolidation for Westwood Issue Fix - Mar 2, 2021 - Ends*/  
AND CONSOL_DEFIN.D_EFFECTIVE_DATE=(select max(SUB_CONSOL.D_EFFECTIVE_DATE) FROM [dbo].[T_TB_INVOICE_CUSTOMER_CONSOLIDATION_O2C] SUB_CONSOL where SUB_CONSOL.S_CUSTOMER_ID=CONSOL_DEFIN.S_CUSTOMER_ID and CONSOL_DEFIN.S_BILLING_TYPE=SUB_CONSOL.S_BILLING_TYPE)
  
  
UNION ALL  
SELECT CONSOL_DEFIN.S_CUSTOMER_ID,CONSOL_DEFIN.S_BILLING_TYPE,  
    'S_BILLING_MODE_ATTRIBUTE' AS S_ATTRIBUTE,'S_BILLING_TYPE' as DB_QRY_MAPPING_COL ,S_BILLING_MODE_ATTRIBUTE,N_BILLING_MODE_ATTRIBUTE    
      
FROM [dbo].[T_TB_INVOICE_CUSTOMER_CONSOLIDATION_O2C] CONSOL_DEFIN  
LEFT JOIN  [dbo].[T_TB_INVOICE_KEY_LEVEL_MAPPING_O2C] KEY_MAP ON KEY_MAP.S_CUSTOMER_ID=CONSOL_DEFIN.S_CUSTOMER_ID AND KEY_MAP.S_BILLING_TYPE=CONSOL_DEFIN.S_BILLING_TYPE  
WHERE CONSOL_DEFIN.S_CUSTOMER_ID=@S_CUSTOMER_ID  
AND CONSOL_DEFIN.N_CURRENT_STATUS = 4 AND CONSOL_DEFIN.N_FINANCE_STATUS = 4  
/*INCT0033198 -Invoice Consolidation for Westwood Issue Fix - Mar 2, 2021 - Starts*/  
AND CONSOL_DEFIN.N_CURRENT_STATUS = KEY_MAP.N_CURRENT_STATUS   
AND CONSOL_DEFIN.N_FINANCE_STATUS = KEY_MAP.N_FINANCE_STATUS  
/*INCT0033198 -Invoice Consolidation for Westwood Issue Fix - Mar 2, 2021 - Ends*/  
AND CONSOL_DEFIN.D_EFFECTIVE_DATE=(select max(SUB_CONSOL.D_EFFECTIVE_DATE) FROM [dbo].[T_TB_INVOICE_CUSTOMER_CONSOLIDATION_O2C] SUB_CONSOL where SUB_CONSOL.S_CUSTOMER_ID=CONSOL_DEFIN.S_CUSTOMER_ID and CONSOL_DEFIN.S_BILLING_TYPE=SUB_CONSOL.S_BILLING_TYPE)
  
UNION ALL  
SELECT CONSOL_DEFIN.S_CUSTOMER_ID,CONSOL_DEFIN.S_BILLING_TYPE,  
      
    'S_FIN_BU_ATTRIBUTE' AS S_ATTRIBUTE ,'S_BUINESS_UNIT' as DB_QRY_MAPPING_COL ,S_FIN_BU_ATTRIBUTE,N_FIN_BU_ATTRIBUTE    
      
FROM [dbo].[T_TB_INVOICE_CUSTOMER_CONSOLIDATION_O2C] CONSOL_DEFIN  
LEFT JOIN  [dbo].[T_TB_INVOICE_KEY_LEVEL_MAPPING_O2C] KEY_MAP ON KEY_MAP.S_CUSTOMER_ID=CONSOL_DEFIN.S_CUSTOMER_ID AND KEY_MAP.S_BILLING_TYPE=CONSOL_DEFIN.S_BILLING_TYPE  
WHERE CONSOL_DEFIN.S_CUSTOMER_ID=@S_CUSTOMER_ID  
AND CONSOL_DEFIN.N_CURRENT_STATUS = 4 AND CONSOL_DEFIN.N_FINANCE_STATUS = 4  
/*INCT0033198 -Invoice Consolidation for Westwood Issue Fix - Mar 2, 2021 - Starts*/  
AND CONSOL_DEFIN.N_CURRENT_STATUS = KEY_MAP.N_CURRENT_STATUS   
AND CONSOL_DEFIN.N_FINANCE_STATUS = KEY_MAP.N_FINANCE_STATUS  
/*INCT0033198 -Invoice Consolidation for Westwood Issue Fix - Mar 2, 2021 - Ends*/  
AND CONSOL_DEFIN.D_EFFECTIVE_DATE=(select max(SUB_CONSOL.D_EFFECTIVE_DATE) FROM [dbo].[T_TB_INVOICE_CUSTOMER_CONSOLIDATION_O2C] SUB_CONSOL where SUB_CONSOL.S_CUSTOMER_ID=CONSOL_DEFIN.S_CUSTOMER_ID and CONSOL_DEFIN.S_BILLING_TYPE=SUB_CONSOL.S_BILLING_TYPE)
  
UNION ALL  
  
SELECT CONSOL_DEFIN.S_CUSTOMER_ID,CONSOL_DEFIN.S_BILLING_TYPE,      
    'S_BILLING_CYCLE_ATTRIBUTE' AS S_ATTRIBUTE,'S_BILLING_CYCLE' as DB_QRY_MAPPING_COL ,S_BILLING_CYCLE_ATTRIBUTE,N_BILLING_CYCLE_ATTRIBUTE        
      
FROM [dbo].[T_TB_INVOICE_CUSTOMER_CONSOLIDATION_O2C] CONSOL_DEFIN  
LEFT JOIN  [dbo].[T_TB_INVOICE_KEY_LEVEL_MAPPING_O2C] KEY_MAP ON KEY_MAP.S_CUSTOMER_ID=CONSOL_DEFIN.S_CUSTOMER_ID AND KEY_MAP.S_BILLING_TYPE=CONSOL_DEFIN.S_BILLING_TYPE  
WHERE CONSOL_DEFIN.S_CUSTOMER_ID=@S_CUSTOMER_ID  
AND CONSOL_DEFIN.N_CURRENT_STATUS = 4 AND CONSOL_DEFIN.N_FINANCE_STATUS = 4  
/*INCT0033198 -Invoice Consolidation for Westwood Issue Fix - Mar 2, 2021 - Starts*/  
AND CONSOL_DEFIN.N_CURRENT_STATUS = KEY_MAP.N_CURRENT_STATUS   
AND CONSOL_DEFIN.N_FINANCE_STATUS = KEY_MAP.N_FINANCE_STATUS  
/*INCT0033198 -Invoice Consolidation for Westwood Issue Fix - Mar 2, 2021 - Ends*/  
AND CONSOL_DEFIN.D_EFFECTIVE_DATE=(select max(SUB_CONSOL.D_EFFECTIVE_DATE) FROM [dbo].[T_TB_INVOICE_CUSTOMER_CONSOLIDATION_O2C] SUB_CONSOL where SUB_CONSOL.S_CUSTOMER_ID=CONSOL_DEFIN.S_CUSTOMER_ID and CONSOL_DEFIN.S_BILLING_TYPE=SUB_CONSOL.S_BILLING_TYPE)
  
UNION ALL  
SELECT CONSOL_DEFIN.S_CUSTOMER_ID,CONSOL_DEFIN.S_BILLING_TYPE,  
  
    'S_BILLING_CURRENCY' AS S_ATTRIBUTE,'S_BILLING_CURRENCY' as DB_QRY_MAPPING_COL  ,S_BILLING_CURRENCY,N_BILLING_CURRENCY_ATTRIBUTE     
      
FROM [dbo].[T_TB_INVOICE_CUSTOMER_CONSOLIDATION_O2C] CONSOL_DEFIN  
LEFT JOIN  [dbo].[T_TB_INVOICE_KEY_LEVEL_MAPPING_O2C] KEY_MAP ON KEY_MAP.S_CUSTOMER_ID=CONSOL_DEFIN.S_CUSTOMER_ID AND KEY_MAP.S_BILLING_TYPE=CONSOL_DEFIN.S_BILLING_TYPE  
WHERE CONSOL_DEFIN.S_CUSTOMER_ID=@S_CUSTOMER_ID  
AND CONSOL_DEFIN.N_CURRENT_STATUS = 4 AND CONSOL_DEFIN.N_FINANCE_STATUS = 4  
/*INCT0033198 -Invoice Consolidation for Westwood Issue Fix - Mar 2, 2021 - Starts*/  
AND CONSOL_DEFIN.N_CURRENT_STATUS = KEY_MAP.N_CURRENT_STATUS   
AND CONSOL_DEFIN.N_FINANCE_STATUS = KEY_MAP.N_FINANCE_STATUS  
/*INCT0033198 -Invoice Consolidation for Westwood Issue Fix - Mar 2, 2021 - Ends*/  
AND CONSOL_DEFIN.D_EFFECTIVE_DATE=(select max(SUB_CONSOL.D_EFFECTIVE_DATE) FROM [dbo].[T_TB_INVOICE_CUSTOMER_CONSOLIDATION_O2C] SUB_CONSOL where SUB_CONSOL.S_CUSTOMER_ID=CONSOL_DEFIN.S_CUSTOMER_ID and CONSOL_DEFIN.S_BILLING_TYPE=SUB_CONSOL.S_BILLING_TYPE)
  
UNION ALL  
SELECT CONSOL_DEFIN.S_CUSTOMER_ID,CONSOL_DEFIN.S_BILLING_TYPE,  
    'S_FIN_ID_ATTRIBUTE' AS S_ATTRIBUTE,'S_FIN_ID' as DB_QRY_MAPPING_COL ,S_FIN_ID_ATTRIBUTE,N_FIN_ID_ATTRIBUTE  
      
      
FROM [dbo].[T_TB_INVOICE_CUSTOMER_CONSOLIDATION_O2C] CONSOL_DEFIN  
LEFT JOIN  [dbo].[T_TB_INVOICE_KEY_LEVEL_MAPPING_O2C] KEY_MAP ON KEY_MAP.S_CUSTOMER_ID=CONSOL_DEFIN.S_CUSTOMER_ID AND KEY_MAP.S_BILLING_TYPE=CONSOL_DEFIN.S_BILLING_TYPE  
WHERE CONSOL_DEFIN.S_CUSTOMER_ID=@S_CUSTOMER_ID  
AND CONSOL_DEFIN.N_CURRENT_STATUS = 4 AND CONSOL_DEFIN.N_FINANCE_STATUS = 4  
/*INCT0033198 -Invoice Consolidation for Westwood Issue Fix - Mar 2, 2021 - Starts*/  
AND CONSOL_DEFIN.N_CURRENT_STATUS = KEY_MAP.N_CURRENT_STATUS   
AND CONSOL_DEFIN.N_FINANCE_STATUS = KEY_MAP.N_FINANCE_STATUS  
/*INCT0033198 -Invoice Consolidation for Westwood Issue Fix - Mar 2, 2021 - Ends*/  
AND CONSOL_DEFIN.D_EFFECTIVE_DATE=(select max(SUB_CONSOL.D_EFFECTIVE_DATE) FROM [dbo].[T_TB_INVOICE_CUSTOMER_CONSOLIDATION_O2C] SUB_CONSOL where SUB_CONSOL.S_CUSTOMER_ID=CONSOL_DEFIN.S_CUSTOMER_ID and CONSOL_DEFIN.S_BILLING_TYPE=SUB_CONSOL.S_BILLING_TYPE)
  
UNION ALL  
SELECT CONSOL_DEFIN.S_CUSTOMER_ID,CONSOL_DEFIN.S_BILLING_TYPE,  
      
    'S_SOW_ID_ATTRIBUTE' AS S_ATTRIBUTE ,'N_SOW_ID' as DB_QRY_MAPPING_COL,S_SOW_ID_ATTRIBUTE,N_SOW_ID_ATTRIBUTE  
      
      
FROM [dbo].[T_TB_INVOICE_CUSTOMER_CONSOLIDATION_O2C] CONSOL_DEFIN  
LEFT JOIN  [dbo].[T_TB_INVOICE_KEY_LEVEL_MAPPING_O2C] KEY_MAP ON KEY_MAP.S_CUSTOMER_ID=CONSOL_DEFIN.S_CUSTOMER_ID AND KEY_MAP.S_BILLING_TYPE=CONSOL_DEFIN.S_BILLING_TYPE  
WHERE CONSOL_DEFIN.S_CUSTOMER_ID=@S_CUSTOMER_ID  
AND CONSOL_DEFIN.N_CURRENT_STATUS = 4 AND CONSOL_DEFIN.N_FINANCE_STATUS = 4  
/*INCT0033198 -Invoice Consolidation for Westwood Issue Fix - Mar 2, 2021 - Starts*/  
AND CONSOL_DEFIN.N_CURRENT_STATUS = KEY_MAP.N_CURRENT_STATUS   
AND CONSOL_DEFIN.N_FINANCE_STATUS = KEY_MAP.N_FINANCE_STATUS  
/*INCT0033198 -Invoice Consolidation for Westwood Issue Fix - Mar 2, 2021 - Ends*/  
AND CONSOL_DEFIN.D_EFFECTIVE_DATE=(select max(SUB_CONSOL.D_EFFECTIVE_DATE) FROM [dbo].[T_TB_INVOICE_CUSTOMER_CONSOLIDATION_O2C] SUB_CONSOL where SUB_CONSOL.S_CUSTOMER_ID=CONSOL_DEFIN.S_CUSTOMER_ID and CONSOL_DEFIN.S_BILLING_TYPE=SUB_CONSOL.S_BILLING_TYPE)
  
UNION ALL  
SELECT CONSOL_DEFIN.S_CUSTOMER_ID,CONSOL_DEFIN.S_BILLING_TYPE,  
      
    'S_PO_REF_ATTRIBUTE' AS S_ATTRIBUTE, 'S_PO_REFERENCE' as DB_QRY_MAPPING_COL ,S_PO_REF_ATTRIBUTE,N_PO_REF_ATTRIBUTE  
      
FROM [dbo].[T_TB_INVOICE_CUSTOMER_CONSOLIDATION_O2C] CONSOL_DEFIN  
LEFT JOIN  [dbo].[T_TB_INVOICE_KEY_LEVEL_MAPPING_O2C] KEY_MAP ON KEY_MAP.S_CUSTOMER_ID=CONSOL_DEFIN.S_CUSTOMER_ID AND KEY_MAP.S_BILLING_TYPE=CONSOL_DEFIN.S_BILLING_TYPE  
WHERE CONSOL_DEFIN.S_CUSTOMER_ID=@S_CUSTOMER_ID  
AND CONSOL_DEFIN.N_CURRENT_STATUS = 4 AND CONSOL_DEFIN.N_FINANCE_STATUS = 4  
/*INCT0033198 -Invoice Consolidation for Westwood Issue Fix - Mar 2, 2021 - Starts*/  
AND CONSOL_DEFIN.N_CURRENT_STATUS = KEY_MAP.N_CURRENT_STATUS   
AND CONSOL_DEFIN.N_FINANCE_STATUS = KEY_MAP.N_FINANCE_STATUS  
/*INCT0033198 -Invoice Consolidation for Westwood Issue Fix - Mar 2, 2021 - Ends*/  
AND CONSOL_DEFIN.D_EFFECTIVE_DATE=(select max(SUB_CONSOL.D_EFFECTIVE_DATE) FROM [dbo].[T_TB_INVOICE_CUSTOMER_CONSOLIDATION_O2C] SUB_CONSOL where SUB_CONSOL.S_CUSTOMER_ID=CONSOL_DEFIN.S_CUSTOMER_ID and CONSOL_DEFIN.S_BILLING_TYPE=SUB_CONSOL.S_BILLING_TYPE)
  
UNION ALL  
SELECT CONSOL_DEFIN.S_CUSTOMER_ID,CONSOL_DEFIN.S_BILLING_TYPE,  
      
    'S_CUSTOM_FIELD1_ATTRIBUTE' AS S_ATTRIBUTE,'S_INVOICING_EXTRA_INFO1' as DB_QRY_MAPPING_COL  ,S_CUSTOM_FIELD1_ATTRIBUTE,N_CUSTOM_FIELD1_ATTRIBUTE  
      
FROM [dbo].[T_TB_INVOICE_CUSTOMER_CONSOLIDATION_O2C] CONSOL_DEFIN  
LEFT JOIN  [dbo].[T_TB_INVOICE_KEY_LEVEL_MAPPING_O2C] KEY_MAP ON KEY_MAP.S_CUSTOMER_ID=CONSOL_DEFIN.S_CUSTOMER_ID AND KEY_MAP.S_BILLING_TYPE=CONSOL_DEFIN.S_BILLING_TYPE  
WHERE CONSOL_DEFIN.S_CUSTOMER_ID=@S_CUSTOMER_ID  
AND CONSOL_DEFIN.N_CURRENT_STATUS = 4 AND CONSOL_DEFIN.N_FINANCE_STATUS = 4  
/*INCT0033198 -Invoice Consolidation for Westwood Issue Fix - Mar 2, 2021 - Starts*/  
AND CONSOL_DEFIN.N_CURRENT_STATUS = KEY_MAP.N_CURRENT_STATUS   
AND CONSOL_DEFIN.N_FINANCE_STATUS = KEY_MAP.N_FINANCE_STATUS  
/*INCT0033198 -Invoice Consolidation for Westwood Issue Fix - Mar 2, 2021 - Ends*/  
AND CONSOL_DEFIN.D_EFFECTIVE_DATE=(select max(SUB_CONSOL.D_EFFECTIVE_DATE) FROM [dbo].[T_TB_INVOICE_CUSTOMER_CONSOLIDATION_O2C] SUB_CONSOL where SUB_CONSOL.S_CUSTOMER_ID=CONSOL_DEFIN.S_CUSTOMER_ID and CONSOL_DEFIN.S_BILLING_TYPE=SUB_CONSOL.S_BILLING_TYPE)
  
UNION ALL  
SELECT CONSOL_DEFIN.S_CUSTOMER_ID,CONSOL_DEFIN.S_BILLING_TYPE,  
      
    'S_CUSTOM_FIELD2_ATTRIBUTE' AS S_ATTRIBUTE,'S_INVOICING_EXTRA_INFO2' as DB_QRY_MAPPING_COL  ,S_CUSTOM_FIELD2_ATTRIBUTE,N_CUSTOM_FIELD2_ATTRIBUTE  
      
FROM [dbo].[T_TB_INVOICE_CUSTOMER_CONSOLIDATION_O2C] CONSOL_DEFIN  
LEFT JOIN  [dbo].[T_TB_INVOICE_KEY_LEVEL_MAPPING_O2C] KEY_MAP ON KEY_MAP.S_CUSTOMER_ID=CONSOL_DEFIN.S_CUSTOMER_ID AND KEY_MAP.S_BILLING_TYPE=CONSOL_DEFIN.S_BILLING_TYPE  
WHERE CONSOL_DEFIN.S_CUSTOMER_ID=@S_CUSTOMER_ID  
AND CONSOL_DEFIN.N_CURRENT_STATUS = 4 AND CONSOL_DEFIN.N_FINANCE_STATUS = 4  
/*INCT0033198 -Invoice Consolidation for Westwood Issue Fix - Mar 2, 2021 - Starts*/  
AND CONSOL_DEFIN.N_CURRENT_STATUS = KEY_MAP.N_CURRENT_STATUS   
AND CONSOL_DEFIN.N_FINANCE_STATUS = KEY_MAP.N_FINANCE_STATUS  
/*INCT0033198 -Invoice Consolidation for Westwood Issue Fix - Mar 2, 2021 - Ends*/  
AND CONSOL_DEFIN.D_EFFECTIVE_DATE=(select max(SUB_CONSOL.D_EFFECTIVE_DATE) FROM [dbo].[T_TB_INVOICE_CUSTOMER_CONSOLIDATION_O2C] SUB_CONSOL where SUB_CONSOL.S_CUSTOMER_ID=CONSOL_DEFIN.S_CUSTOMER_ID and CONSOL_DEFIN.S_BILLING_TYPE=SUB_CONSOL.S_BILLING_TYPE)
  
UNION ALL  
SELECT CONSOL_DEFIN.S_CUSTOMER_ID,CONSOL_DEFIN.S_BILLING_TYPE,  
      
    'S_CUSTOM_FIELD3_ATTRIBUTE' AS S_ATTRIBUTE,'S_INVOICING_EXTRA_INFO3' as DB_QRY_MAPPING_COL  ,S_CUSTOM_FIELD3_ATTRIBUTE,N_CUSTOM_FIELD3_ATTRIBUTE  
      
FROM [dbo].[T_TB_INVOICE_CUSTOMER_CONSOLIDATION_O2C] CONSOL_DEFIN  
LEFT JOIN  [dbo].[T_TB_INVOICE_KEY_LEVEL_MAPPING_O2C] KEY_MAP ON KEY_MAP.S_CUSTOMER_ID=CONSOL_DEFIN.S_CUSTOMER_ID AND KEY_MAP.S_BILLING_TYPE=CONSOL_DEFIN.S_BILLING_TYPE  
WHERE CONSOL_DEFIN.S_CUSTOMER_ID=@S_CUSTOMER_ID  
AND CONSOL_DEFIN.N_CURRENT_STATUS = 4 AND CONSOL_DEFIN.N_FINANCE_STATUS = 4  
/*INCT0033198 -Invoice Consolidation for Westwood Issue Fix - Mar 2, 2021 - Starts*/  
AND CONSOL_DEFIN.N_CURRENT_STATUS = KEY_MAP.N_CURRENT_STATUS   
AND CONSOL_DEFIN.N_FINANCE_STATUS = KEY_MAP.N_FINANCE_STATUS  
/*INCT0033198 -Invoice Consolidation for Westwood Issue Fix - Mar 2, 2021 - Ends*/  
AND CONSOL_DEFIN.D_EFFECTIVE_DATE=(select max(SUB_CONSOL.D_EFFECTIVE_DATE) FROM [dbo].[T_TB_INVOICE_CUSTOMER_CONSOLIDATION_O2C] SUB_CONSOL where SUB_CONSOL.S_CUSTOMER_ID=CONSOL_DEFIN.S_CUSTOMER_ID and CONSOL_DEFIN.S_BILLING_TYPE=SUB_CONSOL.S_BILLING_TYPE)
  
UNION ALL  
SELECT CONSOL_DEFIN.S_CUSTOMER_ID,CONSOL_DEFIN.S_BILLING_TYPE,  
      
    'S_CUSTOM_FIELD4_ATTRIBUTE' AS S_ATTRIBUTE ,'S_INVOICING_EXTRA_INFO4' as DB_QRY_MAPPING_COL ,S_CUSTOM_FIELD4_ATTRIBUTE,N_CUSTOM_FIELD4_ATTRIBUTE  
      
FROM [dbo].[T_TB_INVOICE_CUSTOMER_CONSOLIDATION_O2C] CONSOL_DEFIN  
LEFT JOIN  [dbo].[T_TB_INVOICE_KEY_LEVEL_MAPPING_O2C] KEY_MAP ON KEY_MAP.S_CUSTOMER_ID=CONSOL_DEFIN.S_CUSTOMER_ID AND KEY_MAP.S_BILLING_TYPE=CONSOL_DEFIN.S_BILLING_TYPE  
WHERE CONSOL_DEFIN.S_CUSTOMER_ID=@S_CUSTOMER_ID  
AND CONSOL_DEFIN.N_CURRENT_STATUS = 4 AND CONSOL_DEFIN.N_FINANCE_STATUS = 4  
/*INCT0033198 -Invoice Consolidation for Westwood Issue Fix - Mar 2, 2021 - Starts*/  
AND CONSOL_DEFIN.N_CURRENT_STATUS = KEY_MAP.N_CURRENT_STATUS   
AND CONSOL_DEFIN.N_FINANCE_STATUS = KEY_MAP.N_FINANCE_STATUS  
/*INCT0033198 -Invoice Consolidation for Westwood Issue Fix - Mar 2, 2021 - Ends*/  
AND CONSOL_DEFIN.D_EFFECTIVE_DATE=(select max(SUB_CONSOL.D_EFFECTIVE_DATE) FROM [dbo].[T_TB_INVOICE_CUSTOMER_CONSOLIDATION_O2C] SUB_CONSOL where SUB_CONSOL.S_CUSTOMER_ID=CONSOL_DEFIN.S_CUSTOMER_ID and CONSOL_DEFIN.S_BILLING_TYPE=SUB_CONSOL.S_BILLING_TYPE)
  
UNION ALL  
SELECT CONSOL_DEFIN.S_CUSTOMER_ID,CONSOL_DEFIN.S_BILLING_TYPE,  
      
    'S_CUSTOM_FIELD5_ATTRIBUTE' AS S_ATTRIBUTE ,'S_INVOICING_EXTRA_INFO5' as DB_QRY_MAPPING_COL ,S_CUSTOM_FIELD5_ATTRIBUTE,N_CUSTOM_FIELD5_ATTRIBUTE  
      
FROM [dbo].[T_TB_INVOICE_CUSTOMER_CONSOLIDATION_O2C] CONSOL_DEFIN  
LEFT JOIN  [dbo].[T_TB_INVOICE_KEY_LEVEL_MAPPING_O2C] KEY_MAP ON KEY_MAP.S_CUSTOMER_ID=CONSOL_DEFIN.S_CUSTOMER_ID AND KEY_MAP.S_BILLING_TYPE=CONSOL_DEFIN.S_BILLING_TYPE  
WHERE CONSOL_DEFIN.S_CUSTOMER_ID=@S_CUSTOMER_ID  
AND CONSOL_DEFIN.N_CURRENT_STATUS = 4 AND CONSOL_DEFIN.N_FINANCE_STATUS = 4  
/*INCT0033198 -Invoice Consolidation for Westwood Issue Fix - Mar 2, 2021 - Starts*/  
AND CONSOL_DEFIN.N_CURRENT_STATUS = KEY_MAP.N_CURRENT_STATUS   
AND CONSOL_DEFIN.N_FINANCE_STATUS = KEY_MAP.N_FINANCE_STATUS  
/*INCT0033198 -Invoice Consolidation for Westwood Issue Fix - Mar 2, 2021 - Ends*/  
AND CONSOL_DEFIN.D_EFFECTIVE_DATE=(select max(SUB_CONSOL.D_EFFECTIVE_DATE) FROM [dbo].[T_TB_INVOICE_CUSTOMER_CONSOLIDATION_O2C] SUB_CONSOL where SUB_CONSOL.S_CUSTOMER_ID=CONSOL_DEFIN.S_CUSTOMER_ID and CONSOL_DEFIN.S_BILLING_TYPE=SUB_CONSOL.S_BILLING_TYPE)
  
UNION ALL  
SELECT CONSOL_DEFIN.S_CUSTOMER_ID,CONSOL_DEFIN.S_BILLING_TYPE,  
      
    'S_CUSTOM_FIELD6_ATTRIBUTE' AS S_ATTRIBUTE,'S_INVOICING_EXTRA_INFO6' as DB_QRY_MAPPING_COL  ,S_CUSTOM_FIELD6_ATTRIBUTE,N_CUSTOM_FIELD6_ATTRIBUTE  
      
FROM [dbo].[T_TB_INVOICE_CUSTOMER_CONSOLIDATION_O2C] CONSOL_DEFIN  
LEFT JOIN  [dbo].[T_TB_INVOICE_KEY_LEVEL_MAPPING_O2C] KEY_MAP ON KEY_MAP.S_CUSTOMER_ID=CONSOL_DEFIN.S_CUSTOMER_ID AND KEY_MAP.S_BILLING_TYPE=CONSOL_DEFIN.S_BILLING_TYPE  
WHERE CONSOL_DEFIN.S_CUSTOMER_ID=@S_CUSTOMER_ID  
AND CONSOL_DEFIN.N_CURRENT_STATUS = 4 AND CONSOL_DEFIN.N_FINANCE_STATUS = 4  
/*INCT0033198 -Invoice Consolidation for Westwood Issue Fix - Mar 2, 2021 - Starts*/  
AND CONSOL_DEFIN.N_CURRENT_STATUS = KEY_MAP.N_CURRENT_STATUS   
AND CONSOL_DEFIN.N_FINANCE_STATUS = KEY_MAP.N_FINANCE_STATUS  
/*INCT0033198 -Invoice Consolidation for Westwood Issue Fix - Mar 2, 2021 - Ends*/  
AND CONSOL_DEFIN.D_EFFECTIVE_DATE=(select max(SUB_CONSOL.D_EFFECTIVE_DATE) FROM [dbo].[T_TB_INVOICE_CUSTOMER_CONSOLIDATION_O2C] SUB_CONSOL where SUB_CONSOL.S_CUSTOMER_ID=CONSOL_DEFIN.S_CUSTOMER_ID and CONSOL_DEFIN.S_BILLING_TYPE=SUB_CONSOL.S_BILLING_TYPE)
  
UNION ALL  
SELECT CONSOL_DEFIN.S_CUSTOMER_ID,CONSOL_DEFIN.S_BILLING_TYPE,  
      
    'S_EXECUTION_MODEL' AS S_ATTRIBUTE,'S_EXECUTION_MODEL' as DB_QRY_MAPPING_COL ,S_EXECUTION_MODEL,N_EXECUTION_MODEL  
      
FROM [dbo].[T_TB_INVOICE_CUSTOMER_CONSOLIDATION_O2C] CONSOL_DEFIN  
LEFT JOIN  [dbo].[T_TB_INVOICE_KEY_LEVEL_MAPPING_O2C] KEY_MAP ON KEY_MAP.S_CUSTOMER_ID=CONSOL_DEFIN.S_CUSTOMER_ID AND KEY_MAP.S_BILLING_TYPE=CONSOL_DEFIN.S_BILLING_TYPE  
WHERE CONSOL_DEFIN.S_CUSTOMER_ID=@S_CUSTOMER_ID  
AND CONSOL_DEFIN.N_CURRENT_STATUS = 4 AND CONSOL_DEFIN.N_FINANCE_STATUS = 4  
/*INCT0033198 -Invoice Consolidation for Westwood Issue Fix - Mar 2, 2021 - Starts*/  
AND CONSOL_DEFIN.N_CURRENT_STATUS = KEY_MAP.N_CURRENT_STATUS   
AND CONSOL_DEFIN.N_FINANCE_STATUS = KEY_MAP.N_FINANCE_STATUS  
/*INCT0033198 -Invoice Consolidation for Westwood Issue Fix - Mar 2, 2021 - Ends*/  
AND CONSOL_DEFIN.D_EFFECTIVE_DATE=(select max(SUB_CONSOL.D_EFFECTIVE_DATE) FROM [dbo].[T_TB_INVOICE_CUSTOMER_CONSOLIDATION_O2C] SUB_CONSOL where SUB_CONSOL.S_CUSTOMER_ID=CONSOL_DEFIN.S_CUSTOMER_ID and CONSOL_DEFIN.S_BILLING_TYPE=SUB_CONSOL.S_BILLING_TYPE)
  
UNION ALL                 
SELECT CONSOL_DEFIN.S_CUSTOMER_ID,CONSOL_DEFIN.S_BILLING_TYPE,  
     
    --'S_PROFILE' AS S_ATTRIBUTE,'S_PROFILE' as DB_QRY_MAPPING_COL ,S_PROFILE,N_PROFILE  
    'N_RATE_ID' AS S_ATTRIBUTE,'N_RATE_ID' as DB_QRY_MAPPING_COL ,S_PROFILE,N_PROFILE  
      
FROM [dbo].[T_TB_INVOICE_CUSTOMER_CONSOLIDATION_O2C] CONSOL_DEFIN  
LEFT JOIN  [dbo].[T_TB_INVOICE_KEY_LEVEL_MAPPING_O2C] KEY_MAP ON KEY_MAP.S_CUSTOMER_ID=CONSOL_DEFIN.S_CUSTOMER_ID AND KEY_MAP.S_BILLING_TYPE=CONSOL_DEFIN.S_BILLING_TYPE  
WHERE CONSOL_DEFIN.S_CUSTOMER_ID=@S_CUSTOMER_ID  
AND CONSOL_DEFIN.N_CURRENT_STATUS = 4 AND CONSOL_DEFIN.N_FINANCE_STATUS = 4  
/*INCT0033198 -Invoice Consolidation for Westwood Issue Fix - Mar 2, 2021 - Starts*/  
AND CONSOL_DEFIN.N_CURRENT_STATUS = KEY_MAP.N_CURRENT_STATUS   
AND CONSOL_DEFIN.N_FINANCE_STATUS = KEY_MAP.N_FINANCE_STATUS  
/*INCT0033198 -Invoice Consolidation for Westwood Issue Fix - Mar 2, 2021 - Ends*/  
AND CONSOL_DEFIN.D_EFFECTIVE_DATE=(select max(SUB_CONSOL.D_EFFECTIVE_DATE) FROM [dbo].[T_TB_INVOICE_CUSTOMER_CONSOLIDATION_O2C] SUB_CONSOL where SUB_CONSOL.S_CUSTOMER_ID=CONSOL_DEFIN.S_CUSTOMER_ID and CONSOL_DEFIN.S_BILLING_TYPE=SUB_CONSOL.S_BILLING_TYPE)
  
UNION ALL  
SELECT CONSOL_DEFIN.S_CUSTOMER_ID,CONSOL_DEFIN.S_BILLING_TYPE,  
      
    'S_EMPLOYEE_ID' AS S_ATTRIBUTE,'S_EMPLOYEE_ID' as DB_QRY_MAPPING_COL ,CONSOL_DEFIN.S_EMPLOYEE_ID,KEY_MAP.S_EMPLOYEE_ID  
      
FROM [dbo].[T_TB_INVOICE_CUSTOMER_CONSOLIDATION_O2C] CONSOL_DEFIN  
LEFT JOIN  [dbo].[T_TB_INVOICE_KEY_LEVEL_MAPPING_O2C] KEY_MAP ON KEY_MAP.S_CUSTOMER_ID=CONSOL_DEFIN.S_CUSTOMER_ID AND KEY_MAP.S_BILLING_TYPE=CONSOL_DEFIN.S_BILLING_TYPE  
WHERE CONSOL_DEFIN.S_CUSTOMER_ID=@S_CUSTOMER_ID  
AND CONSOL_DEFIN.N_CURRENT_STATUS = 4 AND CONSOL_DEFIN.N_FINANCE_STATUS = 4  
/*INCT0033198 -Invoice Consolidation for Westwood Issue Fix - Mar 2, 2021 - Starts*/  
AND CONSOL_DEFIN.N_CURRENT_STATUS = KEY_MAP.N_CURRENT_STATUS   
AND CONSOL_DEFIN.N_FINANCE_STATUS = KEY_MAP.N_FINANCE_STATUS  
/*INCT0033198 -Invoice Consolidation for Westwood Issue Fix - Mar 2, 2021 - Ends*/  
AND CONSOL_DEFIN.D_EFFECTIVE_DATE=(select max(SUB_CONSOL.D_EFFECTIVE_DATE) FROM [dbo].[T_TB_INVOICE_CUSTOMER_CONSOLIDATION_O2C] SUB_CONSOL where SUB_CONSOL.S_CUSTOMER_ID=CONSOL_DEFIN.S_CUSTOMER_ID and CONSOL_DEFIN.S_BILLING_TYPE=SUB_CONSOL.S_BILLING_TYPE)
  
UNION ALL  
SELECT CONSOL_DEFIN.S_CUSTOMER_ID,CONSOL_DEFIN.S_BILLING_TYPE,  
'S_OTE_ATTRIBUTE' AS S_ATTRIBUTE,'S_OTE' as DB_QRY_MAPPING_COL ,CONSOL_DEFIN.S_OTE_ATTRIBUTE,KEY_MAP.N_OTE_ATTRIBUTE       
FROM [dbo].[T_TB_INVOICE_CUSTOMER_CONSOLIDATION_O2C] CONSOL_DEFIN  
LEFT JOIN  [dbo].[T_TB_INVOICE_KEY_LEVEL_MAPPING_O2C] KEY_MAP ON KEY_MAP.S_CUSTOMER_ID=CONSOL_DEFIN.S_CUSTOMER_ID AND KEY_MAP.S_BILLING_TYPE=CONSOL_DEFIN.S_BILLING_TYPE  
WHERE CONSOL_DEFIN.S_CUSTOMER_ID=@S_CUSTOMER_ID  
AND CONSOL_DEFIN.N_CURRENT_STATUS = 4 AND CONSOL_DEFIN.N_FINANCE_STATUS = 4  
/*INCT0033198 -Invoice Consolidation for Westwood Issue Fix - Mar 2, 2021 - Starts*/  
AND CONSOL_DEFIN.N_CURRENT_STATUS = KEY_MAP.N_CURRENT_STATUS   
AND CONSOL_DEFIN.N_FINANCE_STATUS = KEY_MAP.N_FINANCE_STATUS  
/*INCT0033198 -Invoice Consolidation for Westwood Issue Fix - Mar 2, 2021 - Ends*/  
AND CONSOL_DEFIN.D_EFFECTIVE_DATE=(select max(SUB_CONSOL.D_EFFECTIVE_DATE) FROM [dbo].[T_TB_INVOICE_CUSTOMER_CONSOLIDATION_O2C] SUB_CONSOL where SUB_CONSOL.S_CUSTOMER_ID=CONSOL_DEFIN.S_CUSTOMER_ID and CONSOL_DEFIN.S_BILLING_TYPE=SUB_CONSOL.S_BILLING_TYPE)
  
UNION ALL  
SELECT CONSOL_DEFIN.S_CUSTOMER_ID,CONSOL_DEFIN.S_BILLING_TYPE,  
'S_BILLING_ENTITY_ATTRIBUTE' AS S_ATTRIBUTE,'S_PO_CUSTOMER_ID' as DB_QRY_MAPPING_COL ,CONSOL_DEFIN.S_BILLING_ENTITY_ATTRIBUTE,KEY_MAP.N_BILLING_ENTITY_ATTRIBUTE       
FROM [dbo].[T_TB_INVOICE_CUSTOMER_CONSOLIDATION_O2C] CONSOL_DEFIN  
LEFT JOIN  [dbo].[T_TB_INVOICE_KEY_LEVEL_MAPPING_O2C] KEY_MAP ON KEY_MAP.S_CUSTOMER_ID=CONSOL_DEFIN.S_CUSTOMER_ID AND KEY_MAP.S_BILLING_TYPE=CONSOL_DEFIN.S_BILLING_TYPE  
WHERE CONSOL_DEFIN.S_CUSTOMER_ID=@S_CUSTOMER_ID  
AND CONSOL_DEFIN.N_CURRENT_STATUS = 4 AND CONSOL_DEFIN.N_FINANCE_STATUS = 4  
/*INCT0033198 -Invoice Consolidation for Westwood Issue Fix - Mar 2, 2021 - Starts*/  
AND CONSOL_DEFIN.N_CURRENT_STATUS = KEY_MAP.N_CURRENT_STATUS   
AND CONSOL_DEFIN.N_FINANCE_STATUS = KEY_MAP.N_FINANCE_STATUS  
/*INCT0033198 -Invoice Consolidation for Westwood Issue Fix - Mar 2, 2021 - Ends*/  
AND CONSOL_DEFIN.D_EFFECTIVE_DATE=(select max(SUB_CONSOL.D_EFFECTIVE_DATE) FROM [dbo].[T_TB_INVOICE_CUSTOMER_CONSOLIDATION_O2C] SUB_CONSOL where SUB_CONSOL.S_CUSTOMER_ID=CONSOL_DEFIN.S_CUSTOMER_ID and CONSOL_DEFIN.S_BILLING_TYPE=SUB_CONSOL.S_BILLING_TYPE)
  
  
UNION ALL  
SELECT CONSOL_DEFIN.S_CUSTOMER_ID,CONSOL_DEFIN.S_BILLING_TYPE,  
'S_MILESTONE_ATTRIBUTE' AS S_ATTRIBUTE,'S_MILESTONE_NAME' as DB_QRY_MAPPING_COL ,CONSOL_DEFIN.S_MILESTONE_ATTRIBUTE,KEY_MAP.N_MILESTONE_ATTRIBUTE       
FROM [dbo].[T_TB_INVOICE_CUSTOMER_CONSOLIDATION_O2C] CONSOL_DEFIN  
LEFT JOIN  [dbo].[T_TB_INVOICE_KEY_LEVEL_MAPPING_O2C] KEY_MAP ON KEY_MAP.S_CUSTOMER_ID=CONSOL_DEFIN.S_CUSTOMER_ID AND KEY_MAP.S_BILLING_TYPE=CONSOL_DEFIN.S_BILLING_TYPE  
WHERE CONSOL_DEFIN.S_CUSTOMER_ID=@S_CUSTOMER_ID  
AND CONSOL_DEFIN.N_CURRENT_STATUS = 4 AND CONSOL_DEFIN.N_FINANCE_STATUS = 4  
/*INCT0033198 -Invoice Consolidation for Westwood Issue Fix - Mar 2, 2021 - Starts*/  
AND CONSOL_DEFIN.N_CURRENT_STATUS = KEY_MAP.N_CURRENT_STATUS   
AND CONSOL_DEFIN.N_FINANCE_STATUS = KEY_MAP.N_FINANCE_STATUS  
/*INCT0033198 -Invoice Consolidation for Westwood Issue Fix - Mar 2, 2021 - Ends*/  
AND CONSOL_DEFIN.D_EFFECTIVE_DATE=(select max(SUB_CONSOL.D_EFFECTIVE_DATE) FROM [dbo].[T_TB_INVOICE_CUSTOMER_CONSOLIDATION_O2C] SUB_CONSOL where SUB_CONSOL.S_CUSTOMER_ID=CONSOL_DEFIN.S_CUSTOMER_ID and CONSOL_DEFIN.S_BILLING_TYPE=SUB_CONSOL.S_BILLING_TYPE)
  
UNION ALL  
SELECT CONSOL_DEFIN.S_CUSTOMER_ID,CONSOL_DEFIN.S_BILLING_TYPE,  
'S_RATECARD_CURRENCY' AS S_ATTRIBUTE,'RATE_CARD_CURRENCY' as DB_QRY_MAPPING_COL ,CONSOL_DEFIN.S_RATECARD_CURRENCY,KEY_MAP.N_RATECARD_CURRENCY       
FROM [dbo].[T_TB_INVOICE_CUSTOMER_CONSOLIDATION_O2C] CONSOL_DEFIN  
LEFT JOIN  [dbo].[T_TB_INVOICE_KEY_LEVEL_MAPPING_O2C] KEY_MAP ON KEY_MAP.S_CUSTOMER_ID=CONSOL_DEFIN.S_CUSTOMER_ID AND KEY_MAP.S_BILLING_TYPE=CONSOL_DEFIN.S_BILLING_TYPE  
WHERE CONSOL_DEFIN.S_CUSTOMER_ID=@S_CUSTOMER_ID  
AND CONSOL_DEFIN.N_CURRENT_STATUS = 4 AND CONSOL_DEFIN.N_FINANCE_STATUS = 4  
/*INCT0033198 -Invoice Consolidation for Westwood Issue Fix - Mar 2, 2021 - Starts*/  
AND CONSOL_DEFIN.N_CURRENT_STATUS = KEY_MAP.N_CURRENT_STATUS   
AND CONSOL_DEFIN.N_FINANCE_STATUS = KEY_MAP.N_FINANCE_STATUS  
/*INCT0033198 -Invoice Consolidation for Westwood Issue Fix - Mar 2, 2021 - Ends*/  
AND CONSOL_DEFIN.D_EFFECTIVE_DATE=(select max(SUB_CONSOL.D_EFFECTIVE_DATE) FROM [dbo].[T_TB_INVOICE_CUSTOMER_CONSOLIDATION_O2C] SUB_CONSOL where SUB_CONSOL.S_CUSTOMER_ID=CONSOL_DEFIN.S_CUSTOMER_ID and CONSOL_DEFIN.S_BILLING_TYPE=SUB_CONSOL.S_BILLING_TYPE)
  
--SELECT * into #temp_grouping_column_table FROM #TEMP_INV_KEY_LEVEL WHERE S_BILLING_TYPE=@billing_type AND KEY_LEVEL>0  
    
CREATE TABLE #temp_grouping_column_table (S_CUSTOMER_ID VARCHAR(100),S_BILLING_TYPE VARCHAR(20),S_ATTRIBUTE VARCHAR(100),DB_QRY_MAPPING_COL VARCHAR(100),  
            S_CUSTOMER_ID_ATTRIBUTE VARCHAR(10),KEY_LEVEL INT)  
  
  IF EXISTS (SELECT * FROM #TEMP_INV_KEY_LEVEL WHERE S_BILLING_TYPE=@billing_type)  
  BEGIN  
   INSERT INTO #temp_grouping_column_table  
   SELECT S_CUSTOMER_ID,@billing_type,S_ATTRIBUTE,DB_QRY_MAPPING_COL,S_CUSTOMER_ID_ATTRIBUTE,KEY_LEVEL    
   FROM #TEMP_INV_KEY_LEVEL WHERE S_BILLING_TYPE=@billing_type AND KEY_LEVEL>0  
  END  
  ELSE IF EXISTS (SELECT * FROM #TEMP_INV_KEY_LEVEL WHERE S_BILLING_TYPE='ALL')  
  BEGIN  
   INSERT INTO #temp_grouping_column_table  
   SELECT S_CUSTOMER_ID,@billing_type,S_ATTRIBUTE,DB_QRY_MAPPING_COL,S_CUSTOMER_ID_ATTRIBUTE,KEY_LEVEL  
   FROM #TEMP_INV_KEY_LEVEL WHERE S_BILLING_TYPE='ALL' AND KEY_LEVEL>0  
  END  
  ELSE   
  BEGIN  
   SET @STATUS_VALUE = 409          
   SET @STATUS_DESCRIPTION = 'Please configure Consolidation key grouping.'  
  END  
  
if(@STATUS_VALUE!=409)     
BEGIN  
Declare @invocelevel_grouping_col varchar(max),@sublevel1_grouping_col varchar(max),@sublevel2_grouping_col varchar(max)  
SELECT @invocelevel_grouping_col = COALESCE(@invocelevel_grouping_col+', ' ,'') + DB_QRY_MAPPING_COL FROM #temp_grouping_column_table WHERE KEY_LEVEL=1  
  
SELECT @sublevel1_grouping_col = COALESCE(@sublevel1_grouping_col+', ' ,'') + DB_QRY_MAPPING_COL FROM #temp_grouping_column_table WHERE KEY_LEVEL=2  
SELECT @sublevel2_grouping_col = COALESCE(@sublevel2_grouping_col+', ' ,'') + DB_QRY_MAPPING_COL FROM #temp_grouping_column_table WHERE KEY_LEVEL=3  
  
SELECT @invocelevel_grouping_col=REPLACE(@invocelevel_grouping_col,'S_PO_REFERENCE','S_PO_REFERENCE,S_PO_IDENTIFIER')  
SELECT @sublevel1_grouping_col=REPLACE(@sublevel1_grouping_col,'S_PO_REFERENCE','S_PO_REFERENCE,S_PO_IDENTIFIER')  
SELECT @sublevel2_grouping_col=REPLACE(@sublevel2_grouping_col,'S_PO_REFERENCE','S_PO_REFERENCE,S_PO_IDENTIFIER')  
--SELECT @invocelevel_grouping_col,@sublevel1_grouping_col,@sublevel2_grouping_col  
  
--select 'CAST(AA.'+replace(@invocelevel_grouping_col,',',' AS varchar(4000))+CAST(AA.')+' AS varchar(4000))'  
--select 'CAST(BB.'+replace(@invocelevel_grouping_col,',',' AS varchar(4000))+CAST(BB.')+' AS varchar(4000))'  
  
--select * FROM #temp_grouping_column_table WHERE KEY_LEVEL=1  
  
--TRUNCATE TABLE T_TB_INVOICE_CONSOLIDATION_BUFFER_BATCH_O2C  
--SELECT --1 AS rownumber  
  
--ROW_NUMBER() OVER(ORDER BY S_CUSTOMER_ID, S_BILLING_TYPE, S_BUINESS_UNIT, S_BILLING_CYCLE, S_BILLING_CURRENCY, S_FIN_ID, S_PO_REFERENCE, S_INVOICING_EXTRA_INFO1) AS rownum  
--,* into #TEMP_TNM_INV_CONSOL from(  
/****DECIMAL ROUNDING STARTS*****/  
/*SELECT A.N_MAPPING_ID,M.N_ID,M.S_KEY_DESCRIPTION,M.S_KEY_DESCRIPTION AS TAG_NAME,  
CASE WHEN B.S_INVOICE_LEVEL_ATTRIBUTE='YES' THEN 1  
WHEN B.S_SUBINVOICE_LEVEL1_ATTRIBUTE='YES' THEN 1  
WHEN B.S_SUBINVOICE_LEVEL2_ATTRIBUTE='YES' THEN 1  
WHEN B.S_DETAILED_LEVEL_ATTRIBUTE='YES' THEN 1  
ELSE 0 END AS IS_APPLICABILITY,  
A.LEVEL as KEY_LEVEL,  
ISNULL(A.ROUNDING_CONFIGURATION,0) AS S_KEY_ROUNDUP  
--,D.S_DESCRIPTION AS ROUNDING_DESCRIPTION  
,A.DECIMAL_CONFIGURATION AS S_KEY_DECIMAL,M.S_DEFAULT  
--E.S_DESCRIPTION AS DECIMAL_DESCRIPTION ,*  
INTO #TEMP_ROUND_DECIMAL  
FROM M_TB_INVOICE_CONSOLIDATION_MASTER_ROUNDUP_O2C M LEFT JOIN  
T_TB_ROUNDUP_LEVEL_MAPPING_O2C A ON A.LEVEL=M.N_ID  
LEFT JOIN T_TB_INVOICE_CUSTOMER_ROUNDUP_O2C B ON A.N_MAPPING_ID=B.N_MAPPING_ID  
LEFT JOIN M_TB_INVOICE_CONSOLIDATION_MASTER_ROUNDUP_O2C C ON C.N_ID=A.LEVEL  
LEFT JOIN M_TB_INVOICE_KEY_LEVEL_MASTER_ROUNDUP_O2C D ON A.ROUNDING_CONFIGURATION=D.ID AND D.IS_ACTIVE = 1  
LEFT JOIN M_TB_INVOICE_KEY_DECIMAL_O2C E ON A.DECIMAL_CONFIGURATION=E.ID AND E.IS_ACTIVE = 1    
AND A.N_MAPPING_ID=@consolidation_Key*/  
CREATE TABLE #TEMP_ROUND_DECIMAL(N_ID INT,[KEY_ID] INT,S_KEY_DESCRIPTION VARCHAR(500),TAG_NAME VARCHAR(500),KEY_LEVEL INT,IS_APPLICABILITY BIT,S_KEY_ROUNDUP INT,S_KEY_DECIMAL INT)  
  
INSERT  INTO #TEMP_ROUND_DECIMAL  
EXEC [USP_GET_CUSTOMER_ROUNDUP_O2C] @consolidation_Key  
  
  
DECLARE @ROUND_DETAIL_LEVEL INT=0, @ROUND_INV_LEVEL INT=0, @ROUND_L1_LEVEL INT=0, @ROUND_L2_LEVEL INT=0,  
 @DECIMAL_DETAIL_LEVEL INT=0, @DECIMAL_INV_LEVEL INT=0,@DECIMAL_L1_LEVEL INT=0, @DECIMAL_L2_LEVEL INT=0  
  
 SELECT @ROUND_DETAIL_LEVEL = ISNULL(S_KEY_ROUNDUP,0),@DECIMAL_DETAIL_LEVEL =ISNULL(S_KEY_DECIMAL,0) FROM #TEMP_ROUND_DECIMAL  WHERE KEY_LEVEL=4  
 SELECT @ROUND_INV_LEVEL = ISNULL(S_KEY_ROUNDUP,0),@DECIMAL_INV_LEVEL =ISNULL(S_KEY_DECIMAL,0) FROM #TEMP_ROUND_DECIMAL  WHERE KEY_LEVEL=1  
 SELECT @ROUND_L1_LEVEL  = ISNULL(S_KEY_ROUNDUP,0),@DECIMAL_L1_LEVEL  =ISNULL(S_KEY_DECIMAL,0) FROM #TEMP_ROUND_DECIMAL  WHERE KEY_LEVEL=2  
 SELECT @ROUND_L2_LEVEL  = ISNULL(S_KEY_ROUNDUP,0),@DECIMAL_L2_LEVEL  =ISNULL(S_KEY_DECIMAL,0) FROM #TEMP_ROUND_DECIMAL  WHERE KEY_LEVEL=3  
  
--SELECT * FROM #TEMP_ROUND_DECIMAL  
/*  
SELECT @ROUND_DETAIL_LEVEL,@DECIMAL_DETAIL_LEVEL,  
  @ROUND_INV_LEVEL,@DECIMAL_INV_LEVEL,  
  @ROUND_L1_LEVEL,@DECIMAL_L1_LEVEL,  
  @ROUND_L2_LEVEL,@DECIMAL_L2_LEVEL  
  */  
  --dbo.FUNC_ROUND_UP_DOWN_INVOICE_VALUE_O2C(VALUE,@ROUND_DETAIL_LEVEL,@DECIMAL_DETAIL_LEVEL)  
  --dbo.FUNC_ROUND_UP_DOWN_INVOICE_VALUE_O2C(VALUE,@ROUND_INV_LEVEL,@DECIMAL_INV_LEVEL)  
  --dbo.FUNC_ROUND_UP_DOWN_INVOICE_VALUE_O2C(VALUE,@ROUND_L1_LEVEL,@DECIMAL_L1_LEVEL)  
  --dbo.FUNC_ROUND_UP_DOWN_INVOICE_VALUE_O2C(VALUE,@ROUND_L2_LEVEL,@DECIMAL_L2_LEVEL)  
/****DECIMAL ROUNDING STARTS*****/  
  
IF OBJECT_ID('tempdb..#TMP_INVOICE_CONSOLIDATION_MAPPING') IS NOT NULL  
 DROP TABLE #TMP_INVOICE_CONSOLIDATION_MAPPING  
SELECT * INTO #TMP_INVOICE_CONSOLIDATION_MAPPING FROM T_TB_INVOICE_MAPPING_O2C WHERE 1=2  
IF (@billing_type='T&M' AND (select COUNT(1) FROM #temp_grouping_column_table WHERE S_ATTRIBUTE IN('S_PO_REF_ATTRIBUTE','S_CUSTOM_FIELD1_ATTRIBUTE','S_CUSTOM_FIELD2_ATTRIBUTE','S_CUSTOM_FIELD3_ATTRIBUTE','S_CUSTOM_FIELD4_ATTRIBUTE','S_CUSTOM_FIELD5_ATTRIB
UTE','S_CUSTOM_FIELD6_ATTRIBUTE'))=0)  
BEGIN  
--SELECT 'HI1'  
--INSERT INTO #TMP_INVOICE_CONSOLIDATION_MAPPING   
--(  
--S_CUSTOMER_ID,S_BILLING_TYPE,N_MAPPING_ID,N_SOW_ID,IS_SOW_LEVEL,D_FROM_DATE,D_TO_DATE,N_PO_ID  
--,N_CONTRIBUTION_PERCENT,N_CURRENT_STATUS,N_INVOICE_STATUS,S_PO_CUSTOMER_ID,S_CREATED_BY  
--)  
--SELECT DISTINCT  
--@Customer_id,@billing_type,@consolidation_Key,A.N_SOW_ID,1 AS IS_SOW_LEVEL,  
--ISNULL(MAP.D_FROM_DATE,DATEADD(yy, DATEDIFF(yy,0,getdate())-2,0 )) D_FROM_DATE ,  -- Fix for Employee Daywise mapping  
--ISNULL(MAP.D_TO_DATE,DATEADD(yy, DATEDIFF(yy, 0, GETDATE()) + 3, -1)) D_TO_DATE,  -- Fix for Employee Daywise mapping  
--0 N_PO_ID  
--,100 N_CONTRIBUTION_PERCENT,4 as N_CURRENT_STATUS,6 as N_INVOICE_STATUS,null as S_PO_CUSTOMER_ID,'AUTO'  
--FROM M_RT_SOW_MASTER A  
--INNER JOIN #TEMP_INPUT_PARAMS B ON A.N_SOW_ID=B.SOW_ID  
---- Fix for Employee Daywise mapping  
--LEFT JOIN T_TB_INVOICE_MAPPING_O2C MAP ON MAP.S_CUSTOMER_ID=A.S_CUSTOMER_ID AND MAP.N_SOW_ID=A.N_SOW_ID   
---- Fix for Employee Daywise mapping  
--WHERE B.BILLING_TYPE_REF='T&M' --AND B.[VALUE]=A.N_MILE_STONE_NO  
select distinct  
A.N_ID,A.S_CUSTOMER_ID,A.S_BILLING_TYPE,A.N_MAPPING_ID,B.SOW_ID AS N_SOW_ID,A.N_MILESTONE_ID,A.S_MILESTONE_NAME,A.IS_SOW_LEVEL,A.IS_EMPLOYEE_LEVEL  
,A.S_EMPLOYEE_ID,A.N_SERVICE_TRACK,A.N_SCHEDULE,A.D_FROM_DATE,A.D_TO_DATE,C.N_ID AS N_PO_ID,C.S_PO_IDENTIFIER,C.S_PO_REFERENCE,A.S_INVOICING_EXTRA_INFO1  
,A.S_INVOICING_EXTRA_INFO2,A.S_INVOICING_EXTRA_INFO3,A.S_INVOICING_EXTRA_INFO4,A.S_INVOICING_EXTRA_INFO5,A.S_INVOICING_EXTRA_INFO6  
,A.N_VALUE,A.N_CONTRIBUTION_PERCENT,A.D_CREATED_DATE,A.S_CREATED_BY,A.D_UPDATED_DATE,A.S_UPDATED_BY,A.N_CURRENT_STATUS,A.S_APPROVED_BY  
,A.D_APPROVED_DATE,A.S_REMARKS,A.N_INVOICE_STATUS,A.D_INVOICED_DATE,A.S_PO_CUSTOMER_ID AS S_PO_CUSTOMER_ID   
 INTO #TEMP_INVOICE_MAP_DATA_TNM  
 from #TEMP_INPUT_PARAMS B left outer join T_TB_INVOICE_MAPPING_O2C A    
 on    
 A.N_SOW_ID=B.SOW_ID   
 --AND B.BILLING_TYPE_REF='T&M'   
 AND B.BILLING_TYPE_REF IN('T&M')  
  AND A.N_CURRENT_STATUS=4   
  --AND A.N_INVOICE_STATUS=6   
  and A.s_customer_id=@Customer_id   
  and A.s_billing_type=@billing_type  
  --and A.s_customer_id='FTSEINT01'   
  --and A.s_billing_type='T&M'  
  and(  
  (  
  A.D_FROM_DATE between convert( datetime,B.D_INV_PEROD_START_DATE,103) AND convert( datetime,B.D_INV_PEROD_END_DATE,103) )  
  or(A.D_TO_DATE between convert( datetime,B.D_INV_PEROD_START_DATE,103) AND convert( datetime,B.D_INV_PEROD_END_DATE,103) )  
  or(convert( datetime,B.D_INV_PEROD_START_DATE,103) BETWEEN A.D_FROM_DATE AND A.D_TO_DATE)  
  or(convert( datetime,B.D_INV_PEROD_END_DATE,103) BETWEEN A.D_FROM_DATE AND A.D_TO_DATE)  
  )  
  LEFT OUTER JOIN M_TB_PO_MASTER_O2C C ON A.S_PO_IDENTIFIER=C.S_PO_IDENTIFIER AND A.S_BILLING_TYPE=C.S_BILLING_MODE AND A.S_PO_CUSTOMER_ID=C.S_CUSTOMER_ID AND C.N_PO_STATUS IN (4,5) AND C.N_FIN_STATUS=2  
  WHERE B.BILLING_TYPE_REF IN('T&M')-- Added by rasavalli to avoid the dupliate invoice value - 06/03/2021  
  
  IF((select COUNT(1) FROM #temp_grouping_column_table WHERE S_ATTRIBUTE IN('S_PO_REF_ATTRIBUTE','S_CUSTOM_FIELD1_ATTRIBUTE','S_CUSTOM_FIELD2_ATTRIBUTE','S_CUSTOM_FIELD3_ATTRIBUTE','S_CUSTOM_FIELD4_ATTRIBUTE','S_CUSTOM_FIELD5_ATTRIBUTE','S_CUSTOM_FIELD6_A
TTRIBUTE'))>0  
  AND   
  (SELECT  COUNT(1) FROM #TEMP_INVOICE_MAP_DATA_TNM WHERE N_ID IS NULL)>0)  
  BEGIN  
  PRINT 'NO INVOICE MAPPING FOUND FOR FEW MILESTONES'  
  END  
  ELSE  
  BEGIN  
  SET IDENTITY_INSERT #TMP_INVOICE_CONSOLIDATION_MAPPING ON  
INSERT INTO #TMP_INVOICE_CONSOLIDATION_MAPPING (N_ID,S_CUSTOMER_ID,S_BILLING_TYPE,N_MAPPING_ID,N_SOW_ID,N_MILESTONE_ID,S_MILESTONE_NAME,IS_SOW_LEVEL,IS_EMPLOYEE_LEVEL  
,S_EMPLOYEE_ID,N_SERVICE_TRACK,N_SCHEDULE,D_FROM_DATE,D_TO_DATE,N_PO_ID,S_PO_IDENTIFIER,S_PO_REFERENCE,S_INVOICING_EXTRA_INFO1  
,S_INVOICING_EXTRA_INFO2,S_INVOICING_EXTRA_INFO3,S_INVOICING_EXTRA_INFO4,S_INVOICING_EXTRA_INFO5,S_INVOICING_EXTRA_INFO6  
,N_VALUE,N_CONTRIBUTION_PERCENT,D_CREATED_DATE,S_CREATED_BY,D_UPDATED_DATE,S_UPDATED_BY,N_CURRENT_STATUS,S_APPROVED_BY  
,D_APPROVED_DATE,S_REMARKS,N_INVOICE_STATUS,D_INVOICED_DATE,S_PO_CUSTOMER_ID)  
  SELECT N_ID,S_CUSTOMER_ID,S_BILLING_TYPE,N_MAPPING_ID,N_SOW_ID,N_MILESTONE_ID,S_MILESTONE_NAME,IS_SOW_LEVEL,IS_EMPLOYEE_LEVEL  
,S_EMPLOYEE_ID,N_SERVICE_TRACK,N_SCHEDULE,D_FROM_DATE,D_TO_DATE,N_PO_ID,S_PO_IDENTIFIER,S_PO_REFERENCE,S_INVOICING_EXTRA_INFO1  
,S_INVOICING_EXTRA_INFO2,S_INVOICING_EXTRA_INFO3,S_INVOICING_EXTRA_INFO4,S_INVOICING_EXTRA_INFO5,S_INVOICING_EXTRA_INFO6  
,N_VALUE,N_CONTRIBUTION_PERCENT,D_CREATED_DATE,S_CREATED_BY,D_UPDATED_DATE,S_UPDATED_BY,N_CURRENT_STATUS,S_APPROVED_BY  
,D_APPROVED_DATE,S_REMARKS,N_INVOICE_STATUS,D_INVOICED_DATE,S_PO_CUSTOMER_ID FROM #TEMP_INVOICE_MAP_DATA_TNM   
WHERE N_ID IS NOT NULL  
  SET IDENTITY_INSERT #TMP_INVOICE_CONSOLIDATION_MAPPING OFF  
    
 INSERT INTO #TMP_INVOICE_CONSOLIDATION_MAPPING   
(  
S_CUSTOMER_ID,S_BILLING_TYPE,N_MAPPING_ID,N_SOW_ID,IS_SOW_LEVEL,D_FROM_DATE,D_TO_DATE,N_PO_ID  
,N_CONTRIBUTION_PERCENT,N_CURRENT_STATUS,N_INVOICE_STATUS,S_PO_CUSTOMER_ID,S_CREATED_BY  
)  
SELECT DISTINCT  
@Customer_id,@billing_type,@consolidation_Key,A.N_SOW_ID,1 AS IS_SOW_LEVEL,  
--ISNULL(MAP.D_FROM_DATE,DATEADD(yy, DATEDIFF(yy,0,getdate())-2,0 )) D_FROM_DATE ,  -- Fix for Employee Daywise mapping  
--ISNULL(MAP.D_TO_DATE,DATEADD(yy, DATEDIFF(yy, 0, GETDATE()) + 3, -1)) D_TO_DATE,  -- Fix for Employee Daywise mapping  
convert( datetime,B.D_INV_PEROD_START_DATE,103) as D_FROM_DATE,  
convert( datetime,B.D_INV_PEROD_END_DATE,103) as D_TO_DATE,  
0 as N_PO_ID  
,100 N_CONTRIBUTION_PERCENT,4 as N_CURRENT_STATUS,6 as N_INVOICE_STATUS,null as S_PO_CUSTOMER_ID,'AUTO'  
FROM M_RT_SOW_MASTER A  
INNER JOIN #TEMP_INPUT_PARAMS B ON A.N_SOW_ID=B.SOW_ID  
-- Fix for Employee Daywise mapping  
inner join #TEMP_INVOICE_MAP_DATA_TNM MAP ON  MAP.N_SOW_ID=A.N_SOW_ID   
-- Fix for Employee Daywise mapping  
WHERE B.BILLING_TYPE_REF IN('T&M')  
 AND MAP.N_ID IS NULL  
    
  
--PO EXPIRY VALIDATION STARTS  
DECLARE @D_PO_FROM_DATE DATETIME , @D_PO_TO_DATE DATETIME,@N_PROJ_INVOICE_ID VARCHAR(MAX),@D_INVOICE_START_DATE DATETIME ,@D_INVOICE_END_DATE DATETIME,@S_PO_IDENTIFIER VARCHAR(MAX)  
  
select * INTO #TEMP_N_PROJ_INVOICE_ID from string_split(@sow_id,',')   
CREATE TABLE #TEMP_N_PROJ_INVOICE_ID2 (N_ID INT IDENTITY(1,1),N_PROJ_INVOICE_ID VARCHAR(MAX))  
INSERT INTO #TEMP_N_PROJ_INVOICE_ID2 select RIGHT([value],6) FROM #TEMP_N_PROJ_INVOICE_ID  
CREATE TABLE #S_PO_IDENTIFIER (N_ID INT IDENTITY(1,1),S_PO_IDENTIFIER VARCHAR(MAX))  
DECLARE @COUNT INT   
Select @COUNT = COUNT(N_ID) FROM #TEMP_N_PROJ_INVOICE_ID2  
--PRINT @COUNT  
DECLARE @countnumber INT    
SET @countnumber  = 1    
WHILE (@countnumber<=@COUNT)    
BEGIN    
  
 select @N_PROJ_INVOICE_ID = N_PROJ_INVOICE_ID from  #TEMP_N_PROJ_INVOICE_ID2 where n_id = @countnumber  
   
   
   
 insert into #S_PO_IDENTIFIER  
SELECT  S_PO_IDENTIFIER FROM T_TB_INVOICE_MAPPING_O2C A  
JOIN #TEMP_INPUT_PARAMS B ON A.S_CUSTOMER_ID = @Customer_id  
WHERE  
  A.S_billing_TYPE = B.[BILLING_TYPE_REF] and A.N_SOW_ID = B.[SOW_ID]  
AND FORMAT(CONVERT(DATETIME,REPLACE(B.[D_INV_PEROD_START_DATE],'/','-'),103), 'yyyy-MM-dd') =A.D_FROM_DATE AND FORMAT(CONVERT(DATETIME,REPLACE(B.[D_INV_PEROD_END_DATE],'/','-'),103), 'yyyy-MM-dd') = A.D_TO_DATE --FORMAT(@d, 'yyyy-MM-dd')  
  
SELECT  S_PO_IDENTIFIER,D_PO_FROM_DATE,D_PO_TO_DATE INTO #PO_DATES FROM M_TB_PO_MASTER_O2C WHERE S_PO_IDENTIFIER IN (SELECT S_PO_IDENTIFIER FROM #S_PO_IDENTIFIER)  
  
SELECT @S_PO_IDENTIFIER= S_PO_IDENTIFIER FROM #S_PO_IDENTIFIER   
  
SELECT @D_INVOICE_START_DATE = D_INVOICE_START_DATE,@D_INVOICE_END_DATE =D_INVOICE_END_DATE  from M_RT_INVOICE_PERIOD  WHERE N_INVOICE_PERIOD_ID = @N_PROJ_INVOICE_ID  
  
DECLARE @ERROR_EMP VARCHAR(250) = ''  
if exists (select * from #PO_DATES where D_PO_FROM_DATE > @D_INVOICE_START_DATE AND D_PO_TO_DATE < @D_INVOICE_END_DATE )  
BEGIN  
 SELECT DISTINCT S_PO_IDENTIFIER INTO #S_EXPIRED_PO FROM #PO_DATES WHERE D_PO_FROM_DATE > @D_INVOICE_START_DATE OR D_PO_TO_DATE < @D_INVOICE_END_DATE   
 --SELECT DISTINCT S_EMPLOYEE_ID INTO #ERROR_EMP_ID FROM #ERROR_EMP_LIST    
 SELECT @ERROR_EMP=COALESCE(@ERROR_EMP+';','')+S_PO_IDENTIFIER FROM #S_EXPIRED_PO   
   
 SET @STATUS_VALUE = 409          
 SET @STATUS_DESCRIPTION =  'PO expired for :- ' + @ERROR_EMP  
 DROP TABLE IF EXISTS #PO_DATES  
 DROP TABLE IF EXISTS #S_EXPIRED_PO  
   
END  
  
else  
BEGIN  
  UPDATE B SET   
 B.D_FROM_DATE=case when A.D_PO_FROM_DATE> isnull(B.D_FROM_DATE,A.D_PO_FROM_DATE) then A.D_PO_FROM_DATE else isnull(B.D_FROM_DATE,A.D_PO_FROM_DATE) END  
,B.D_TO_DATE=case when A.D_PO_TO_DATE> isnull(B.D_TO_DATE,A.D_PO_TO_DATE)  then isnull(B.D_TO_DATE,A.D_PO_TO_DATE)  else A.D_PO_TO_DATE END  
,B.N_PO_ID=A.N_ID  
FROM M_TB_PO_MASTER_O2C A,#TMP_INVOICE_CONSOLIDATION_MAPPING B  
WHERE A.S_CUSTOMER_ID=B.S_PO_CUSTOMER_ID AND A.S_BILLING_MODE=B.S_BILLING_TYPE AND A.S_PO_IDENTIFIER=B.S_PO_IDENTIFIER  
AND N_PO_STATUS IN(4,5) AND N_FIN_STATUS=2  
END  
DROP TABLE IF EXISTS #PO_DATES  
  
SET @countnumber = @countnumber  + 1     
END  
END  
END  
--ELSE IF (@billing_type='FPP'AND (select COUNT(1) FROM #temp_grouping_column_table WHERE S_ATTRIBUTE IN('S_PO_REF_ATTRIBUTE','S_CUSTOM_FIELD1_ATTRIBUTE','S_CUSTOM_FIELD2_ATTRIBUTE','S_CUSTOM_FIELD3_ATTRIBUTE','S_CUSTOM_FIELD4_ATTRIBUTE','S_CUSTOM_FIELD5_
ATTRIBUTE','S_CUSTOM_FIELD6_ATTRIBUTE'))=0)  
ELSE IF (@billing_type='FPP')  
BEGIN  
  
select distinct   
A.N_ID,A.S_CUSTOMER_ID,A.S_BILLING_TYPE,A.N_MAPPING_ID,B.SOW_ID AS N_SOW_ID,B.[VALUE] N_MILESTONE_ID,A.S_MILESTONE_NAME,A.IS_SOW_LEVEL,A.IS_EMPLOYEE_LEVEL  
,A.S_EMPLOYEE_ID,A.N_SERVICE_TRACK,A.N_SCHEDULE,A.D_FROM_DATE,A.D_TO_DATE,C.N_ID AS N_PO_ID,C.S_PO_IDENTIFIER,C.S_PO_REFERENCE,A.S_INVOICING_EXTRA_INFO1  
,A.S_INVOICING_EXTRA_INFO2,A.S_INVOICING_EXTRA_INFO3,A.S_INVOICING_EXTRA_INFO4,A.S_INVOICING_EXTRA_INFO5,A.S_INVOICING_EXTRA_INFO6  
,A.N_VALUE,A.N_CONTRIBUTION_PERCENT,A.D_CREATED_DATE,A.S_CREATED_BY,A.D_UPDATED_DATE,A.S_UPDATED_BY,A.N_CURRENT_STATUS,A.S_APPROVED_BY  
,A.D_APPROVED_DATE,A.S_REMARKS,A.N_INVOICE_STATUS,A.D_INVOICED_DATE,A.S_PO_CUSTOMER_ID AS S_PO_CUSTOMER_ID   
 INTO #TEMP_INVOICE_MAP_DATA  
 from #TEMP_INPUT_PARAMS B left outer join T_TB_INVOICE_MAPPING_O2C A    
 on    
 A.N_SOW_ID=B.SOW_ID   
 AND B.BILLING_TYPE_REF='FPP'   
 AND B.[VALUE]=A.N_MILESTONE_ID  
  AND A.N_CURRENT_STATUS=4   
  AND A.N_INVOICE_STATUS=6   
  and A.s_customer_id=@Customer_id   
  and A.s_billing_type=@billing_type  
  LEFT OUTER JOIN M_TB_PO_MASTER_O2C C ON A.S_PO_IDENTIFIER=C.S_PO_IDENTIFIER AND A.S_BILLING_TYPE=C.S_BILLING_MODE AND A.S_PO_CUSTOMER_ID=C.S_CUSTOMER_ID AND C.N_PO_STATUS IN (4,5) AND C.N_FIN_STATUS=2  
  WHERE B.BILLING_TYPE_REF='FPP'   
  
  IF((select COUNT(1) FROM #temp_grouping_column_table WHERE S_ATTRIBUTE IN('S_PO_REF_ATTRIBUTE','S_CUSTOM_FIELD1_ATTRIBUTE','S_CUSTOM_FIELD2_ATTRIBUTE','S_CUSTOM_FIELD3_ATTRIBUTE','S_CUSTOM_FIELD4_ATTRIBUTE','S_CUSTOM_FIELD5_ATTRIBUTE','S_CUSTOM_FIELD6_A
TTRIBUTE'))>0  
  AND   
  (SELECT  COUNT(1) FROM #TEMP_INVOICE_MAP_DATA WHERE N_ID IS NULL)>0)  
  BEGIN  
  PRINT 'NO INVOICE MAPPING FOUND FOR FEW MILESTONES'  
  END  
  ELSE IF((select COUNT(1) FROM #temp_grouping_column_table WHERE S_ATTRIBUTE IN('S_PO_REF_ATTRIBUTE'))>0  
  AND (SELECT  COUNT(1) FROM #TEMP_INVOICE_MAP_DATA WHERE N_PO_ID IS NULL)>0)  
  BEGIN  
  PRINT 'INVALID PO'  
  END  
  ELSE  
  BEGIN  
  SET IDENTITY_INSERT #TMP_INVOICE_CONSOLIDATION_MAPPING ON  
INSERT INTO #TMP_INVOICE_CONSOLIDATION_MAPPING (N_ID,S_CUSTOMER_ID,S_BILLING_TYPE,N_MAPPING_ID,N_SOW_ID,N_MILESTONE_ID,S_MILESTONE_NAME,IS_SOW_LEVEL,IS_EMPLOYEE_LEVEL  
,S_EMPLOYEE_ID,N_SERVICE_TRACK,N_SCHEDULE,D_FROM_DATE,D_TO_DATE,N_PO_ID,S_PO_IDENTIFIER,S_PO_REFERENCE,S_INVOICING_EXTRA_INFO1  
,S_INVOICING_EXTRA_INFO2,S_INVOICING_EXTRA_INFO3,S_INVOICING_EXTRA_INFO4,S_INVOICING_EXTRA_INFO5,S_INVOICING_EXTRA_INFO6  
,N_VALUE,N_CONTRIBUTION_PERCENT,D_CREATED_DATE,S_CREATED_BY,D_UPDATED_DATE,S_UPDATED_BY,N_CURRENT_STATUS,S_APPROVED_BY  
,D_APPROVED_DATE,S_REMARKS,N_INVOICE_STATUS,D_INVOICED_DATE,S_PO_CUSTOMER_ID)  
  SELECT N_ID,S_CUSTOMER_ID,S_BILLING_TYPE,N_MAPPING_ID,N_SOW_ID,N_MILESTONE_ID,S_MILESTONE_NAME,IS_SOW_LEVEL,IS_EMPLOYEE_LEVEL  
,S_EMPLOYEE_ID,N_SERVICE_TRACK,N_SCHEDULE,D_FROM_DATE,D_TO_DATE,N_PO_ID,S_PO_IDENTIFIER,S_PO_REFERENCE,S_INVOICING_EXTRA_INFO1  
,S_INVOICING_EXTRA_INFO2,S_INVOICING_EXTRA_INFO3,S_INVOICING_EXTRA_INFO4,S_INVOICING_EXTRA_INFO5,S_INVOICING_EXTRA_INFO6  
,N_VALUE,N_CONTRIBUTION_PERCENT,D_CREATED_DATE,S_CREATED_BY,D_UPDATED_DATE,S_UPDATED_BY,N_CURRENT_STATUS,S_APPROVED_BY  
,D_APPROVED_DATE,S_REMARKS,N_INVOICE_STATUS,D_INVOICED_DATE,S_PO_CUSTOMER_ID FROM #TEMP_INVOICE_MAP_DATA   
WHERE N_ID IS NOT NULL  
  SET IDENTITY_INSERT #TMP_INVOICE_CONSOLIDATION_MAPPING OFF  
    
    
   INSERT INTO #TMP_INVOICE_CONSOLIDATION_MAPPING   
(  
S_CUSTOMER_ID,S_BILLING_TYPE,N_MAPPING_ID,N_SOW_ID,N_MILESTONE_ID,S_MILESTONE_NAME,N_PO_ID  
,N_VALUE,N_CURRENT_STATUS,N_INVOICE_STATUS,S_PO_CUSTOMER_ID,S_CREATED_BY  
)  
SELECT   
@Customer_id,@billing_type,@consolidation_Key,A.N_SOW_ID,A.N_MILE_STONE_NO AS N_MILESTONE_ID,A.S_MILE_STONE_NAME AS S_MILESTONE_NAME,0 N_PO_ID  
,Round(A.N_MILE_STONE_VALUES,2) N_VALUE,4 as N_CURRENT_STATUS,6 as N_INVOICE_STATUS,null as S_PO_CUSTOMER_ID,'AUTO'  
FROM M_TB_RT_FPP_MILE_STONE A,#TEMP_INVOICE_MAP_DATA B WHERE A.N_SOW_ID=B.N_SOW_ID AND  B.N_MILESTONE_ID=A.N_MILE_STONE_NO  
AND B.N_ID IS NULL  
    
    
    
  UPDATE B SET   
B.D_FROM_DATE=case when A.D_PO_FROM_DATE> isnull(B.D_FROM_DATE,A.D_PO_FROM_DATE) then A.D_PO_FROM_DATE else  isnull(B.D_FROM_DATE,A.D_PO_FROM_DATE) END  
,B.D_TO_DATE=case when A.D_PO_TO_DATE> isnull(B.D_TO_DATE,A.D_PO_TO_DATE)  then isnull(B.D_TO_DATE,A.D_PO_TO_DATE)  else A.D_PO_TO_DATE END  
,B.N_PO_ID=A.N_ID  
FROM M_TB_PO_MASTER_O2C A,#TMP_INVOICE_CONSOLIDATION_MAPPING B  
WHERE A.S_CUSTOMER_ID=B.S_PO_CUSTOMER_ID AND A.S_BILLING_MODE=B.S_BILLING_TYPE AND A.S_PO_IDENTIFIER=B.S_PO_IDENTIFIER  
AND N_PO_STATUS IN(4,5) AND N_FIN_STATUS=2  
--SELECT 'HI2'  
--INSERT INTO #TMP_INVOICE_CONSOLIDATION_MAPPING   
--(  
--S_CUSTOMER_ID,S_BILLING_TYPE,N_MAPPING_ID,N_SOW_ID,N_MILESTONE_ID,S_MILESTONE_NAME,N_PO_ID  
--,N_VALUE,N_CURRENT_STATUS,N_INVOICE_STATUS,S_PO_CUSTOMER_ID,S_CREATED_BY  
--)  
--SELECT   
--@Customer_id,@billing_type,@consolidation_Key,A.N_SOW_ID,A.N_MILE_STONE_NO AS N_MILESTONE_ID,A.S_MILE_STONE_NAME AS S_MILESTONE_NAME,0 N_PO_ID  
--,Round(A.N_MILE_STONE_VALUES,2) N_VALUE,4 as N_CURRENT_STATUS,6 as N_INVOICE_STATUS,null as S_PO_CUSTOMER_ID,'AUTO'  
--FROM M_TB_RT_FPP_MILE_STONE A,#TEMP_INPUT_PARAMS B WHERE A.N_SOW_ID=B.SOW_ID AND B.BILLING_TYPE_REF='FPP' AND B.[VALUE]=A.N_MILE_STONE_NO  
--AND A.INVOICESTATUS = 3  
--INSERT INTO #TMP_INVOICE_CONSOLIDATION_MAPPING VALUES()  
  
END  
END  
ELSE IF (@billing_type='VOL'AND (select COUNT(1) FROM #temp_grouping_column_table WHERE S_ATTRIBUTE IN('S_PO_REF_ATTRIBUTE','S_CUSTOM_FIELD1_ATTRIBUTE','S_CUSTOM_FIELD2_ATTRIBUTE','S_CUSTOM_FIELD3_ATTRIBUTE','S_CUSTOM_FIELD4_ATTRIBUTE','S_CUSTOM_FIELD5_AT
TRIBUTE','S_CUSTOM_FIELD6_ATTRIBUTE'))=0)  
BEGIN  
--SELECT 'HI3'  
select distinct  
A.N_ID,A.S_CUSTOMER_ID,A.S_BILLING_TYPE,A.N_MAPPING_ID,B.SOW_ID AS N_SOW_ID,A.N_MILESTONE_ID,A.S_MILESTONE_NAME,A.IS_SOW_LEVEL,A.IS_EMPLOYEE_LEVEL  
,A.S_EMPLOYEE_ID,A.N_SERVICE_TRACK,A.N_SCHEDULE,A.D_FROM_DATE,A.D_TO_DATE,C.N_ID AS N_PO_ID,C.S_PO_IDENTIFIER,C.S_PO_REFERENCE,A.S_INVOICING_EXTRA_INFO1  
,A.S_INVOICING_EXTRA_INFO2,A.S_INVOICING_EXTRA_INFO3,A.S_INVOICING_EXTRA_INFO4,A.S_INVOICING_EXTRA_INFO5,A.S_INVOICING_EXTRA_INFO6  
,A.N_VALUE,A.N_CONTRIBUTION_PERCENT,A.D_CREATED_DATE,A.S_CREATED_BY,A.D_UPDATED_DATE,A.S_UPDATED_BY,A.N_CURRENT_STATUS,A.S_APPROVED_BY  
,A.D_APPROVED_DATE,A.S_REMARKS,A.N_INVOICE_STATUS,A.D_INVOICED_DATE,A.S_PO_CUSTOMER_ID AS S_PO_CUSTOMER_ID   
 INTO #TEMP_INVOICE_MAP_DATA_VOL  
 from #TEMP_INPUT_PARAMS B left outer join T_TB_INVOICE_MAPPING_O2C A    
 on    
 A.N_SOW_ID=B.SOW_ID    
 AND B.BILLING_TYPE_REF IN('VOL')  
  AND A.N_CURRENT_STATUS=4   
  and A.s_customer_id=@Customer_id   
  and A.s_billing_type=@billing_type  
  and(  
  (  
  A.D_FROM_DATE between convert( datetime,B.D_INV_PEROD_START_DATE,103) AND convert( datetime,B.D_INV_PEROD_END_DATE,103) )  
  or(A.D_TO_DATE between convert( datetime,B.D_INV_PEROD_START_DATE,103) AND convert( datetime,B.D_INV_PEROD_END_DATE,103) )  
  or(convert( datetime,B.D_INV_PEROD_START_DATE,103) BETWEEN A.D_FROM_DATE AND A.D_TO_DATE)  
  or(convert( datetime,B.D_INV_PEROD_END_DATE,103) BETWEEN A.D_FROM_DATE AND A.D_TO_DATE)  
  )  
  LEFT OUTER JOIN M_TB_PO_MASTER_O2C C ON A.S_PO_IDENTIFIER=C.S_PO_IDENTIFIER AND A.S_BILLING_TYPE=C.S_BILLING_MODE AND A.S_PO_CUSTOMER_ID=C.S_CUSTOMER_ID AND C.N_PO_STATUS IN (4,5) AND C.N_FIN_STATUS=2  
  
  IF((select COUNT(1) FROM #temp_grouping_column_table WHERE S_ATTRIBUTE IN('S_PO_REF_ATTRIBUTE','S_CUSTOM_FIELD1_ATTRIBUTE','S_CUSTOM_FIELD2_ATTRIBUTE','S_CUSTOM_FIELD3_ATTRIBUTE','S_CUSTOM_FIELD4_ATTRIBUTE','S_CUSTOM_FIELD5_ATTRIBUTE','S_CUSTOM_FIELD6_A
TTRIBUTE'))>0  
  AND   
  (SELECT  COUNT(1) FROM #TEMP_INVOICE_MAP_DATA_VOL WHERE N_ID IS NULL)>0)  
  BEGIN  
  PRINT 'NO INVOICE MAPPING FOUND FOR FEW SCHEDULES'  
  END  
  ELSE  
  BEGIN  
  SET IDENTITY_INSERT #TMP_INVOICE_CONSOLIDATION_MAPPING ON  
INSERT INTO #TMP_INVOICE_CONSOLIDATION_MAPPING (N_ID,S_CUSTOMER_ID,S_BILLING_TYPE,N_MAPPING_ID,N_SOW_ID,N_MILESTONE_ID,S_MILESTONE_NAME,IS_SOW_LEVEL,IS_EMPLOYEE_LEVEL  
,S_EMPLOYEE_ID,N_SERVICE_TRACK,N_SCHEDULE,D_FROM_DATE,D_TO_DATE,N_PO_ID,S_PO_IDENTIFIER,S_PO_REFERENCE,S_INVOICING_EXTRA_INFO1  
,S_INVOICING_EXTRA_INFO2,S_INVOICING_EXTRA_INFO3,S_INVOICING_EXTRA_INFO4,S_INVOICING_EXTRA_INFO5,S_INVOICING_EXTRA_INFO6  
,N_VALUE,N_CONTRIBUTION_PERCENT,D_CREATED_DATE,S_CREATED_BY,D_UPDATED_DATE,S_UPDATED_BY,N_CURRENT_STATUS,S_APPROVED_BY  
,D_APPROVED_DATE,S_REMARKS,N_INVOICE_STATUS,D_INVOICED_DATE,S_PO_CUSTOMER_ID)  
  SELECT N_ID,S_CUSTOMER_ID,S_BILLING_TYPE,N_MAPPING_ID,N_SOW_ID,N_MILESTONE_ID,S_MILESTONE_NAME,IS_SOW_LEVEL,IS_EMPLOYEE_LEVEL  
,S_EMPLOYEE_ID,N_SERVICE_TRACK,N_SCHEDULE,D_FROM_DATE,D_TO_DATE,N_PO_ID,S_PO_IDENTIFIER,S_PO_REFERENCE,S_INVOICING_EXTRA_INFO1  
,S_INVOICING_EXTRA_INFO2,S_INVOICING_EXTRA_INFO3,S_INVOICING_EXTRA_INFO4,S_INVOICING_EXTRA_INFO5,S_INVOICING_EXTRA_INFO6  
,N_VALUE,N_CONTRIBUTION_PERCENT,D_CREATED_DATE,S_CREATED_BY,D_UPDATED_DATE,S_UPDATED_BY,N_CURRENT_STATUS,S_APPROVED_BY  
,D_APPROVED_DATE,S_REMARKS,N_INVOICE_STATUS,D_INVOICED_DATE,S_PO_CUSTOMER_ID FROM #TEMP_INVOICE_MAP_DATA_VOL   
WHERE N_ID IS NOT NULL  
  SET IDENTITY_INSERT #TMP_INVOICE_CONSOLIDATION_MAPPING OFF  
  
INSERT INTO #TMP_INVOICE_CONSOLIDATION_MAPPING   
(  
S_CUSTOMER_ID,S_BILLING_TYPE,N_MAPPING_ID,N_SOW_ID,N_SERVICE_TRACK,N_SCHEDULE,D_FROM_DATE,D_TO_DATE,N_PO_ID  
,N_CONTRIBUTION_PERCENT,N_CURRENT_STATUS,N_INVOICE_STATUS,S_PO_CUSTOMER_ID,S_CREATED_BY  
)  
SELECT DISTINCT  
@Customer_id,@billing_type,@consolidation_Key,TRACK.N_SOW_ID,TRACK.N_TRACK_ID N_SERVICE_TRACK,SCH.N_SCHEDULE_ID ,DATEADD(yy, DATEDIFF(yy,0,getdate())-2,0 ) D_FROM_DATE ,DATEADD(yy, DATEDIFF(yy, 0, GETDATE()) + 3, -1)D_TO_DATE,0 N_PO_ID  
,100 N_CONTRIBUTION_PERCENT,4 as N_CURRENT_STATUS,6 as N_INVOICE_STATUS,null as S_PO_CUSTOMER_ID,'AUTO'  
FROM M_VOL_SERVICE_TRACK TRACK,M_VOL_FIXED_REV_SCHEDULES SCH,  
#TEMP_INPUT_PARAMS B ,#TEMP_INVOICE_MAP_DATA_VOL MAP  
WHERE  B.BILLING_TYPE_REF='VOL'   
AND TRACK.n_sow_id=SCH.n_sow_id AND TRACK.n_sow_id=B.SOW_ID AND SCH.N_SCHEDULE_ID=B.[VALUE] AND MAP.N_SOW_ID=B.N_SOW_ID   
  
 UPDATE B SET   
B.D_FROM_DATE=case when A.D_PO_FROM_DATE> isnull(B.D_FROM_DATE,A.D_PO_FROM_DATE) then A.D_PO_FROM_DATE else  isnull(B.D_FROM_DATE,A.D_PO_FROM_DATE) END  
,B.D_TO_DATE=case when A.D_PO_TO_DATE> isnull(B.D_TO_DATE,A.D_PO_TO_DATE)  then isnull(B.D_TO_DATE,A.D_PO_TO_DATE)  else A.D_PO_TO_DATE END  
,B.N_PO_ID=A.N_ID  
FROM M_TB_PO_MASTER_O2C A,#TMP_INVOICE_CONSOLIDATION_MAPPING B  
WHERE A.S_CUSTOMER_ID=B.S_PO_CUSTOMER_ID AND A.S_BILLING_MODE=B.S_BILLING_TYPE AND A.S_PO_IDENTIFIER=B.S_PO_IDENTIFIER  
AND N_PO_STATUS IN(4,5) AND N_FIN_STATUS=2  
END  
  
--SET @countnumber = @countnumber  + 1     
--END  
  
END  
ELSE  
BEGIN  
--SELECT 'HI4'  
IF((select COUNT(1) FROM #temp_grouping_column_table WHERE S_ATTRIBUTE IN('S_PO_REF_ATTRIBUTE'))>0)  
BEGIN  
SET IDENTITY_INSERT #TMP_INVOICE_CONSOLIDATION_MAPPING ON  
INSERT INTO #TMP_INVOICE_CONSOLIDATION_MAPPING (N_ID,S_CUSTOMER_ID,S_BILLING_TYPE,N_MAPPING_ID,N_SOW_ID,N_MILESTONE_ID,S_MILESTONE_NAME,IS_SOW_LEVEL,IS_EMPLOYEE_LEVEL  
,S_EMPLOYEE_ID,N_SERVICE_TRACK,N_SCHEDULE,D_FROM_DATE,D_TO_DATE,N_PO_ID,S_PO_IDENTIFIER,S_PO_REFERENCE,S_INVOICING_EXTRA_INFO1  
,S_INVOICING_EXTRA_INFO2,S_INVOICING_EXTRA_INFO3,S_INVOICING_EXTRA_INFO4,S_INVOICING_EXTRA_INFO5,S_INVOICING_EXTRA_INFO6  
,N_VALUE,N_CONTRIBUTION_PERCENT,D_CREATED_DATE,S_CREATED_BY,D_UPDATED_DATE,S_UPDATED_BY,N_CURRENT_STATUS,S_APPROVED_BY  
,D_APPROVED_DATE,S_REMARKS,N_INVOICE_STATUS,D_INVOICED_DATE,S_PO_CUSTOMER_ID)  
select distinct   
A.N_ID,A.S_CUSTOMER_ID,A.S_BILLING_TYPE,A.N_MAPPING_ID,A.N_SOW_ID,A.N_MILESTONE_ID,A.S_MILESTONE_NAME,A.IS_SOW_LEVEL,A.IS_EMPLOYEE_LEVEL  
,A.S_EMPLOYEE_ID,A.N_SERVICE_TRACK,A.N_SCHEDULE,A.D_FROM_DATE,A.D_TO_DATE, B.N_ID AS N_PO_ID,B.S_PO_IDENTIFIER,B.S_PO_REFERENCE,A.S_INVOICING_EXTRA_INFO1  
,A.S_INVOICING_EXTRA_INFO2,A.S_INVOICING_EXTRA_INFO3,A.S_INVOICING_EXTRA_INFO4,A.S_INVOICING_EXTRA_INFO5,A.S_INVOICING_EXTRA_INFO6  
,A.N_VALUE,A.N_CONTRIBUTION_PERCENT,A.D_CREATED_DATE,A.S_CREATED_BY,A.D_UPDATED_DATE,A.S_UPDATED_BY,A.N_CURRENT_STATUS,A.S_APPROVED_BY  
,A.D_APPROVED_DATE,A.S_REMARKS,A.N_INVOICE_STATUS,A.D_INVOICED_DATE,B.S_CUSTOMER_ID AS S_PO_CUSTOMER_ID  
 from T_TB_INVOICE_MAPPING_O2C A   
 INNER JOIN M_TB_PO_MASTER_O2C B ON A.S_PO_IDENTIFIER=B.S_PO_IDENTIFIER AND A.S_BILLING_TYPE=B.S_BILLING_MODE AND A.S_PO_CUSTOMER_ID=B.S_CUSTOMER_ID AND B.N_PO_STATUS IN (4,5) AND B.N_FIN_STATUS=2  
 WHERE A.N_CURRENT_STATUS=4 AND A.N_INVOICE_STATUS=6 and A.s_customer_id=@Customer_id and A.s_billing_type=@billing_type  
 and N_SOW_ID  in(select cast(SOW_ID as int) from #TEMP_INPUT_PARAMS)  
SET IDENTITY_INSERT #TMP_INVOICE_CONSOLIDATION_MAPPING OFF  
END  
ELSE  
BEGIN  
SET IDENTITY_INSERT #TMP_INVOICE_CONSOLIDATION_MAPPING ON  
INSERT INTO #TMP_INVOICE_CONSOLIDATION_MAPPING (N_ID,S_CUSTOMER_ID,S_BILLING_TYPE,N_MAPPING_ID,N_SOW_ID,N_MILESTONE_ID,S_MILESTONE_NAME,IS_SOW_LEVEL,IS_EMPLOYEE_LEVEL  
,S_EMPLOYEE_ID,N_SERVICE_TRACK,N_SCHEDULE,D_FROM_DATE,D_TO_DATE,N_PO_ID,S_PO_IDENTIFIER,S_PO_REFERENCE,S_INVOICING_EXTRA_INFO1  
,S_INVOICING_EXTRA_INFO2,S_INVOICING_EXTRA_INFO3,S_INVOICING_EXTRA_INFO4,S_INVOICING_EXTRA_INFO5,S_INVOICING_EXTRA_INFO6  
,N_VALUE,N_CONTRIBUTION_PERCENT,D_CREATED_DATE,S_CREATED_BY,D_UPDATED_DATE,S_UPDATED_BY,N_CURRENT_STATUS,S_APPROVED_BY  
,D_APPROVED_DATE,S_REMARKS,N_INVOICE_STATUS,D_INVOICED_DATE,S_PO_CUSTOMER_ID)  
select distinct   
A.N_ID,A.S_CUSTOMER_ID,A.S_BILLING_TYPE,A.N_MAPPING_ID,A.N_SOW_ID,A.N_MILESTONE_ID,A.S_MILESTONE_NAME,A.IS_SOW_LEVEL,A.IS_EMPLOYEE_LEVEL  
,A.S_EMPLOYEE_ID,A.N_SERVICE_TRACK,A.N_SCHEDULE,A.D_FROM_DATE,A.D_TO_DATE, B.N_ID AS N_PO_ID,B.S_PO_IDENTIFIER,B.S_PO_REFERENCE,A.S_INVOICING_EXTRA_INFO1  
,A.S_INVOICING_EXTRA_INFO2,A.S_INVOICING_EXTRA_INFO3,A.S_INVOICING_EXTRA_INFO4,A.S_INVOICING_EXTRA_INFO5,A.S_INVOICING_EXTRA_INFO6  
,A.N_VALUE,A.N_CONTRIBUTION_PERCENT,A.D_CREATED_DATE,A.S_CREATED_BY,A.D_UPDATED_DATE,A.S_UPDATED_BY,A.N_CURRENT_STATUS,A.S_APPROVED_BY  
,A.D_APPROVED_DATE,A.S_REMARKS,A.N_INVOICE_STATUS,A.D_INVOICED_DATE,B.S_CUSTOMER_ID AS S_PO_CUSTOMER_ID  
 from T_TB_INVOICE_MAPPING_O2C A   
 LEFT OUTER JOIN M_TB_PO_MASTER_O2C B ON A.S_PO_IDENTIFIER=B.S_PO_IDENTIFIER AND A.S_BILLING_TYPE=B.S_BILLING_MODE AND A.S_PO_CUSTOMER_ID=B.S_CUSTOMER_ID AND B.N_PO_STATUS IN (4,5) AND B.N_FIN_STATUS=2  
 WHERE A.N_CURRENT_STATUS=4 AND A.N_INVOICE_STATUS=6 and A.s_customer_id=@Customer_id and A.s_billing_type=@billing_type  
 and N_SOW_ID  in(select cast(SOW_ID as int) from #TEMP_INPUT_PARAMS)  
SET IDENTITY_INSERT #TMP_INVOICE_CONSOLIDATION_MAPPING OFF  
END  
  
  
--PO EXPIRTY VALIDATION STARTS  
select * INTO #TEMP_N_PROJ_INVOICE_ID1 from string_split(@sow_id,',')   
  
CREATE TABLE #TEMP_N_PROJ_INVOICE_ID21 (N_ID INT IDENTITY(1,1),N_PROJ_INVOICE_ID VARCHAR(MAX))  
INSERT INTO #TEMP_N_PROJ_INVOICE_ID21 select RIGHT([value],6) FROM #TEMP_N_PROJ_INVOICE_ID1  
CREATE TABLE #S_PO_IDENTIFIER1 (N_ID INT IDENTITY(1,1),S_PO_IDENTIFIER VARCHAR(MAX))  
  
Select @COUNT = COUNT(N_ID) FROM #TEMP_N_PROJ_INVOICE_ID21  
  
SET @countnumber  = 1    
WHILE (@countnumber<=@COUNT)    
BEGIN    
  
 select @N_PROJ_INVOICE_ID = N_PROJ_INVOICE_ID from  #TEMP_N_PROJ_INVOICE_ID21 where n_id = @countnumber  
 PRINT @N_PROJ_INVOICE_ID  
   
 insert into #S_PO_IDENTIFIER1  
SELECT  S_PO_IDENTIFIER FROM T_TB_INVOICE_MAPPING_O2C A  
JOIN #TEMP_INPUT_PARAMS B ON A.S_CUSTOMER_ID = @Customer_id  
WHERE  
  A.S_billing_TYPE = B.[BILLING_TYPE_REF] and A.N_SOW_ID = CONVERT(INT,B.[SOW_ID])  
AND FORMAT(CONVERT(DATETIME,REPLACE(B.[D_INV_PEROD_START_DATE],'/','-'),103), 'yyyy-MM-dd') between(A.D_FROM_DATE) and(a.D_TO_DATE) AND FORMAT(CONVERT(DATETIME,REPLACE(B.[D_INV_PEROD_END_DATE],'/','-'),103), 'yyyy-MM-dd') between(A.D_FROM_DATE) and(a.D_TO
_DATE) --FORMAT(@d, 'yyyy-MM-dd')  
  
SELECT  S_PO_IDENTIFIER,D_PO_FROM_DATE,D_PO_TO_DATE INTO #PO_DATE1 FROM M_TB_PO_MASTER_O2C WHERE S_PO_IDENTIFIER IN (SELECT S_PO_IDENTIFIER FROM #S_PO_IDENTIFIER1)  
  
SELECT @S_PO_IDENTIFIER= S_PO_IDENTIFIER FROM #S_PO_IDENTIFIER1   
  
SELECT @D_INVOICE_START_DATE = D_INVOICE_START_DATE,@D_INVOICE_END_DATE =D_INVOICE_END_DATE  from M_RT_INVOICE_PERIOD  WHERE N_INVOICE_PERIOD_ID = @N_PROJ_INVOICE_ID  
  
print @D_INVOICE_START_DATE  
print @D_INVOICE_END_DATE  
  
if exists (select * from #PO_DATE1 where D_PO_FROM_DATE > @D_INVOICE_START_DATE AND D_PO_TO_DATE < @D_INVOICE_END_DATE )  
BEGIN  
print ' if'  
 SELECT DISTINCT S_PO_IDENTIFIER INTO #S_EXPIRED_PO1 FROM #PO_DATE1 WHERE D_PO_FROM_DATE > @D_INVOICE_START_DATE OR D_PO_TO_DATE < @D_INVOICE_END_DATE   
 --SELECT DISTINCT S_EMPLOYEE_ID INTO #ERROR_EMP_ID FROM #ERROR_EMP_LIST    
 SELECT @ERROR_EMP=COALESCE(@ERROR_EMP+';','')+S_PO_IDENTIFIER FROM #S_EXPIRED_PO1   
 --SELECT @S_PO_IDENTIFIER = S_PO_IDENTIFIER FROM #S_PO_IDENTIFIER  
 SET @STATUS_VALUE = 409          
 SET @STATUS_DESCRIPTION =  'PO expired for :- ' + @ERROR_EMP  
 DROP TABLE IF EXISTS #PO_DATE1  
 DROP TABLE IF EXISTS #S_EXPIRED_PO1  
 --INSERT INTO #TEMP_VALIDATION VALUES (@STATUS_VALUE,@STATUS_DESCRIPTION)  
END  
  
else  
BEGIN  
  
UPDATE B SET   
B.D_FROM_DATE=case when A.D_PO_FROM_DATE> isnull(B.D_FROM_DATE,A.D_PO_FROM_DATE) then A.D_PO_FROM_DATE else isnull(B.D_FROM_DATE,A.D_PO_FROM_DATE) END  
,B.D_TO_DATE=case when A.D_PO_TO_DATE> isnull(B.D_TO_DATE,A.D_PO_TO_DATE)  then isnull(B.D_TO_DATE,A.D_PO_TO_DATE)  else A.D_PO_TO_DATE END  
FROM M_TB_PO_MASTER_O2C A,#TMP_INVOICE_CONSOLIDATION_MAPPING B  
WHERE A.S_CUSTOMER_ID=B.S_PO_CUSTOMER_ID AND A.S_BILLING_MODE=B.S_BILLING_TYPE AND A.S_PO_IDENTIFIER=B.S_PO_IDENTIFIER  
AND N_PO_STATUS IN(4,5) AND N_FIN_STATUS=2  
END  
  
SET @countnumber = @countnumber  + 1    
drop table IF EXISTS #PO_DATE1  
END  
END  
   
  
IF NOT EXISTS(SELECT 'X' FROM #TMP_INVOICE_CONSOLIDATION_MAPPING) and @sow_id is not null  
BEGIN   
  
 SET @STATUS_VALUE = 409          
 SET @STATUS_DESCRIPTION = 'Please configure Invoice Mapping.'  
END  
ELSE   
BEGIN  
  
------ Table data clean up for already existing records to restrict the duplicates ------  
/*  
SELECT DISTINCT BAT_INV.S_CUSTOMER_ID,BAT_INV.S_BILLING_TYPE,BAT_INV.N_SOW_ID,BAT_INV.N_BATCH_NO,BAT_INV.S_DRAFT_INVOICE_NO,INV.N_INVOICE_STATUS   
INTO #TEMP_DELETE  
FROM T_TB_INVOICE_CONSOLIDATION_O2C INV,T_TB_INVOICE_CONSOLIDATION_BUFFER_BATCH_O2C BAT_INV  
WHERE INV.N_BATCH_NO=BAT_INV.N_BATCH_NO  
--AND INV.S_DRAFT_INVOICE_NO=BAT_INV.S_DRAFT_INVOICE_NO  
AND BAT_INV.S_CUSTOMER_ID=@Customer_id AND BAT_INV.S_BILLING_TYPE=@billing_type   
---AND BAT_INV.N_SOW_ID IN(SELECT [SOW_ID] FROM #TEMP_INPUT_PARAMS)  
AND INV.N_INVOICE_STATUS in(1)  
  
DELETE FROM T_TB_INVOICE_CONSOLIDATION_LEVEL2_O2C WHERE S_DRAFT_INVOICE_NO IN (SELECT S_DRAFT_INVOICE_NO FROM #TEMP_DELETE)  
DELETE FROM T_TB_INVOICE_CONSOLIDATION_LEVEL1_O2C WHERE S_DRAFT_INVOICE_NO IN (SELECT S_DRAFT_INVOICE_NO FROM #TEMP_DELETE)   
DELETE FROM T_TB_INVOICE_CONSOLIDATION_O2C WHERE N_INVOICE_STATUS=1 and N_BATCH_NO IN (SELECT N_BATCH_NO FROM #TEMP_DELETE)  
DELETE FROM T_TB_INVOICE_CONSOLIDATION_BUFFER_BATCH_O2C WHERE N_BATCH_NO IN (SELECT N_BATCH_NO FROM #TEMP_DELETE)  
*/  
--CURRENT MONTH & YEAR CURRENCY RATE  
 DECLARE @N_MONTH INT=MONTH(GETDATE()),@N_YEAR INT=YEAR(GETDATE())  
  
 /* Performance Issue fixes done by Surendiran S (43622) - Start */  
  
-- SELECT * INTO #PS_HX_CUR_RMG_VW FROM [FINANCEDB].FIN90PRD.dbo.PS_HX_CUR_RMG_VW         
                  
--  SELECT A.FROM_CUR, A.TO_CUR, A.CUR_RT_TYPE, (CONVERT(CHAR(10),A.EFFDT,121)) EFFDT,A.CUR_EXCHNG_RT into #TEMP_CURRENCY_RATE           
--  FROM #PS_HX_CUR_RMG_VW A             
--  WHERE A.EFFDT =             
--        (SELECT MAX(A_ED.EFFDT) FROM #PS_HX_CUR_RMG_VW A_ED             
--         WHERE A.FROM_CUR = A_ED.FROM_CUR             
--         AND A.TO_CUR = A_ED.TO_CUR             
--         AND A.CUR_RT_TYPE = A_ED.CUR_RT_TYPE             
--         AND MONTH(A_ED.EFFDT) <= SUBSTRING(CONVERT(CHAR,@N_MONTH,121), 1, 10)           
--   AND YEAR(A_ED.EFFDT) <= SUBSTRING(CONVERT(CHAR,@N_YEAR,121), 1, 10))          
----AND A.FROM_CUR='AUD' AND A.TO_CUR='USD'            
--             AND A.CUR_RT_TYPE='CLOSE'     
  
SELECT * INTO #TEMP_CURRENCY_RATE FROM (  
SELECT ROW_NUMBER() OVER(PARTITION BY FROM_CUR,TO_CUR ORDER BY FROM_CUR,TO_CUR,EFFDT DESC) AS ROW_NUM,FROM_CUR,TO_CUR,EFFDT,CUR_EXCHNG_RT FROM [FINANCEDB].FIN90PRD.dbo.PS_HX_CUR_RMG_VW WHERE CUR_RT_TYPE='CLOSE'  
AND MONTH(EFFDT) <= SUBSTRING(CONVERT(CHAR,@N_MONTH,121), 1, 10)           
   AND YEAR(EFFDT) <= SUBSTRING(CONVERT(CHAR,@N_YEAR,121), 1, 10)  
 )CUR WHERE CUR.ROW_NUM=1  
/* Performance Issue fixes done by Surendiran S (43622) - End */  
  
   --Currency coversion from "Rate card currency -> USD -> Billing currency"  
    SELECT A.FROM_CUR,B.TO_CUR,CUR_EXCHNG_RT=(A.CUR_EXCHNG_RT*B.CUR_EXCHNG_RT) INTO #TEMP_CURRENCY FROM  
     (SELECT * FROM #TEMP_CURRENCY_RATE where  TO_CUR='USD') A,  
    (SELECT * FROM #TEMP_CURRENCY_RATE where from_cur='USD' ) B     
  
 ------ Table data clean up for already existing records to restrict the duplicates ------  
  
DECLARE @SQLInsert varchar(max)  
IF(@billing_type='T&M')  
BEGIN  
 --IF(ISNULL(@sow_id,'')<>'')  
 --BEGIN  
  --Added by rasavalli - performance fix - 03-25-2021 - INCT0034391  
  SELECT N_PROJ_INVOICE_ID,MAX(N_VERSION_NO) AS N_VERSION_NO INTO #MAXVERSIONSHOW  
  FROM M_RT_BILLING_SHEET_SHOW_VERSION   
  WHERE N_VER_YEAR>2019  
  GROUP BY N_PROJ_INVOICE_ID  
  
    ---------------------Devi R--June 16 2021  
  SELECT N_VER_MONTH,N_VER_YEAR,ISNULL(S_EMPLOYEE_ID,'') S_EMPLOYEE_ID,ISNULL(S_LOCATION,'') AS S_LOCATION  
  ,N_RATE_ID,MAX(N_EMP_PROJ_INVOICE_ID) AS N_EMP_PROJ_INVOICE_ID  
  ,'TIMESHEET' AS S_SOURCE,N_PROJ_INVOICE_ID,MAX(N_VERSION_NO) AS N_VERSION_NO  
  ,min(D_START_DATE) AS D_START_DATE,MAX(D_END_DATE) AS D_END_DATE  
  ,S_OTHERS_COMP_TYPE,N_OTHERS_PROJ_INVOICE_ID,RT_STATUS INTO #SHOW_VERSION FROM M_RT_BILLING_SHEET_SHOW_VERSION PRJINVOICE WITH(NOLOCK)  
  GROUP BY N_VER_MONTH,N_VER_YEAR,S_EMPLOYEE_ID,S_LOCATION,N_PROJ_INVOICE_ID  
  ,N_VERSION_NO,N_RATE_ID,S_OTHERS_COMP_TYPE,N_OTHERS_PROJ_INVOICE_ID,RT_STATUS HAVING N_VERSION_NO IN (  
  
  SELECT N_VERSION_NO  
     FROM #MAXVERSIONSHOW SUB  
     WHERE PRJINVOICE.N_PROJ_INVOICE_ID = SUB.N_PROJ_INVOICE_ID)  
  -------------------------  
  --select * from #SHOW_VERSION where N_PROJ_INVOICE_ID=965956 and N_VER_MONTH=6  
  SELECT cast(@batch_no as varchar(50)) AS N_BATCH_NO,  
   MAP.S_CUSTOMER_ID  
   ,MAP.S_BILLING_TYPE  
   --,substring(DateName( month , DateAdd( month , BILLVERSION.N_VER_MONTH , -1 ) ),1,3) AS 'S_BILLING_CYCLE'  
   --,DateName( month , DateAdd( month , BILLVERSION.N_VER_MONTH , -1 ) ) AS 'S_BILLING_CYCLE'  
   ,CONVERT(varchar, INVPERIOD.D_INVOICE_START_DATE, 103)+' - '+CONVERT(varchar, INVPERIOD.D_INVOICE_END_DATE, 103)  AS 'S_BILLING_CYCLE'  
   ,BILLVERSION.N_VER_MONTH AS 'N_MONTH'  
   ,BILLVERSION.N_VER_YEAR AS 'N_YEAR'  
   ,MAP.N_MAPPING_ID  
   ,MAP.N_SOW_ID  
   ,MAP.N_MILESTONE_ID  
   ,ISNULL(MAP.S_MILESTONE_NAME,'') S_MILESTONE_NAME  
   --,MAP.IS_SOW_LEVEL  
   --,MAP.IS_EMPLOYEE_LEVEL  
   ,0 as IS_SOW_LEVEL  
   ,0 as IS_EMPLOYEE_LEVEL  
   ,ISNULL(BILLVERSION.S_EMPLOYEE_ID,'') S_EMPLOYEE_ID  
   ,MAP.N_SERVICE_TRACK  
   ,MAP.N_SCHEDULE  
   --,MAP.D_FROM_DATE  
   --,MAP.D_TO_DATE  
   ,DAILY_TMSHEET.D_TIMESHEET_DATE AS D_FROM_DATE  
   ,DAILY_TMSHEET.D_TIMESHEET_DATE AS D_TO_DATE  
   ,ISNULL(MAP.N_PO_ID,0) N_PO_ID  
   ,isnull(MAP.S_PO_IDENTIFIER,'') AS S_PO_IDENTIFIER  
   --,case when @Is_PO_key_mandatory='YES' THEN ISNULL(MAP.S_PO_REFERENCE,'') ELSE '' END) S_PO_REFERENCE  
   ,isnull(MAP.S_PO_REFERENCE,'') as S_PO_REFERENCE  
   ,isnull(ltrim(rtrim(MAP.S_PO_CUSTOMER_ID)),'') as S_PO_CUSTOMER_ID  
   ,isnull(MAP.S_INVOICING_EXTRA_INFO1,'') as S_INVOICING_EXTRA_INFO1  
   ,isnull(MAP.S_INVOICING_EXTRA_INFO2,'') as S_INVOICING_EXTRA_INFO2  
   ,isnull(MAP.S_INVOICING_EXTRA_INFO3,'') as S_INVOICING_EXTRA_INFO3  
   ,isnull(MAP.S_INVOICING_EXTRA_INFO4,'') as S_INVOICING_EXTRA_INFO4  
   ,isnull(MAP.S_INVOICING_EXTRA_INFO5,'') as S_INVOICING_EXTRA_INFO5  
   ,isnull(MAP.S_INVOICING_EXTRA_INFO6,'') as S_INVOICING_EXTRA_INFO6  
   --,(MAP.N_CONTRIBUTION_PERCENT * (BILLVERSION.NETINVOICEVALUE - isnull(BILLVERSION.N_O2C_INVOICED_VALUE, 0))) / 100 AS N_VALUE  
   --,(MAP.N_CONTRIBUTION_PERCENT * (BILLVERSION.NETINVOICEVALUE-isnull(BILLVERSION.N_O2C_INVOICED_VALUE,0))) / 100 AS N_OLD_VALUE  
   ,(MAP.N_CONTRIBUTION_PERCENT * (DAILY_TMSHEET.N_INVOICE_VALUE-isnull(DAILY_TMSHEET.N_O2C_INVOICE_VALUE,0))) / 100 AS N_VALUE  
      
   --,(MAP.N_CONTRIBUTION_PERCENT * (BILLVERSION.N_NETINVOICE_HRS-isnull(BILLVERSION.N_O2C_INVOICED_HRS,0))) / 100 AS N_OLD_UNIT  
   ,(MAP.N_CONTRIBUTION_PERCENT * (DAILY_TMSHEET.N_INVOICED_HOURS-isnull(DAILY_TMSHEET.N_O2C_INVOICED_HOURS,0))) / 100 AS N_UNIT  
   ,FINBUPROFILE.N_RATE  
   ,SOW.S_CURRENCY as S_BILLING_CURRENCY  
   ,INVPERIOD.S_FIN_BU as S_BUINESS_UNIT  
   ,SOW.S_FINANCE_ID as  S_FIN_ID  
   ,'' as S_ORDER_ID  
  
   ,ISNULL(BILLVERSION.S_LOCATION,'') AS S_EXECUTION_MODEL  
   ,BILLVERSION.N_RATE_ID  
   ,FINBUPROFILE.S_PROFILE_NAME AS S_PROFILE   
   ,BILLVERSION.N_EMP_PROJ_INVOICE_ID AS N_DATA_TRACK_ID  
   --,BILLVERSION.NETINVOICEVALUE  
   ,MAP.N_CONTRIBUTION_PERCENT  
   --,(BILLVERSION.NETINVOICEVALUE-((MAP.N_CONTRIBUTION_PERCENT * BILLVERSION.NETINVOICEVALUE) / 100)) AS N_OLD_ACCRUED_VALUE  
   ,(DAILY_TMSHEET.N_INVOICED_HOURS-((MAP.N_CONTRIBUTION_PERCENT * DAILY_TMSHEET.N_INVOICED_HOURS) / 100)) AS N_ACCRUED_VALUE  
   ,1 AS N_NIVOICE_STATUS  
   ,BILLVERSION.S_SOURCE  
   ,BILLVERSION.S_OTHERS_COMP_TYPE  
   ,'' AS S_OTE  
   ,BILLVERSION.N_PROJ_INVOICE_ID  
   ,BILLVERSION.N_VERSION_NO  
   ,BILLVERSION.N_OTHERS_PROJ_INVOICE_ID  
   ,DAILY_TMSHEET.N_EMP_TIMESHEET_INVOICE_ID  
   ,CASE WHEN MAP.S_CREATED_BY='AUTO' THEN 0 ELSE MAP.N_ID END  AS N_INVOICE_MAP_ID  
   ,FINBUPROFILE.S_CURRENCY AS RATE_CARD_CURRENCY  
   ,CAST(NULL AS FLOAT) N_BILL_INV_VALUE  
   ,CAST(NULL AS varchar(100)) AS TAX_CODE  
   ,CAST (NULL AS DECIMAL(10,2)) AS TAX_PERCENTAGE  
   ,CAST(NULL AS varchar(100)) AS TAX_DESCRIPTION  
   --INTO #TEMP_T&M_INV_CONSOL  
   --INTO #TEMP_TIME_ADJ_INV_CONSOL  
   into #TEMP_TIME_ADJ_INV_CONSOL_TIMESHEET  
   FROM #SHOW_VERSION BILLVERSION  
   INNER JOIN M_RT_PROJECT_INVOICE PRJINVOICE  WITH(NOLOCK) ON PRJINVOICE.N_PROJ_INVOICE_ID = BILLVERSION.N_PROJ_INVOICE_ID  
   INNER JOIN M_RT_INVOICE_PERIOD INVPERIOD  WITH(NOLOCK) ON INVPERIOD.N_INVOICE_PERIOD_ID = PRJINVOICE.N_INVOICE_PERIOD_ID  
   INNER JOIN M_RT_SOW_MASTER SOW ON SOW.N_SOW_ID = INVPERIOD.N_SOW_ID  
   INNER JOIN M_RT_FINANCE_PROJECT FINPROJ ON INVPERIOD.S_FIN_INFO_ID = FINPROJ.S_FIN_INFO_ID  
    AND PRJINVOICE.N_FIN_PROJ_ID = FINPROJ.N_FIN_PROJ_ID  
   INNER JOIN RESOURCE_MGMT.DBO.M_PROJECT_REGISTER PRJREGISTER ON PRJREGISTER.S_PROJECT_ID = FINPROJ.S_PROJECT_ID  
   INNER JOIN M_TB_EMPLOYEE_TIMESHEET_INVOICE_O2C DAILY_TMSHEET WITH(NOLOCK) ON PRJREGISTER.S_PROJECT_ID=DAILY_TMSHEET.S_PROJECT_ID    
   AND DAILY_TMSHEET.S_EMPLOYEE_ID=BILLVERSION.S_EMPLOYEE_ID   
   AND DAILY_TMSHEET.N_PROJ_INVOICE_ID=BILLVERSION.N_PROJ_INVOICE_ID  
   AND (DAILY_TMSHEET.D_TIMESHEET_DATE BETWEEN BILLVERSION.D_START_DATE AND BILLVERSION.D_END_DATE)  
   --AND CAST(DAILY_TMSHEET.N_RATE AS DECIMAL(18,2))= CAST(BILLVERSION.N_RATE AS DECIMAL(18,2))--rate removed due to mismatches--Devi R--9-July-2021  
   and DAILY_TMSHEET.N_UNBILLED_REASON_ID3=BILLVERSION.N_RATE_ID  
   --AND BILLVERSION.RT_STATUS=DAILY_TMSHEET.RT_STATUS  
     
  
   --INNER JOIN DBO.[T_TB_INVOICE_MAPPING_O2C] MAP ON MAP.N_SOW_ID = SOW.N_SOW_ID  
   INNER JOIN #TMP_INVOICE_CONSOLIDATION_MAPPING MAP ON MAP.N_SOW_ID = SOW.N_SOW_ID --AND MAP.S_EMPLOYEE_ID = BILLVERSION.S_EMPLOYEE_ID --commenting as it blocking the sow mapping invoices - rasavalli - 03-18-2021-INCT0033960  
   INNER JOIN [dbo].[M_RT_FINANCE_BU] BU ON BU.N_SOW_ID=SOW.N_SOW_ID and BU.S_BUSINESS_UNIT=INVPERIOD.S_FIN_BU  
   INNER JOIN M_RT_FINANCE_BU_PROFILE FINBUPROFILE ON BILLVERSION.N_RATE_ID=FINBUPROFILE.N_FIN_BU_PROFILE_ID  
   AND  BU.N_FINANCE_BU_ID=FINBUPROFILE.N_FINANCE_BU_ID  
   --INNER JOIN [dbo].[M_RT_FINANCE_BU_PROFILE] BU_PROF ON BU_PROF.N_FINANCE_BU_ID=BU.N_FINANCE_BU_ID  
   --INNER JOIN [dbo].[M_RT_EMPLOYEE_PROJ_INVOICE] EMP_PRJ ON EMP_PRJ.N_PROJ_INVOICE_ID=PRJINVOICE.N_PROJ_INVOICE_ID AND EMP_PRJ.N_RATE=BU_PROF.N_RATE  
   INNER JOIN #TEMP_INPUT_PARAMS INPUT_PARAMS ON CAST(INPUT_PARAMS.SOW_ID AS INT)=SOW.N_SOW_ID   
       
   WHERE   
   BILLVERSION.N_VER_YEAR>2019  
   AND SOW.S_CUSTOMER_ID = @Customer_id  
    AND BILLVERSION.N_VERSION_NO IN (  
     --SELECT MAX(SUB.N_VERSION_NO)  
     --FROM M_RT_BILLING_SHEET_SHOW_VERSION SUB  
     --WHERE PRJINVOICE.N_PROJ_INVOICE_ID = SUB.N_PROJ_INVOICE_ID --AND MAP.S_EMPLOYEE_ID = SUB.S_EMPLOYEE_ID --commenting as it blocking the sow mapping invoices - rasavalli - 03-18-2021-INCT0033960  
     --AND SUB.N_VER_YEAR>2018  
     --Added by rasavalli - performance fix - 03-25-2021 - INCT0034391  
     SELECT N_VERSION_NO  
     FROM #MAXVERSIONSHOW SUB  
     WHERE PRJINVOICE.N_PROJ_INVOICE_ID = SUB.N_PROJ_INVOICE_ID  
     )  
     AND SOW.S_BILLING_TYPE=@billing_type  
     AND INPUT_PARAMS.BILLING_TYPE_REF='T&M'  
     AND  PRJREGISTER.S_PROJECT_ID=INPUT_PARAMS.[VALUE]  
     AND CAST(INPUT_PARAMS.N_INVOICE_PERIOD_ID AS INT)=INVPERIOD.N_INVOICE_PERIOD_ID  
     --AND SOW.N_SOW_ID IN(select string from dbo.splitstring(@sow_id,','))  
     --AND BILLVERSION.S_SOURCE IN('TIMESHEET','ADJ')--- Fetching only timesheet skipping expense & Adjustment  
     AND BILLVERSION.S_SOURCE IN('TIMESHEET')--- Fetching only timesheet skipping expense & Adjustment  
    --AND BILLVERSION.RT_STATUS = 10 -- T&M STAUTS DELIVERY SUBMITTED  
    AND BILLVERSION.RT_STATUS in(15,16) -- T&M STAUTS -- B.S --Sent to consolidation  
    AND MAP.N_CURRENT_STATUS = 4 --INVOICE MAPPING APROVED  
    AND MAP.N_INVOICE_STATUS=6  
    --AND SOW.S_ORDER_ID IS NOT NULL  
    AND BILLVERSION.N_VER_YEAR=ISNULL(INPUT_PARAMS.[N_YEAR],0)  
    AND BILLVERSION.N_VER_MONTH=ISNULL(INPUT_PARAMS.[N_MONTH],0)  
    AND (DAILY_TMSHEET.D_TIMESHEET_DATE BETWEEN MAP.D_FROM_DATE AND MAP.D_TO_DATE) /*SOW RESTRICTION*/  
    AND(  
    (isnull(MAP.IS_SOW_LEVEL,0)=1 and (  
     (  
      BILLVERSION.d_START_DATE BETWEEN MAP.D_FROM_DATE  
       AND MAP.D_TO_DATE  
      )  
     OR (  
      BILLVERSION.d_end_DATE BETWEEN MAP.D_FROM_DATE  
       AND MAP.D_TO_DATE  
      )  
     OR (  
      MAP.D_FROM_DATE BETWEEN BILLVERSION.d_START_DATE  
       AND BILLVERSION.d_end_DATE  
      )  
     OR (  
      MAP.D_TO_DATE BETWEEN BILLVERSION.d_START_DATE  
       AND BILLVERSION.d_end_DATE  
      )  
     ))   
     or  
     (  
      isnull(MAP.IS_EMPLOYEE_LEVEL,0)=1   
      and BILLVERSION.S_EMPLOYEE_ID=MAP.S_EMPLOYEE_ID  
      and (  
        (  
         BILLVERSION.d_START_DATE BETWEEN MAP.D_FROM_DATE  
          AND MAP.D_TO_DATE  
         )  
        OR (  
         BILLVERSION.d_end_DATE BETWEEN MAP.D_FROM_DATE  
          AND MAP.D_TO_DATE  
         )  
        OR (  
         MAP.D_FROM_DATE BETWEEN BILLVERSION.d_START_DATE  
          AND BILLVERSION.d_end_DATE  
         )  
        OR (  
         MAP.D_TO_DATE BETWEEN BILLVERSION.d_START_DATE  
          AND BILLVERSION.d_end_DATE  
         )  
      )  
     )  
     )  
  ----------------------  
   SELECT cast(@batch_no as varchar(50)) AS N_BATCH_NO,  
   MAP.S_CUSTOMER_ID  
   ,MAP.S_BILLING_TYPE  
   --,substring(DateName( month , DateAdd( month , BILLVERSION.N_VER_MONTH , -1 ) ),1,3) AS 'S_BILLING_CYCLE'  
   --,DateName( month , DateAdd( month , BILLVERSION.N_VER_MONTH , -1 ) ) AS 'S_BILLING_CYCLE'  
   ,CONVERT(varchar, INVPERIOD.D_INVOICE_START_DATE, 103)+' - '+CONVERT(varchar, INVPERIOD.D_INVOICE_END_DATE, 103)  AS 'S_BILLING_CYCLE'  
   ,BILLVERSION.N_VER_MONTH AS 'N_MONTH'  
   ,BILLVERSION.N_VER_YEAR AS 'N_YEAR'  
   ,MAP.N_MAPPING_ID  
   ,MAP.N_SOW_ID  
   ,MAP.N_MILESTONE_ID  
   ,ISNULL(MAP.S_MILESTONE_NAME,'') S_MILESTONE_NAME  
   --,MAP.IS_SOW_LEVEL  
   --,MAP.IS_EMPLOYEE_LEVEL  
   ,0 as IS_SOW_LEVEL  
   ,0 as IS_EMPLOYEE_LEVEL  
   ,ISNULL(BILLVERSION.S_EMPLOYEE_ID,'') S_EMPLOYEE_ID  
   ,MAP.N_SERVICE_TRACK  
   ,MAP.N_SCHEDULE  
   --,MAP.D_FROM_DATE  
   --,MAP.D_TO_DATE  
   ,DAILY_TMSHEET.D_TIMESHEET_DATE AS D_FROM_DATE  
   ,DAILY_TMSHEET.D_TIMESHEET_DATE AS D_TO_DATE  
   ,ISNULL(MAP.N_PO_ID,0) N_PO_ID  
   ,isnull(MAP.S_PO_IDENTIFIER,'') AS S_PO_IDENTIFIER  
   --,case when @Is_PO_key_mandatory='YES' THEN ISNULL(MAP.S_PO_REFERENCE,'') ELSE '' END) S_PO_REFERENCE  
   ,isnull(MAP.S_PO_REFERENCE,'') as S_PO_REFERENCE  
   ,isnull(ltrim(rtrim(MAP.S_PO_CUSTOMER_ID)),'') as S_PO_CUSTOMER_ID  
   ,isnull(MAP.S_INVOICING_EXTRA_INFO1,'') as S_INVOICING_EXTRA_INFO1  
   ,isnull(MAP.S_INVOICING_EXTRA_INFO2,'') as S_INVOICING_EXTRA_INFO2  
   ,isnull(MAP.S_INVOICING_EXTRA_INFO3,'') as S_INVOICING_EXTRA_INFO3  
   ,isnull(MAP.S_INVOICING_EXTRA_INFO4,'') as S_INVOICING_EXTRA_INFO4  
   ,isnull(MAP.S_INVOICING_EXTRA_INFO5,'') as S_INVOICING_EXTRA_INFO5  
   ,isnull(MAP.S_INVOICING_EXTRA_INFO6,'') as S_INVOICING_EXTRA_INFO6  
   --,(MAP.N_CONTRIBUTION_PERCENT * (BILLVERSION.NETINVOICEVALUE - isnull(BILLVERSION.N_O2C_INVOICED_VALUE, 0))) / 100 AS N_VALUE  
   --,(MAP.N_CONTRIBUTION_PERCENT * (BILLVERSION.NETINVOICEVALUE-isnull(BILLVERSION.N_O2C_INVOICED_VALUE,0))) / 100 AS N_OLD_VALUE  
   ,(MAP.N_CONTRIBUTION_PERCENT * (DAILY_TMSHEET.N_INVOICE_VALUE-isnull(DAILY_TMSHEET.N_O2C_INVOICE_VALUE,0))) / 100 AS N_VALUE  
      
   --,(MAP.N_CONTRIBUTION_PERCENT * (BILLVERSION.N_NETINVOICE_HRS-isnull(BILLVERSION.N_O2C_INVOICED_HRS,0))) / 100 AS N_OLD_UNIT  
   ,(MAP.N_CONTRIBUTION_PERCENT * (DAILY_TMSHEET.N_INVOICED_HOURS-isnull(DAILY_TMSHEET.N_O2C_INVOICED_HOURS,0))) / 100 AS N_UNIT  
   ,FINBUPROFILE.N_RATE  
   ,SOW.S_CURRENCY as S_BILLING_CURRENCY  
   ,INVPERIOD.S_FIN_BU as S_BUINESS_UNIT  
   ,SOW.S_FINANCE_ID as  S_FIN_ID  
   ,'' as S_ORDER_ID  
  
   ,ISNULL(BILLVERSION.S_LOCATION,'') AS S_EXECUTION_MODEL  
   ,BILLVERSION.N_RATE_ID  
   ,FINBUPROFILE.S_PROFILE_NAME AS S_PROFILE   
   ,BILLVERSION.N_EMP_PROJ_INVOICE_ID AS N_DATA_TRACK_ID  
   --,BILLVERSION.NETINVOICEVALUE  
   ,MAP.N_CONTRIBUTION_PERCENT  
   --,(BILLVERSION.NETINVOICEVALUE-((MAP.N_CONTRIBUTION_PERCENT * BILLVERSION.NETINVOICEVALUE) / 100)) AS N_OLD_ACCRUED_VALUE  
   ,(DAILY_TMSHEET.N_INVOICED_HOURS-((MAP.N_CONTRIBUTION_PERCENT * DAILY_TMSHEET.N_INVOICED_HOURS) / 100)) AS N_ACCRUED_VALUE  
   ,1 AS N_NIVOICE_STATUS  
   --,BILLVERSION.S_SOURCE  
   ,'TIMESHEET' as S_SOURCE  
   ,BILLVERSION.S_OTHERS_COMP_TYPE  
   ,'' AS S_OTE  
   ,BILLVERSION.N_PROJ_INVOICE_ID  
   ,BILLVERSION.N_VERSION_NO  
   ,BILLVERSION.N_OTHERS_PROJ_INVOICE_ID  
   ,DAILY_TMSHEET.N_EMP_TIMESHEET_INVOICE_ID  
   ,CASE WHEN MAP.S_CREATED_BY='AUTO' THEN 0 ELSE MAP.N_ID END  AS N_INVOICE_MAP_ID  
   ,FINBUPROFILE.S_CURRENCY AS RATE_CARD_CURRENCY  
   ,CAST(NULL AS FLOAT) N_BILL_INV_VALUE  
   ,CAST(NULL AS varchar(100)) AS TAX_CODE  
   ,CAST (NULL AS DECIMAL(10,2)) AS TAX_PERCENTAGE  
   ,CAST(NULL AS varchar(100)) AS TAX_DESCRIPTION  
   --INTO #TEMP_T&M_INV_CONSOL  
   INTO #TEMP_TIME_ADJ_INV_CONSOL_SPLIT_MODIFY_ADJ  
   FROM #SHOW_VERSION BILLVERSION  
   INNER JOIN M_RT_PROJECT_INVOICE PRJINVOICE  WITH(NOLOCK) ON PRJINVOICE.N_PROJ_INVOICE_ID = BILLVERSION.N_PROJ_INVOICE_ID  
   INNER JOIN M_RT_INVOICE_PERIOD INVPERIOD  WITH(NOLOCK) ON INVPERIOD.N_INVOICE_PERIOD_ID = PRJINVOICE.N_INVOICE_PERIOD_ID  
   INNER JOIN M_RT_SOW_MASTER SOW ON SOW.N_SOW_ID = INVPERIOD.N_SOW_ID  
   INNER JOIN M_RT_FINANCE_PROJECT FINPROJ ON INVPERIOD.S_FIN_INFO_ID = FINPROJ.S_FIN_INFO_ID  
    AND PRJINVOICE.N_FIN_PROJ_ID = FINPROJ.N_FIN_PROJ_ID  
   INNER JOIN RESOURCE_MGMT.DBO.M_PROJECT_REGISTER PRJREGISTER ON PRJREGISTER.S_PROJECT_ID = FINPROJ.S_PROJECT_ID  
   INNER JOIN M_TB_EMPLOYEE_TIMESHEET_INVOICE_O2C DAILY_TMSHEET WITH(NOLOCK) ON PRJREGISTER.S_PROJECT_ID=DAILY_TMSHEET.S_PROJECT_ID    
   AND DAILY_TMSHEET.S_EMPLOYEE_ID=BILLVERSION.S_EMPLOYEE_ID   
   AND DAILY_TMSHEET.N_PROJ_INVOICE_ID=BILLVERSION.N_PROJ_INVOICE_ID  
   AND (DAILY_TMSHEET.D_TIMESHEET_DATE BETWEEN BILLVERSION.D_START_DATE AND BILLVERSION.D_END_DATE)  
   --AND CAST(DAILY_TMSHEET.N_RATE AS DECIMAL(18,2))= CAST(BILLVERSION.N_RATE AS DECIMAL(18,2)) --rate removed due to mismatches--Devi R--9-July-2021  
   and DAILY_TMSHEET.N_UNBILLED_REASON_ID3=BILLVERSION.N_RATE_ID  
   --AND BILLVERSION.RT_STATUS=DAILY_TMSHEET.RT_STATUS  
     
  
   --INNER JOIN DBO.[T_TB_INVOICE_MAPPING_O2C] MAP ON MAP.N_SOW_ID = SOW.N_SOW_ID  
   INNER JOIN #TMP_INVOICE_CONSOLIDATION_MAPPING MAP ON MAP.N_SOW_ID = SOW.N_SOW_ID  --AND MAP.S_EMPLOYEE_ID = BILLVERSION.S_EMPLOYEE_ID --commenting as it blocking the sow mapping invoices - rasavalli - 03-18-2021-INCT0033960  
   INNER JOIN [dbo].[M_RT_FINANCE_BU] BU ON BU.N_SOW_ID=SOW.N_SOW_ID and BU.S_BUSINESS_UNIT=INVPERIOD.S_FIN_BU  
   INNER JOIN M_RT_FINANCE_BU_PROFILE FINBUPROFILE ON BILLVERSION.N_RATE_ID=FINBUPROFILE.N_FIN_BU_PROFILE_ID  
   AND  BU.N_FINANCE_BU_ID=FINBUPROFILE.N_FINANCE_BU_ID  
   --INNER JOIN [dbo].[M_RT_FINANCE_BU_PROFILE] BU_PROF ON BU_PROF.N_FINANCE_BU_ID=BU.N_FINANCE_BU_ID  
   --INNER JOIN [dbo].[M_RT_EMPLOYEE_PROJ_INVOICE] EMP_PRJ ON EMP_PRJ.N_PROJ_INVOICE_ID=PRJINVOICE.N_PROJ_INVOICE_ID AND EMP_PRJ.N_RATE=BU_PROF.N_RATE  
   INNER JOIN #TEMP_INPUT_PARAMS INPUT_PARAMS ON CAST(INPUT_PARAMS.SOW_ID AS INT)=SOW.N_SOW_ID   
       
   WHERE   
   BILLVERSION.N_VER_YEAR>2019  
   AND SOW.S_CUSTOMER_ID = @Customer_id  
    AND BILLVERSION.N_VERSION_NO IN (  
     --SELECT MAX(SUB.N_VERSION_NO)  
     --FROM M_RT_BILLING_SHEET_SHOW_VERSION SUB  
     --WHERE PRJINVOICE.N_PROJ_INVOICE_ID = SUB.N_PROJ_INVOICE_ID --AND MAP.S_EMPLOYEE_ID = SUB.S_EMPLOYEE_ID --commenting as it blocking the sow mapping invoices - rasavalli - 03-18-2021-INCT0033960  
     --AND SUB.N_VER_YEAR>2018  
     --Added by rasavalli - performance fix - 03-25-2021 - INCT0034391  
     SELECT N_VERSION_NO  
     FROM #MAXVERSIONSHOW SUB  
     WHERE PRJINVOICE.N_PROJ_INVOICE_ID = SUB.N_PROJ_INVOICE_ID  
     )  
     AND SOW.S_BILLING_TYPE=@billing_type  
     AND INPUT_PARAMS.BILLING_TYPE_REF='T&M'  
     AND  PRJREGISTER.S_PROJECT_ID=INPUT_PARAMS.[VALUE]  
     AND CAST(INPUT_PARAMS.N_INVOICE_PERIOD_ID AS INT)=INVPERIOD.N_INVOICE_PERIOD_ID  
     --AND SOW.N_SOW_ID IN(select string from dbo.splitstring(@sow_id,','))  
     AND BILLVERSION.S_SOURCE IN('TIMESHEET','ADJ')--- Fetching only timesheet skipping expense & Adjustment  
     --AND BILLVERSION.S_SOURCE IN('TIMESHEET')--- Fetching only timesheet skipping expense & Adjustment  
    --AND BILLVERSION.RT_STATUS = 10 -- T&M STAUTS DELIVERY SUBMITTED  
    AND BILLVERSION.RT_STATUS in(15,16) -- T&M STAUTS -- B.S --Sent to consolidation  
    AND MAP.N_CURRENT_STATUS = 4 --INVOICE MAPPING APROVED  
    AND MAP.N_INVOICE_STATUS=6  
    --AND SOW.S_ORDER_ID IS NOT NULL  
    AND BILLVERSION.N_VER_YEAR=ISNULL(INPUT_PARAMS.[N_YEAR],0)  
    AND BILLVERSION.N_VER_MONTH=ISNULL(INPUT_PARAMS.[N_MONTH],0)  
    AND (DAILY_TMSHEET.D_TIMESHEET_DATE BETWEEN MAP.D_FROM_DATE AND MAP.D_TO_DATE) /*SOW RESTRICTION*/  
    AND(  
    (isnull(MAP.IS_SOW_LEVEL,0)=1 and (  
     (  
      BILLVERSION.d_START_DATE BETWEEN MAP.D_FROM_DATE  
       AND MAP.D_TO_DATE  
      )  
     OR (  
      BILLVERSION.d_end_DATE BETWEEN MAP.D_FROM_DATE  
       AND MAP.D_TO_DATE  
      )  
     OR (  
      MAP.D_FROM_DATE BETWEEN BILLVERSION.d_START_DATE  
       AND BILLVERSION.d_end_DATE  
      )  
     OR (  
      MAP.D_TO_DATE BETWEEN BILLVERSION.d_START_DATE  
       AND BILLVERSION.d_end_DATE  
      )  
     ))   
     or  
     (  
      isnull(MAP.IS_EMPLOYEE_LEVEL,0)=1   
      and BILLVERSION.S_EMPLOYEE_ID=MAP.S_EMPLOYEE_ID  
      and (  
        (  
         BILLVERSION.d_START_DATE BETWEEN MAP.D_FROM_DATE  
          AND MAP.D_TO_DATE  
         )  
        OR (  
         BILLVERSION.d_end_DATE BETWEEN MAP.D_FROM_DATE  
          AND MAP.D_TO_DATE  
         )  
        OR (  
         MAP.D_FROM_DATE BETWEEN BILLVERSION.d_START_DATE  
          AND BILLVERSION.d_end_DATE  
         )  
        OR (  
         MAP.D_TO_DATE BETWEEN BILLVERSION.d_START_DATE  
          AND BILLVERSION.d_end_DATE  
         )  
      )  
     )  
     )  
     and DAILY_TMSHEET.N_EMP_TIMESHEET_INVOICE_ID not in( select N_EMP_TIMESHEET_INVOICE_ID from  #TEMP_TIME_ADJ_INV_CONSOL_TIMESHEET)  
  
      select * INTO #TEMP_TIME_ADJ_INV_CONSOL  
      from #TEMP_TIME_ADJ_INV_CONSOL_TIMESHEET  
      union all  
      select * from   
      #TEMP_TIME_ADJ_INV_CONSOL_SPLIT_MODIFY_ADJ  
  ----------------------  
    
  SELECT cast(@batch_no AS VARCHAR(50)) AS N_BATCH_NO  
   ,SOW.S_CUSTOMER_ID  
   ,SOW.S_BILLING_TYPE  
   --,substring(DateName( month , DateAdd( month , BILLVERSION.N_VER_MONTH , -1 ) ),1,3) AS 'S_BILLING_CYCLE'  
   --,DateName(month, DateAdd(month, BILLVERSION.N_VER_MONTH, - 1)) AS 'S_BILLING_CYCLE'  
   ,CONVERT(varchar, INVPERIOD.D_INVOICE_START_DATE, 103)+' - '+CONVERT(varchar, INVPERIOD.D_INVOICE_END_DATE, 103)  AS 'S_BILLING_CYCLE'  
   ,BILLVERSION.N_VER_MONTH AS 'N_MONTH'  
   ,BILLVERSION.N_VER_YEAR AS 'N_YEAR'  
   ,@consolidation_Key as N_MAPPING_ID  
   ,SOW.N_SOW_ID  
   ,0 AS N_MILESTONE_ID  
   ,'' AS S_MILESTONE_NAME  
   ,0 AS IS_SOW_LEVEL  
   ,0 AS IS_EMPLOYEE_LEVEL  
   ,ISNULL(BILLVERSION.S_EMPLOYEE_ID,'') S_EMPLOYEE_ID  
   ,0 AS N_SERVICE_TRACK  
   ,0 AS N_SCHEDULE  
   ,BILLVERSION.D_START_DATE AS D_FROM_DATE  
   ,BILLVERSION.D_END_DATE AS D_TO_DATE  
   ,BILLVERSION.N_PO_ID  
   ,isnull(BILLVERSION.S_PO_IDENTIFIER,'') as S_PO_IDENTIFIER  
   ,ISNULL(BILLVERSION.S_PO_REFERENCE,'') as S_PO_REFERENCE  
   ,isnull(BILLVERSION.S_PO_CUSTOMER_ID,'') as S_PO_CUSTOMER_ID  
   ,isnull(BILLVERSION.S_INVOICING_EXTRA_INFO1,'') as S_INVOICING_EXTRA_INFO1  
   ,isnull(BILLVERSION.S_INVOICING_EXTRA_INFO2,'') as S_INVOICING_EXTRA_INFO2  
   ,isnull(BILLVERSION.S_INVOICING_EXTRA_INFO3,'') as S_INVOICING_EXTRA_INFO3  
   ,isnull(BILLVERSION.S_INVOICING_EXTRA_INFO4,'') as S_INVOICING_EXTRA_INFO4  
   ,isnull(BILLVERSION.S_INVOICING_EXTRA_INFO5,'') as S_INVOICING_EXTRA_INFO5  
   ,isnull(BILLVERSION.S_INVOICING_EXTRA_INFO6,'') as S_INVOICING_EXTRA_INFO6  
   --,(MAP.N_CONTRIBUTION_PERCENT * (BILLVERSION.NETINVOICEVALUE - isnull(BILLVERSION.N_O2C_INVOICED_VALUE, 0))) / 100 AS N_VALUE  
   --Reverted by devi - 03-30-2021  
   ,CASE WHEN  ROUND(isnull(BILLVERSION.NETINVOICEVALUE,N_NET_EXPENSE_VALUE),2)-ROUND(isnull(BILLVERSION.N_O2C_INVOICED_VALUE, 0),2) between -1 and 1 THEN 0  
    WHEN BILLVERSION.S_OTHERS_COMP_TYPE IN (  
      'DISC'  
      ,'DISC_PROV'  
      ,'SRV_CRT'  
      ,'PLT'  
      ,'ABR'-- Added by rasavalli - 2/19/2021 - INCT0032408  
      )  
     THEN - 1 * isnull(EXPENSE.N_AMOUNT, 0)  
    ELSE EXPENSE.N_AMOUNT  
    END N_VALUE  
   ,0 AS N_UNIT  
   ,0 AS N_RATE  
   ,SOW.S_CURRENCY AS S_BILLING_CURRENCY  
   ,INVPERIOD.S_FIN_BU AS S_BUINESS_UNIT  
   ,SOW.S_FINANCE_ID AS S_FIN_ID  
   ,'' as S_ORDER_ID  
   ,ISNULL(BILLVERSION.S_LOCATION,'') AS S_EXECUTION_MODEL  
   ,isnull(BILLVERSION.N_RATE_ID,0) as N_RATE_ID  
   ,'' AS S_PROFILE  
   ,BILLVERSION.N_EMP_PROJ_INVOICE_ID AS N_DATA_TRACK_ID  
   --,BILLVERSION.NETINVOICEVALUE  
   ,100 AS N_CONTRIBUTION_PERCENT  
   ,0 AS N_ACCRUED_VALUE  
   ,1 AS N_NIVOICE_STATUS  
   ,'EXPENSES' as S_SOURCE  
   ,BILLVERSION.S_OTHERS_COMP_TYPE  
   ,'' AS S_OTE  
   ,BILLVERSION.N_PROJ_INVOICE_ID  
   ,BILLVERSION.N_VERSION_NO  
   ,BILLVERSION.N_OTHERS_PROJ_INVOICE_ID  
   ,0 N_EMP_TIMESHEET_INVOICE_ID  
   --,CASE WHEN MAP.S_CREATED_BY='AUTO' THEN 0 ELSE MAP.N_ID END  AS N_INVOICE_MAP_ID  
   ,0 N_INVOICE_MAP_ID  
   ,EXPENSE.S_CURRENCY AS RATE_CARD_CURRENCY  
   ,CAST(NULL AS FLOAT) N_BILL_INV_VALUE  
   ,CAST(NULL AS varchar(100)) AS TAX_CODE  
   ,CAST (NULL AS DECIMAL(10,2)) AS TAX_PERCENTAGE  
   ,CAST(NULL AS varchar(100)) AS TAX_DESCRIPTION  
  INTO #TEMP_TNM_EXPENSES_INV_CONSOL  
  FROM M_RT_BILLING_SHEET_SHOW_VERSION BILLVERSION  
  INNER JOIN M_RT_PROJECT_INVOICE PRJINVOICE ON PRJINVOICE.N_PROJ_INVOICE_ID = BILLVERSION.N_PROJ_INVOICE_ID  
  INNER JOIN M_RT_INVOICE_PERIOD INVPERIOD ON INVPERIOD.N_INVOICE_PERIOD_ID = PRJINVOICE.N_INVOICE_PERIOD_ID  
  INNER JOIN M_RT_SOW_MASTER SOW ON SOW.N_SOW_ID = INVPERIOD.N_SOW_ID  
  INNER JOIN M_RT_FINANCE_PROJECT FINPROJ ON INVPERIOD.S_FIN_INFO_ID = FINPROJ.S_FIN_INFO_ID  
   AND PRJINVOICE.N_FIN_PROJ_ID = FINPROJ.N_FIN_PROJ_ID  
  INNER JOIN RESOURCE_MGMT.DBO.M_PROJECT_REGISTER PRJREGISTER ON PRJREGISTER.S_PROJECT_ID = FINPROJ.S_PROJECT_ID  
  INNER JOIN M_TB_OTHERS_PROJ_INVOICE EXPENSE ON EXPENSE.N_OTHERS_PROJ_INVOICE_ID = BILLVERSION.N_OTHERS_PROJ_INVOICE_ID    
      and ROUND(isnull(BILLVERSION.NETINVOICEVALUE,N_NET_EXPENSE_VALUE),2)= ROUND(isnull(EXPENSE.N_AMOUNT, 0),2)  
  INNER JOIN #TEMP_INPUT_PARAMS INPUT_PARAMS ON CAST(INPUT_PARAMS.SOW_ID AS INT)=SOW.N_SOW_ID    
     --INPUT_PARAMS.BILLING_TYPE_REF='T&M' AND BILLVERSION.N_VER_MONTH=INPUT_PARAMS.[N_MONTH] AND BILLVERSION.N_VER_YEAR=INPUT_PARAMS.[N_YEAR]  
     --AND  PRJREGISTER.S_PROJECT_ID=INPUT_PARAMS.[VALUE]  
  WHERE   
  isnull(BILLVERSION.S_OTHERS_COMP_TYPE,'') NOT IN ('DISC_PROV')  
  AND BILLVERSION.N_VER_YEAR>2019  
  AND SOW.S_CUSTOMER_ID = @Customer_id  
   AND BILLVERSION.N_VERSION_NO IN (  
    --SELECT MAX(SUB.N_VERSION_NO)  
    --FROM M_RT_BILLING_SHEET_SHOW_VERSION SUB  
    --WHERE PRJINVOICE.N_PROJ_INVOICE_ID = SUB.N_PROJ_INVOICE_ID  
    --AND SUB.N_VER_YEAR>2018  
    --Added by rasavalli - performance fix - 03-25-2021 - INCT0034391  
    SELECT N_VERSION_NO  
    FROM #MAXVERSIONSHOW SUB  
    WHERE PRJINVOICE.N_PROJ_INVOICE_ID = SUB.N_PROJ_INVOICE_ID  
    )  
   AND SOW.S_BILLING_TYPE = @billing_type  
   AND INPUT_PARAMS.BILLING_TYPE_REF='T&M'  
      AND  PRJREGISTER.S_PROJECT_ID=INPUT_PARAMS.[VALUE]  
   AND CAST(INPUT_PARAMS.N_INVOICE_PERIOD_ID AS INT)=INVPERIOD.N_INVOICE_PERIOD_ID  
   AND BILLVERSION.S_SOURCE IN ('DISC') --- Fetching only timesheet skipping expense & Adjustment  
   --AND BILLVERSION.RT_STATUS = 10 -- T&M STAUTS DELIVERY SUBMITTED  
   AND BILLVERSION.RT_STATUS = 16 -- T&M STAUTS -- B.S --Sent to consolidation  
   --AND MAP.N_CURRENT_STATUS = 4 --INVOICE MAPPING APROVED  
   --AND SOW.S_ORDER_ID IS NOT NULL  
   AND BILLVERSION.N_VER_YEAR=ISNULL(INPUT_PARAMS.[N_YEAR],0)  
   AND BILLVERSION.N_VER_MONTH=ISNULL(INPUT_PARAMS.[N_MONTH],0)  
  
 --END  
 --IF(ISNULL(@ote_id,'')<>'')  
 --BEGIN  
  SELECT CAST(@BATCH_NO AS VARCHAR(50)) AS N_BATCH_NO  
     ,SOW.S_CUSTOMER_ID AS S_CUSTOMER_ID  
     ,SOW.S_BILLING_TYPE AS S_BILLING_TYPE  
     --,DATENAME(MONTH, DATEADD(MONTH, A.N_MONTH, - 1)) AS S_BILLING_CYCLE  
     --First and Last date of the Month and year to fetch the billing cycle  
     ,CONVERT(varchar, DATEADD(month,A.N_MONTH-1,DATEADD(year,A.N_YEAR-1900,0)), 103)+' - '+CONVERT(varchar, DATEADD(day,-1,DATEADD(month,A.N_MONTH,DATEADD(year,A.N_YEAR-1900,0))), 103)  AS 'S_BILLING_CYCLE'  
     ,A.N_MONTH AS N_MONTH  
     ,A.N_YEAR AS N_YEAR  
     ,@consolidation_Key AS N_MAPPING_ID  
     ,A.N_SOW_ID AS N_SOW_ID  
     ,0 AS N_MILESTONE_ID  
     ,'' AS S_MILESTONE_NAME  
     ,0 AS IS_SOW_LEVEL  
     ,0 AS IS_EMPLOYEE_LEVEL  
     ,'' AS S_EMPLOYEE_ID  
     ,0 AS N_SERVICE_TRACK  
     ,0 AS N_SCHEDULE  
     ,NULL AS D_FROM_DATE  
     ,NULL AS D_TO_DATE  
     ,A.N_PO_ID AS N_PO_ID  
     ,isnull(A.S_PO_IDENTIFIER,'') AS S_PO_IDENTIFIER  
     ,ISNULL(A.S_PO_REFERENCE,'') AS S_PO_REFERENCE  
     ,isnull(A.S_PO_CUSTOMER_ID,'') AS S_PO_CUSTOMER_ID  
     ,ISNULL(A.S_INVOICING_EXTRA_INFO1,'') AS S_INVOICING_EXTRA_INFO1  
     ,ISNULL(A.S_INVOICING_EXTRA_INFO2,'') AS S_INVOICING_EXTRA_INFO2  
     ,ISNULL(A.S_INVOICING_EXTRA_INFO3,'') AS S_INVOICING_EXTRA_INFO3  
     ,ISNULL(A.S_INVOICING_EXTRA_INFO4,'') AS S_INVOICING_EXTRA_INFO4  
     ,ISNULL(A.S_INVOICING_EXTRA_INFO5,'') AS S_INVOICING_EXTRA_INFO5  
     ,ISNULL(A.S_INVOICING_EXTRA_INFO6,'') AS S_INVOICING_EXTRA_INFO6  
     ,A.N_AMOUNT AS N_VALUE  
     ,0 AS N_UNIT --Updated 0 as unit - Is-1301 Kamesh -Jan 30 2021  
     ,0 AS N_RATE  
     ,SOW.S_CURRENCY AS S_BILLING_CURRENCY  
     ,A.S_FIN_BU AS S_BUINESS_UNIT  
     ,SOW.S_FINANCE_ID AS S_FIN_ID  
     ,'' AS S_ORDER_ID  
     ,ISNULL(A.S_EXECUTION_MODEL,'') AS S_EXECUTION_MODEL  
     ,0 AS N_RATE_ID  
     ,'' AS S_PROFILE  
     ,A.N_UNIQUE_ID N_DATA_TRACK_ID  
     ,100 N_CONTRIBUTION_PERCENT  
     ,0 N_ACCRUED_VALUE  
     ,1 AS N_NIVOICE_STATUS  
     ,'TB-OTE' S_SOURCE  
     ,A.S_REVENUE_TYPE AS S_OTHERS_COMP_TYPE  
     ,'OTE' AS S_OTE  
     ,NULL AS N_PROJ_INVOICE_ID  
     ,0 AS N_VERSION_NO  
     ,0 AS N_OTHERS_PROJ_INVOICE_ID  
     ,0 AS N_EMP_TIMESHEET_INVOICE_ID  
     --,CASE WHEN MAP.S_CREATED_BY='AUTO' THEN 0 ELSE MAP.N_ID END  AS N_INVOICE_MAP_ID  
     ,0 AS N_INVOICE_MAP_ID  
     ,A.S_CURRENCY AS RATE_CARD_CURRENCY  
     ,CAST(NULL AS FLOAT) N_BILL_INV_VALUE  
     ,CAST(NULL AS varchar(100)) AS TAX_CODE  
     ,CAST (NULL AS DECIMAL(10,2)) AS TAX_PERCENTAGE  
     ,CAST(NULL AS varchar(100)) AS TAX_DESCRIPTION  
    INTO #TEMP_TNB_TB_OTE  
    FROM M_TB_ONE_TIME_REVENUE_ENTRY A  
    INNER JOIN M_RT_SOW_MASTER SOW ON SOW.N_SOW_ID = A.N_SOW_ID  
    WHERE SOW.S_CUSTOMER_ID = @CUSTOMER_ID  
     AND SOW.S_BILLING_TYPE = @BILLING_TYPE  
     AND A.S_PROJECT_TYPE = @BILLING_TYPE  
     AND A.D_CREATED_DATE>='2021-01-01'  
     AND SOW.N_SOW_ID IN (  
      SELECT [SOW_ID]  
      FROM #TEMP_INPUT_PARAMS   
      WHERE [BILLING_TYPE_REF] = 'T&MTBOTE'  
      )  
     AND A.N_UNIQUE_ID IN (  
      SELECT [VALUE]  
      FROM #TEMP_INPUT_PARAMS  
      WHERE [BILLING_TYPE_REF] = 'T&MTBOTE'  
      )  
     --AND SOW.S_ORDER_ID IS NOT NULL  
     AND A.S_TB_STATUS IN (  
      'ASDM APPROVED'  
      ,'UH APPROVED'      
      )  
     AND A.S_RT_STATUS IS NULL  
  SELECT CAST(@BATCH_NO AS VARCHAR(50)) AS N_BATCH_NO  
     ,SOW.S_CUSTOMER_ID AS S_CUSTOMER_ID  
     ,SOW.S_BILLING_TYPE AS S_BILLING_TYPE  
     --,DATENAME(MONTH, DATEADD(MONTH, A.N_MONTH, - 1)) AS S_BILLING_CYCLE  
     ,CONVERT(varchar, DATEADD(month,A.N_MONTH-1,DATEADD(year,A.N_YEAR-1900,0)), 103)+' - '+CONVERT(varchar, DATEADD(day,-1,DATEADD(month,A.N_MONTH,DATEADD(year,A.N_YEAR-1900,0))), 103)  AS 'S_BILLING_CYCLE'  
     ,A.N_MONTH AS N_MONTH  
     ,A.N_YEAR AS N_YEAR  
     ,@consolidation_Key AS N_MAPPING_ID  
     ,A.N_SOW_ID AS N_SOW_ID  
     ,0 AS N_MILESTONE_ID  
     ,'' AS S_MILESTONE_NAME  
     ,0 AS IS_SOW_LEVEL  
     ,0 AS IS_EMPLOYEE_LEVEL  
     ,'' AS S_EMPLOYEE_ID  
     ,0 AS N_SERVICE_TRACK  
     ,0 AS N_SCHEDULE  
     ,NULL AS D_FROM_DATE  
     ,NULL AS D_TO_DATE  
     ,A.N_PO_ID AS N_PO_ID  
     ,isnull(A.S_PO_IDENTIFIER,'') AS S_PO_IDENTIFIER  
     ,ISNULL(A.S_PO_REFERENCE,'') AS S_PO_REFERENCE  
     ,isnull(A.S_PO_CUSTOMER_ID,'') AS S_PO_CUSTOMER_ID  
     ,ISNULL(A.S_INVOICING_EXTRA_INFO1,'') AS S_INVOICING_EXTRA_INFO1  
     ,ISNULL(A.S_INVOICING_EXTRA_INFO2,'') AS S_INVOICING_EXTRA_INFO2  
     ,ISNULL(A.S_INVOICING_EXTRA_INFO3,'') AS S_INVOICING_EXTRA_INFO3  
     ,ISNULL(A.S_INVOICING_EXTRA_INFO4,'') AS S_INVOICING_EXTRA_INFO4  
     ,ISNULL(A.S_INVOICING_EXTRA_INFO5,'') AS S_INVOICING_EXTRA_INFO5  
     ,ISNULL(A.S_INVOICING_EXTRA_INFO6,'') AS S_INVOICING_EXTRA_INFO6  
     ,A.N_AMOUNT AS N_VALUE  
     ,0 AS N_UNIT  
     ,0 AS N_RATE  
     ,SOW.S_CURRENCY AS S_BILLING_CURRENCY  
     ,A.S_FIN_BU AS S_BUINESS_UNIT  
     ,SOW.S_FINANCE_ID AS S_FIN_ID  
     ,'' AS S_ORDER_ID  
     ,ISNULL(A.S_EXECUTION_MODEL,'') AS S_EXECUTION_MODEL  
     ,0 AS N_RATE_ID  
     ,'' AS S_PROFILE  
     ,A.N_UNIQUE_ID N_DATA_TRACK_ID  
     ,100 N_CONTRIBUTION_PERCENT  
     ,0 N_ACCRUED_VALUE  
     ,1 AS N_NIVOICE_STATUS  
     ,'RT-OTE' S_SOURCE  
     ,A.S_REVENUE_TYPE AS S_OTHERS_COMP_TYPE  
     ,'OTE' AS S_OTE  
     ,NULL AS N_PROJ_INVOICE_ID  
     ,0 AS N_VERSION_NO  
     ,0 AS N_OTHERS_PROJ_INVOICE_ID  
     ,0 AS N_EMP_TIMESHEET_INVOICE_ID  
     --,CASE WHEN MAP.S_CREATED_BY='AUTO' THEN 0 ELSE MAP.N_ID END  AS N_INVOICE_MAP_ID  
     ,0 AS N_INVOICE_MAP_ID  
     ,A.S_CURRENCY AS RATE_CARD_CURRENCY  
     ,CAST(NULL AS FLOAT) N_BILL_INV_VALUE  
     ,CAST(NULL AS varchar(100)) AS TAX_CODE  
     ,CAST (NULL AS DECIMAL(10,2)) AS TAX_PERCENTAGE  
     ,CAST(NULL AS varchar(100)) AS TAX_DESCRIPTION  
    INTO #TEMP_TNB_RT_OTE  
    FROM M_RT_ONE_TIME_REVENUE_ENTRY A  
    INNER JOIN M_RT_SOW_MASTER SOW ON SOW.N_SOW_ID = A.N_SOW_ID  
    WHERE SOW.S_CUSTOMER_ID = @CUSTOMER_ID  
     AND SOW.S_BILLING_TYPE = @BILLING_TYPE  
     AND A.S_PROJECT_TYPE = @BILLING_TYPE  
     AND A.D_CREATED_DATE>='2021-01-01'  
     AND SOW.N_SOW_ID IN (  
      SELECT [SOW_ID]  
      FROM #TEMP_INPUT_PARAMS  
      WHERE [BILLING_TYPE_REF] = 'T&MRTOTE'  
      )  
     AND A.N_UNIQUE_ID IN (  
      SELECT [VALUE]  
      FROM #TEMP_INPUT_PARAMS  
      WHERE [BILLING_TYPE_REF] = 'T&MRTOTE'  
      )  
     --AND SOW.S_ORDER_ID IS NOT NULL  
     AND A.S_RT_STATUS IN ('MAKER SUBMITTED')  
  
 --END  
/* Added by kamesh 9 Jan 2021  
Discount Distribution project invoice id & Execution model wise to get the distribution at employeee& execution model.   
This helps to view the discount split at execution model wise in RT GL entries  
*/  
  
 --DISCOUNT DISTRIBUTION SPLIT START  
 --Modified by rasavalli - removed abs - 03-26-2021 -INCT0034392  
select N_PROJ_INVOICE_ID,  
case when S_EXECUTION_MODEL='ONSHOT' then 'ONSIT'  
else  
left(S_EXECUTION_MODEL,5)  
END  
--left(S_EXECUTION_MODEL,5)  
as S_EXECUTION_MODEL,sum((N_VALUE)) as InV_SUM_VALUE into #PRJ_EXEC_MODL_INV_b4 /*modified for discount flow issue*/  
from #TEMP_TIME_ADJ_INV_CONSOL where n_value<>0  
group by N_PROJ_INVOICE_ID,S_EXECUTION_MODEL  
  
select N_PROJ_INVOICE_ID,  
left(S_EXECUTION_MODEL,5)  
  
--left(S_EXECUTION_MODEL,5)  
as S_EXECUTION_MODEL,sum((InV_SUM_VALUE)) as InV_SUM_VALUE into #PRJ_EXEC_MODL_INV    
from #PRJ_EXEC_MODL_INV_b4 where InV_SUM_VALUE<>0  
group by N_PROJ_INVOICE_ID,S_EXECUTION_MODEL  
  
--select * from #PRJ_EXEC_MODL_INV order by 1  
  
/*TEMP_INV_CONSOL.N_PROJ_INVOICE_ID,TEMP_INV_CONSOL.S_EXECUTION_MODEL,EXEC_MODL_INV.InV_SUM_VALUE,TEMP_INV_CONSOL.n_value  
,isnull(abs(TEMP_INV_CONSOL.n_value),0)/isnull(InV_SUM_VALUE,0) Invoice_Contribution  
,S_EMPLOYEE_ID  
,D_FROM_DATE*/  
select   
TEMP_INV_CONSOL.* ,case when InV_SUM_VALUE=0 then 0 else  isnull((TEMP_INV_CONSOL.n_value),0)/isnull(InV_SUM_VALUE,0) end as  Invoice_Contribution--Validation for denominator zero--Devi R 04/21 -INCT0035520   
 into #temp_Inv_Contribution  
from  
#TEMP_TIME_ADJ_INV_CONSOL TEMP_INV_CONSOL   
inner join #PRJ_EXEC_MODL_INV EXEC_MODL_INV  on EXEC_MODL_INV.N_PROJ_INVOICE_ID=TEMP_INV_CONSOL.N_PROJ_INVOICE_ID  
  AND CASE  WHEN TEMP_INV_CONSOL.S_EXECUTION_MODEL='ONSHOT' THEN 'ONSIT' ELSE left(TEMP_INV_CONSOL.S_EXECUTION_MODEL, 5) END = left(EXEC_MODL_INV.S_EXECUTION_MODEL, 5)  
  --and EXEC_MODL_INV.S_EXECUTION_MODEL=left(TEMP_INV_CONSOL.S_EXECUTION_MODEL,5)  
  and TEMP_INV_CONSOL.n_value<>0  
  order by TEMP_INV_CONSOL.N_PROJ_INVOICE_ID,TEMP_INV_CONSOL.S_EXECUTION_MODEL,S_EMPLOYEE_ID, D_FROM_DATE  
  
SELECT  
ROW_NUMBER() OVER(PARTITION BY TEMP_INV_CONSOL.N_PROJ_INVOICE_ID ORDER BY TEMP_INV_CONSOL.N_PROJ_INVOICE_ID DESC) AS Row_Num,  
 SPLIT_DISCOUNT.N_BATCH_NO  
 ,TEMP_INV_CONSOL.S_CUSTOMER_ID  
 ,TEMP_INV_CONSOL.S_BILLING_TYPE  
 ,TEMP_INV_CONSOL.S_BILLING_CYCLE  
 ,TEMP_INV_CONSOL.N_MONTH  
 ,TEMP_INV_CONSOL.N_YEAR  
 ,TEMP_INV_CONSOL.N_MAPPING_ID  
 ,TEMP_INV_CONSOL.N_SOW_ID  
 ,TEMP_INV_CONSOL.N_MILESTONE_ID  
 ,TEMP_INV_CONSOL.S_MILESTONE_NAME  
 ,TEMP_INV_CONSOL.IS_SOW_LEVEL  
 ,TEMP_INV_CONSOL.IS_EMPLOYEE_LEVEL  
 ,TEMP_INV_CONSOL.S_EMPLOYEE_ID  
 ,TEMP_INV_CONSOL.N_SERVICE_TRACK  
 ,TEMP_INV_CONSOL.N_SCHEDULE  
 ,TEMP_INV_CONSOL.D_FROM_DATE  
 ,TEMP_INV_CONSOL.D_TO_DATE  
 ,TEMP_INV_CONSOL.N_PO_ID  
 ,TEMP_INV_CONSOL.S_PO_IDENTIFIER  
 ,TEMP_INV_CONSOL.S_PO_REFERENCE  
 ,TEMP_INV_CONSOL.S_PO_CUSTOMER_ID  
 ,TEMP_INV_CONSOL.S_INVOICING_EXTRA_INFO1  
 ,TEMP_INV_CONSOL.S_INVOICING_EXTRA_INFO2  
 ,TEMP_INV_CONSOL.S_INVOICING_EXTRA_INFO3  
 ,TEMP_INV_CONSOL.S_INVOICING_EXTRA_INFO4  
 ,TEMP_INV_CONSOL.S_INVOICING_EXTRA_INFO5  
 ,TEMP_INV_CONSOL.S_INVOICING_EXTRA_INFO6  
 ,SPLIT_DISCOUNT.N_VALUE * Invoice_Contribution as N_VALUE  
 --,TEMP_INV_CONSOL.N_UNIT  
 --,TEMP_INV_CONSOL.N_RATE  
 ,0 AS N_UNIT  
 ,0 AS N_RATE  
 ,TEMP_INV_CONSOL.S_BILLING_CURRENCY  
 ,TEMP_INV_CONSOL.S_BUINESS_UNIT  
 ,TEMP_INV_CONSOL.S_FIN_ID  
 ,TEMP_INV_CONSOL.S_ORDER_ID  
 ,TEMP_INV_CONSOL.S_EXECUTION_MODEL  
 ,TEMP_INV_CONSOL.N_RATE_ID  
 ,TEMP_INV_CONSOL.S_PROFILE  
 ,SPLIT_DISCOUNT.N_DATA_TRACK_ID  
 ,SPLIT_DISCOUNT.N_CONTRIBUTION_PERCENT  
 ,SPLIT_DISCOUNT.N_ACCRUED_VALUE  
 ,SPLIT_DISCOUNT.N_NIVOICE_STATUS  
 ,SPLIT_DISCOUNT.S_SOURCE  
 ,SPLIT_DISCOUNT.S_OTHERS_COMP_TYPE  
 ,TEMP_INV_CONSOL.S_OTE  
 ,SPLIT_DISCOUNT.N_PROJ_INVOICE_ID  
 ,SPLIT_DISCOUNT.N_VERSION_NO  
 ,SPLIT_DISCOUNT.N_OTHERS_PROJ_INVOICE_ID  
 ,TEMP_INV_CONSOL.N_EMP_TIMESHEET_INVOICE_ID  
 ,TEMP_INV_CONSOL.N_INVOICE_MAP_ID  
 ,SPLIT_DISCOUNT.RATE_CARD_CURRENCY  
 ,SPLIT_DISCOUNT.N_BILL_INV_VALUE  
 ,CAST(NULL AS varchar(100)) AS TAX_CODE  
 ,CAST (NULL AS DECIMAL(10,2)) AS TAX_PERCENTAGE  
 ,CAST(NULL AS varchar(100)) AS TAX_DESCRIPTION  
  into #tempDiscountDistribution  
   FROM #TEMP_TNM_EXPENSES_INV_CONSOL SPLIT_DISCOUNT  
inner join #temp_Inv_Contribution TEMP_INV_CONSOL   
  on SPLIT_DISCOUNT.N_PROJ_INVOICE_ID=TEMP_INV_CONSOL.N_PROJ_INVOICE_ID  
  AND CASE  WHEN TEMP_INV_CONSOL.S_EXECUTION_MODEL='ONSHOT' THEN 'ONSIT' ELSE left(TEMP_INV_CONSOL.S_EXECUTION_MODEL, 5) END = CASE  WHEN SPLIT_DISCOUNT.S_EXECUTION_MODEL='ONSHOT' THEN 'ONSIT' ELSE left(SPLIT_DISCOUNT.S_EXECUTION_MODEL, 5) END  
  --and left(SPLIT_DISCOUNT.S_EXECUTION_MODEL,5)=left(TEMP_INV_CONSOL.S_EXECUTION_MODEL,5)  
where SPLIT_DISCOUNT.S_OTHERS_COMP_TYPE='DISC' and SPLIT_DISCOUNT.n_value<>0  
order by TEMP_INV_CONSOL.N_PROJ_INVOICE_ID  
  
/*  
--IDENTIFYING THE LEFTOVER REMAINING VALUE WHICH IS NOT COVERED DURING THE DISTRIBUTION SPLIT  
  
select *,cast(AA.Proj_Discount_Sum as numeric(18,9))-cast(BB.Discount_Distribution_Sum as numeric(18,9)) discount_actual_distrib_diff from (  
select N_PROJ_INVOICE_ID,sum(cast(n_value as numeric(18,9))) Proj_Discount_Sum,S_EXECUTION_MODEL from #TEMP_TNM_EXPENSES_INV_CONSOL where S_OTHERS_COMP_TYPE='DISC' group by N_PROJ_INVOICE_ID,S_EXECUTION_MODEL  
)AA,  
(  
select min(row_num)row_num,N_PROJ_INVOICE_ID,sum(cast(n_value as numeric(18,9))) Discount_Distribution_Sum,S_EXECUTION_MODEL from #tempDiscountDistribution group by N_PROJ_INVOICE_ID,S_EXECUTION_MODEL  
)BB  
where AA.N_PROJ_INVOICE_ID=BB.N_PROJ_INVOICE_ID   
and AA.S_EXECUTION_MODEL=BB.S_EXECUTION_MODEL  
and AA.Proj_Discount_Sum!=BB.Discount_Distribution_Sum  
  
--and BB.row_num=1 and N_PROJ_INVOICE_ID=860723  
*/  
  
--START   
/*ADJUSTING THE BALANCE DISCOUNT WHICH IS NOT COVERED DURING DISCOUNT VALUE DITRIBUTION SPLIT IN THE ABOVE SECTION  
 TO ANY OF THE ONE TOP RECORD AGAINST THE PROJECT INVOICE AND EXECUTION MODEL*/  
/*  
--verify query  
select  cc.*,AA.*,BB.*,cast(AA.Proj_Discount_Sum as numeric(18,9))-cast(BB.Discount_Distribution_Sum as numeric(18,9))    
from (  
select N_PROJ_INVOICE_ID,sum(cast(n_value as numeric(18,9))) Proj_Discount_Sum,S_EXECUTION_MODEL from #TEMP_TNM_EXPENSES_INV_CONSOL where S_OTHERS_COMP_TYPE='DISC' group by N_PROJ_INVOICE_ID,S_EXECUTION_MODEL  
)AA,  
(  
select min(row_num)row_num,N_PROJ_INVOICE_ID,sum(cast(n_value as numeric(18,9))) Discount_Distribution_Sum,S_EXECUTION_MODEL from #tempDiscountDistribution group by N_PROJ_INVOICE_ID,S_EXECUTION_MODEL  
)BB  
,#tempDiscountDistribution CC  
where  
 AA.N_PROJ_INVOICE_ID=BB.N_PROJ_INVOICE_ID   
and AA.S_EXECUTION_MODEL=BB.S_EXECUTION_MODEL    
and BB.N_PROJ_INVOICE_ID=CC.N_PROJ_INVOICE_ID   
and BB.S_EXECUTION_MODEL=CC.S_EXECUTION_MODEL  
and AA.Proj_Discount_Sum!=BB.Discount_Distribution_Sum  
and BB.row_num=cc.row_num  
and BB.row_num=1*/  
  
/*Changed the execution model check*/  
update CC set CC.n_value=CC.n_value+(cast(AA.Proj_Discount_Sum as numeric(18,9))-cast(BB.Discount_Distribution_Sum as numeric(18,9)))  
from (  
select N_PROJ_INVOICE_ID,sum(cast(n_value as numeric(18,9))) Proj_Discount_Sum,left(S_EXECUTION_MODEL,5) as S_EXECUTION_MODEL  
from #TEMP_TNM_EXPENSES_INV_CONSOL where S_OTHERS_COMP_TYPE='DISC' group by N_PROJ_INVOICE_ID,S_EXECUTION_MODEL  
)AA,  
(  
select min(row_num)row_num,N_PROJ_INVOICE_ID,sum(cast(n_value as numeric(18,9))) Discount_Distribution_Sum,  
CASE  WHEN S_EXECUTION_MODEL='ONSHOT' THEN 'ONSIT' ELSE left(S_EXECUTION_MODEL, 5) END as S_EXECUTION_MODEL  
--left(S_EXECUTION_MODEL,5) as S_EXECUTION_MODEL   
from #tempDiscountDistribution group by N_PROJ_INVOICE_ID,CASE  WHEN S_EXECUTION_MODEL='ONSHOT' THEN 'ONSIT' ELSE left(S_EXECUTION_MODEL, 5) END  
--,left(S_EXECUTION_MODEL,5)  
)BB  
,#tempDiscountDistribution CC  
where  
 AA.N_PROJ_INVOICE_ID=BB.N_PROJ_INVOICE_ID   
and left(AA.S_EXECUTION_MODEL,5)=left(BB.S_EXECUTION_MODEL ,5)   
and BB.N_PROJ_INVOICE_ID=CC.N_PROJ_INVOICE_ID   
and left(BB.S_EXECUTION_MODEL,5)=left(CC.S_EXECUTION_MODEL,5)  
and AA.Proj_Discount_Sum!=BB.Discount_Distribution_Sum  
and BB.row_num=cc.row_num  
and BB.row_num=1  
  
--after update validate  
/*  
--Validate Query  
select *,cast(AA.Proj_Discount_Sum as numeric(18,9))-cast(BB.Discount_Distribution_Sum as numeric(18,9)) discount_actual_distrib_diff from (  
select N_PROJ_INVOICE_ID,sum(cast(n_value as numeric(18,9))) Proj_Discount_Sum,S_EXECUTION_MODEL from #TEMP_TNM_EXPENSES_INV_CONSOL where S_OTHERS_COMP_TYPE='DISC' group by N_PROJ_INVOICE_ID,S_EXECUTION_MODEL  
)AA,  
(  
select min(row_num)row_num,N_PROJ_INVOICE_ID,sum(cast(n_value as numeric(18,9))) Discount_Distribution_Sum,S_EXECUTION_MODEL from #tempDiscountDistribution group by N_PROJ_INVOICE_ID,S_EXECUTION_MODEL  
)BB  
where AA.N_PROJ_INVOICE_ID=BB.N_PROJ_INVOICE_ID   
and AA.S_EXECUTION_MODEL=BB.S_EXECUTION_MODEL  
and AA.Proj_Discount_Sum!=BB.Discount_Distribution_Sum  
*/  
--END Adjusting the balance discount which is not covered during discount value ditribution split in the above section  
  
select N_BATCH_NO,S_CUSTOMER_ID,S_BILLING_TYPE,S_BILLING_CYCLE,N_MONTH,N_YEAR,N_MAPPING_ID,N_SOW_ID  
,N_MILESTONE_ID,S_MILESTONE_NAME,IS_SOW_LEVEL,IS_EMPLOYEE_LEVEL,S_EMPLOYEE_ID,N_SERVICE_TRACK,N_SCHEDULE  
,D_FROM_DATE,D_TO_DATE,N_PO_ID,S_PO_IDENTIFIER,S_PO_REFERENCE,S_PO_CUSTOMER_ID  
,S_INVOICING_EXTRA_INFO1,S_INVOICING_EXTRA_INFO2,S_INVOICING_EXTRA_INFO3,S_INVOICING_EXTRA_INFO4  
,S_INVOICING_EXTRA_INFO5,S_INVOICING_EXTRA_INFO6,N_VALUE,  
0 AS N_UNIT,0 AS N_RATE,  
S_BILLING_CURRENCY,S_BUINESS_UNIT,S_FIN_ID  
,S_ORDER_ID,S_EXECUTION_MODEL,N_RATE_ID,S_PROFILE,N_DATA_TRACK_ID,N_CONTRIBUTION_PERCENT  
,N_ACCRUED_VALUE,N_NIVOICE_STATUS,S_SOURCE,S_OTHERS_COMP_TYPE,S_OTE,N_PROJ_INVOICE_ID  
,N_VERSION_NO,N_OTHERS_PROJ_INVOICE_ID,N_EMP_TIMESHEET_INVOICE_ID,N_INVOICE_MAP_ID  
,RATE_CARD_CURRENCY,N_BILL_INV_VALUE   
,TAX_CODE  
,TAX_PERCENTAGE  
,TAX_DESCRIPTION  
into #TEMP_TIMESHEET_DISTRBUTED_DISC  
from   
#tempDiscountDistribution  
--DISCOUNT DISTRIBUTION ENDS  
  
 SELECT * INTO #TEMP_TNB_INVOICE   
 FROM(  
  SELECT TMPDATA.* FROM #TEMP_TIME_ADJ_INV_CONSOL TMPDATA /*INNER JOIN #TEMP_INPUT_PARAMS INPUT_PARAMS ON ISNULL(TMPDATA.N_MONTH,0)=ISNULL(INPUT_PARAMS.[N_MONTH],0)  
  AND ISNULL(TMPDATA.N_YEAR,0)=ISNULL(INPUT_PARAMS.[N_YEAR],0)*/  
  UNION ALL  
  SELECT * FROM #TEMP_TNM_EXPENSES_INV_CONSOL  where S_OTHERS_COMP_TYPE not in ('DISC')  
  UNION ALL  
  SELECT * FROM #TEMP_TIMESHEET_DISTRBUTED_DISC   
  UNION ALL  
  SELECT * FROM #TEMP_TNB_TB_OTE  
  UNION ALL  
  SELECT * FROM #TEMP_TNB_RT_OTE  
    
  )AA  
  
  UPDATE A SET N_BILL_INV_VALUE=dbo.FUNC_ROUND_UP_DOWN_INVOICE_VALUE_O2C(N_VALUE*isnull(CUR_EXCHNG_RT,1), @ROUND_DETAIL_LEVEL,@DECIMAL_DETAIL_LEVEL) FROM #TEMP_TNB_INVOICE A left JOIN #TEMP_CURRENCY B ON --made left join since some currncy not available-
-Devi R--28-May  
   A.RATE_CARD_CURRENCY COLLATE Latin1_General_BIN=B.FROM_CUR AND A.S_BILLING_CURRENCY COLLATE Latin1_General_BIN=B.TO_CUR   
   --new TAX calculation including VAT-- Devi R --11-Oct-2021 Start  
   CREATE TABLE #TAXCODE_TM (S_BUSINESS_UNIT VARCHAR(MAX), S_BILL_TO_CUST_ID VARCHAR(MAX), S_NAME VARCHAR(MAX), S_TAX_CD VARCHAR(MAX), D_UPLOADED_DATE DATETIME, SETID VARCHAR(MAX), TAX_CD VARCHAR(MAX), EFF_STATUS VARCHAR(MAX), EFFDT DATETIME, DESCR VARCHA
R(MAX), DESCRSHORT VARCHAR(MAX), TAX_PCT FLOAT, TAX_AUTHORITY_CD VARCHAR(MAX), TAX_CD_TYPE VARCHAR(MAX), TYPE_DESCR VARCHAR(MAX), ACCOUNT INT,CUST_COUNTRY VARCHAR(MAX))  
  
   DECLARE @SEQ_TM INT  
  
   SELECT TOP 1 @SEQ_TM=  ISNULL(N_BILL_TO_SEQ_NO,1) FROM T_TB_INVOICE_PRINT_HEADER_COLUMN_MAPPING WITH (NOLOCK) WHERE S_CUSTOMER_ID=@Customer_id AND S_BILLING_TYPE=@billing_type  
     
   select * into #LOCATION_TM from FINANCEDB.FIN90PRD.dbo.PS_LOCATION_TBL B WITH (NOLOCK) WHERE EFF_STATUS='A' AND B.EFFDT = (SELECT MAX(B1.EFFDT) FROM FINANCEDB.FIN90PRD.dbo.PS_LOCATION_TBL B1 WITH (NOLOCK) WHERE B.SETID = B1.SETID AND B.LOCATION = B1.LO
CATION)  
    
    
   INSERT INTO #TAXCODE_TM EXECUTE FINANCEDB.FIN90PRD.dbo.USP_HX_BI_TAX_V1 '',@Customer_id,@SEQ_TM  
   
   SELECT A.*,CASE WHEN A.TAX_CD_TYPE='V' AND A.CUST_COUNTRY COLLATE SQL_Latin1_General_CP1_CI_AS= B.COUNTRY THEN 'DOMESTIC'   
   WHEN A.TAX_CD_TYPE='V' AND A.CUST_COUNTRY COLLATE SQL_Latin1_General_CP1_CI_AS<> B.COUNTRY THEN 'EXPORT' ELSE S_NAME END AS TAX_TYPE   
   INTO #TX1_TM  FROM #TAXCODE_TM A ,#LOCATION_TM  B   
   WHERE  A.S_BUSINESS_UNIT COLLATE SQL_Latin1_General_CP1_CI_AS=B.SETID  
   SELECT  * INTO #TX2_TM FROM #TX1_TM WHERE s_name=TAX_TYPE   
   
  
   INSERT INTO #TEMP_TNB_INVOICE    
   SELECT        
   CON.N_BATCH_NO,  
   CON.S_CUSTOMER_ID  
   ,CON.S_BILLING_TYPE  
   ,CON.S_BILLING_CYCLE  
   ,CON.N_MONTH  
   ,CON.N_YEAR  
   ,CON.N_MAPPING_ID  
   ,CON.N_SOW_ID  
   ,CON.N_MILESTONE_ID  
   ,CON.S_MILESTONE_NAME  
   ,CON.IS_SOW_LEVEL  
   ,CON.IS_EMPLOYEE_LEVEL  
   ,CON.S_EMPLOYEE_ID  
   ,CON.N_SERVICE_TRACK  
   ,CON.N_SCHEDULE  
   ,CON.D_FROM_DATE  
   ,CON.D_TO_DATE  
   ,CON.N_PO_ID  
   ,CON.S_PO_IDENTIFIER  
   ,CON.S_PO_REFERENCE  
   ,CON.S_PO_CUSTOMER_ID  
   ,CON.S_INVOICING_EXTRA_INFO1  
   ,CON.S_INVOICING_EXTRA_INFO2  
   ,CON.S_INVOICING_EXTRA_INFO3  
   ,CON.S_INVOICING_EXTRA_INFO4  
   ,CON.S_INVOICING_EXTRA_INFO5  
   ,CON.S_INVOICING_EXTRA_INFO6  
   ,0 AS N_VALUE  
   ,0 as N_UNIT  
   ,CON.N_RATE  
   ,CON.S_BILLING_CURRENCY  
   ,CON.S_BUINESS_UNIT  
   ,CON.S_FIN_ID  
   ,CON.S_ORDER_ID  
   ,CON.S_EXECUTION_MODEL  
   ,CON.N_RATE_ID  
   ,CON.S_PROFILE   
   ,CON.N_DATA_TRACK_ID  
   ,CON.N_CONTRIBUTION_PERCENT  
   ,CON.N_ACCRUED_VALUE  
   ,CON.N_NIVOICE_STATUS  
   ,'TAX' AS S_SOURCE  
   ,CON.S_OTHERS_COMP_TYPE  
   ,CON.S_OTE  
   ,CON.N_PROJ_INVOICE_ID  
   ,CON.N_VERSION_NO  
   ,CON.N_OTHERS_PROJ_INVOICE_ID  
   ,CON.N_EMP_TIMESHEET_INVOICE_ID  
   ,CON.N_INVOICE_MAP_ID  
   ,CON.RATE_CARD_CURRENCY  
   ,CASE WHEN  (CON.N_BILL_INV_VALUE *ISNULL(TAX_CD.TAX_PCT,0))=0 THEN 0 ELSE (CON.N_BILL_INV_VALUE *ISNULL(TAX_CD.TAX_PCT,0))/100 END AS  N_BILL_INV_VALUE  
   ,TAX_CD.S_TAX_CD AS TAX_CODE  
   ,TAX_CD.TAX_PCT AS TAX_PERCENTAGE  
   ,TAX_CD.DESCRSHORT AS TAX_DESCRIPTION  
   FROM    
   #TEMP_TNB_INVOICE CON   
   LEFT JOIN #TX2_TM TAX_CD   
   ON TAX_CD.S_BILL_TO_CUST_ID COLLATE SQL_Latin1_General_CP1_CI_AS=CON.S_CUSTOMER_ID  
   AND CON.S_BUINESS_UNIT COLLATE SQL_Latin1_General_CP1_CI_AS=TAX_CD.S_BUSINESS_UNIT  
   WHERE TAX_CD.S_TAX_CD IS NOT NULL AND TAX_CD.TAX_PCT IS NOT NULL   
   --new TAX calculation including VAT-- Devi R --11-Oct-2021 End  
-----------------Validate PO value starts  
-------------------------  
  SELECT *INTO #PO_SUM  FROM #TEMP_TNB_INVOICE  WHERE S_SOURCE<>'TAX'  
  SELECT *INTO #PO_SUM_TAX  FROM #TEMP_TNB_INVOICE  WHERE S_SOURCE='TAX'  
  
  SELECT S_PO_IDENTIFIER, S_PO_CUSTOMER_ID,S_BILLING_TYPE, SUM(N_BILL_INV_VALUE) AS N_Value,N_BATCH_NO   
  INTO #PO1 FROM #PO_SUM  
  GROUP BY  S_PO_IDENTIFIER, S_PO_CUSTOMER_ID,S_BILLING_TYPE,N_BATCH_NO  
  
  SELECT S_PO_IDENTIFIER, S_PO_CUSTOMER_ID,S_BILLING_TYPE, SUM(N_BILL_INV_VALUE) AS N_Value,N_BATCH_NO   
  INTO #PO11 FROM #PO_SUM_TAX  
  GROUP BY  S_PO_IDENTIFIER, S_PO_CUSTOMER_ID,S_BILLING_TYPE,N_BATCH_NO  
  
  SELECT case when b.B_IS_TAX_INCLUSIVE=1 then isnull(a.n_value,0)+ISNULL(c.N_Value,0)   
  else a.n_value end as n_value  
  ,b.N_PO_VALUE,b.N_PO_INVOICED_VALUE,B.S_PO_IDENTIFIER,b.S_CUSTOMER_ID AS S_PO_CUSTOMER_ID,b.S_BILLING_MODE AS S_BILLING_TYPE INTO #PODETAILS1 FROM #PO1 a  
  LEFT JOIN  #PO11 c on a.N_BATCH_NO=c.N_BATCH_NO and a.S_PO_IDENTIFIER=c.S_PO_IDENTIFIER,  
  [M_TB_PO_MASTER_O2C] b WHERE a.S_PO_IDENTIFIER=b.S_PO_IDENTIFIER AND a.S_PO_CUSTOMER_ID=b.S_CUSTOMER_ID  
  AND a.S_PO_IDENTIFIER IS NOT NULL AND a.S_BILLING_TYPE=b.S_BILLING_MODE   
------------------------------  
  --SELECT S_PO_IDENTIFIER, S_PO_CUSTOMER_ID,S_BILLING_TYPE, SUM(N_BILL_INV_VALUE) AS N_Value INTO #PODETAILS1 FROM #TEMP_TNB_INVOICE  
  --GROUP BY  S_PO_IDENTIFIER, S_PO_CUSTOMER_ID,S_BILLING_TYPE  
  /*Mismatch in po value and invoice value INCT0034911*/  
  IF EXISTS (SELECT * FROM #PODETAILS1   
  WHERE CONVERT(NUMERIC(15,2),N_Value)>CONVERT(NUMERIC(15,2),(N_PO_VALUE-N_PO_INVOICED_VALUE)))--Increased numeric as PO datatype throwing error--Devi R --04/20  
  BEGIN  
   SELECT @ERROR_PO_ID = COALESCE(@ERROR_PO_ID + ', ', '') + CAST(a.S_PO_IDENTIFIER AS VARCHAR(max))  
   FROM #PODETAILS1 a,   
   [M_TB_PO_MASTER_O2C] b WHERE a.S_PO_IDENTIFIER=b.S_PO_IDENTIFIER AND a.S_PO_CUSTOMER_ID=b.S_CUSTOMER_ID  
   AND a.S_PO_IDENTIFIER IS NOT NULL AND a.S_BILLING_TYPE=b.S_BILLING_MODE   
   AND a.N_Value>(b.N_PO_VALUE-b.N_PO_INVOICED_VALUE)  
  
   SET @STATUS_VALUE = 409          
   SET @STATUS_DESCRIPTION = 'Invoice value exceeded PO available value for  '+@ERROR_PO_ID  
  END  
  ELSE  
  BEGIN   
  SET @SQLINSERT= 'INSERT INTO T_TB_INVOICE_CONSOLIDATION_BUFFER_BATCH_O2C(N_BATCH_NO,S_CUSTOMER_ID,S_BILLING_TYPE,S_BILLING_CYCLE,N_MONTH,N_YEAR,N_MAPPING_ID,N_SOW_ID,N_MILESTONE_ID,S_MILESTONE_NAME,IS_SOW_LEVEL,IS_EMPLOYEE_LEVEL  
  ,S_EMPLOYEE_ID,N_SERVICE_TRACK,N_SCHEDULE,D_FROM_DATE,D_TO_DATE,N_PO_ID  
  ,S_PO_IDENTIFIER,S_PO_REFERENCE,S_PO_CUSTOMER_ID,S_INVOICING_EXTRA_INFO1,S_INVOICING_EXTRA_INFO2  
  ,S_INVOICING_EXTRA_INFO3,S_INVOICING_EXTRA_INFO4,S_INVOICING_EXTRA_INFO5,S_INVOICING_EXTRA_INFO6,N_VALUE,N_UNIT,N_RATE  
  ,S_BILLING_CURRENCY,S_BUINESS_UNIT,S_FIN_ID,S_ORDER_ID  
  ,S_EXECUTION_MODEL,N_RATE_ID,S_PROFILE  
  ,N_DATA_TRACK_ID,  
  N_CONTRIBUTION_PERCENT,  
  N_ACCRUED_VALUE,  
  N_NIVOICE_STATUS,  
  S_SOURCE,  
  S_OTHERS_COMP_TYPE,  
  S_OTE,  
  N_PROJ_INVOICE_ID,  
  N_VERSION_NO,  
  N_OTHERS_PROJ_INVOICE_ID,  
  N_EMP_TIMESHEET_INVOICE_ID,N_INVOICE_MAP_ID,RATE_CARD_CURRENCY,N_BILL_INV_VALUE,TAX_CODE,TAX_PERCENTAGE,TAX_DESCRIPTION  
  )  
  SELECT * FROM #TEMP_TNB_INVOICE where N_BILL_INV_VALUE<>0 ORDER BY ROW_NUMBER() OVER(ORDER BY '+@invocelevel_grouping_col+')'  
    PRINT @SQLInsert  
    exec(@SQLInsert)  
  END  
END  
ELSE IF(@billing_type='FPP')  
BEGIN  
PRINT 'FPP'  
SELECT * INTO #TEMP_FPP_INVOICE FROM(  
select cast(@batch_no as varchar(50)) AS N_BATCH_NO,  
MAP.S_CUSTOMER_ID  
,MAP.S_BILLING_TYPE  
,NULL 'S_BILLING_CYCLE'  
,NULL 'N_MONTH'  
,NULL 'N_YEAR'  
,MAP.N_MAPPING_ID  
,MAP.N_SOW_ID  
,MAP.N_MILESTONE_ID  
,MAP.S_MILESTONE_NAME  
,MAP.IS_SOW_LEVEL  
,MAP.IS_EMPLOYEE_LEVEL  
,MAP.S_EMPLOYEE_ID  
,MAP.N_SERVICE_TRACK  
,MAP.N_SCHEDULE  
,MAP.D_FROM_DATE  
,MAP.D_TO_DATE  
,MAP.N_PO_ID  
,isnull(MAP.S_PO_IDENTIFIER ,'') S_PO_IDENTIFIER  
,ISNULL(MAP.S_PO_REFERENCE,'')S_PO_REFERENCE  
,ISNULL(ltrim(rtrim(MAP.S_PO_CUSTOMER_ID)),'') AS S_PO_CUSTOMER_ID  
,ISNULL(MAP.S_INVOICING_EXTRA_INFO1,'')S_INVOICING_EXTRA_INFO1  
,ISNULL(MAP.S_INVOICING_EXTRA_INFO2,'')S_INVOICING_EXTRA_INFO2  
,ISNULL(MAP.S_INVOICING_EXTRA_INFO3,'')S_INVOICING_EXTRA_INFO3  
,ISNULL(MAP.S_INVOICING_EXTRA_INFO4,'')S_INVOICING_EXTRA_INFO4  
,ISNULL(MAP.S_INVOICING_EXTRA_INFO5,'')S_INVOICING_EXTRA_INFO5  
,ISNULL(MAP.S_INVOICING_EXTRA_INFO6,'')S_INVOICING_EXTRA_INFO6  
--,(MAP.N_CONTRIBUTION_PERCENT * (BILLVERSION.NETINVOICEVALUE - isnull(BILLVERSION.N_O2C_INVOICED_VALUE, 0))) / 100 AS N_INV_VALUE  
,MAP.N_VALUE  
,NULL N_UNIT  
,NULL N_RATE  
,SOW.S_CURRENCY as S_BILLING_CURRENCY  
,BILLVERSION.S_BUINESS_UNIT  
,ISNULL(SOW.S_FINANCE_ID,'') as  S_FIN_ID  
,'' AS S_ORDER_ID  
,NULL AS S_EXECUTION_MODEL  
,NULL N_RATE_ID  
,NULL AS S_PROFILE  
  
,BILLVERSION.N_FPP_MILESTONE_ID AS N_DATA_TRACK_ID  
,NULL N_CONTRIBUTION_PERCENT  
,NULL N_ACCRUED_VALUE  
,1 AS N_NIVOICE_STATUS  
,'TIMESHEET' S_SOURCE  
  
,NULL S_OTHERS_COMP_TYPE  
,'' AS S_OTE  
,BILLVERSION.N_FPP_MILESTONE_ID N_PROJ_INVOICE_ID  
,SOW.S_CURRENCY AS RATE_CARD_CURRENCY  
--,MAP.N_VALUE N_BILL_INV_VALUE  
,dbo.FUNC_ROUND_UP_DOWN_INVOICE_VALUE_O2C(MAP.N_VALUE, @ROUND_DETAIL_LEVEL,@DECIMAL_DETAIL_LEVEL) as N_BILL_INV_VALUE  
,CAST(NULL AS varchar(100)) AS TAX_CODE  
,CAST (NULL AS DECIMAL(10,2)) AS TAX_PERCENTAGE  
,CAST(NULL AS varchar(100)) AS TAX_DESCRIPTION  
FROM M_TB_RT_FPP_MILE_STONE BILLVERSION  
INNER JOIN M_RT_SOW_MASTER SOW ON SOW.N_SOW_ID = BILLVERSION.N_SOW_ID  
--INNER JOIN DBO.[T_TB_INVOICE_MAPPING_O2C] MAP ON MAP.N_SOW_ID = SOW.N_SOW_ID  
INNER JOIN #TMP_INVOICE_CONSOLIDATION_MAPPING MAP ON MAP.N_SOW_ID = SOW.N_SOW_ID  
INNER JOIN #TEMP_INPUT_PARAMS INPUTPARAMS ON SOW.N_SOW_ID=INPUTPARAMS.[SOW_ID]  
AND BILLVERSION.N_MILE_STONE_NO =INPUTPARAMS.[VALUE] AND INPUTPARAMS.[BILLING_TYPE_REF]='FPP'  
WHERE SOW.S_CUSTOMER_ID =@Customer_id  AND BILLVERSION.N_MILE_STONE_NO=MAP.N_MILESTONE_ID  
AND BILLVERSION.REVIEWD_DATE_RT IS NULL AND BILLVERSION.INVOICESTATUS=3 AND MAP.S_BILLING_TYPE=@billing_type  
 --AND SOW.S_ORDER_ID IS NOT NULL   
 --AND SOW.N_SOW_ID IN(SELECT [SOW_ID] FROM #TEMP_INPUT_PARAMS WHERE [BILLING_TYPE_REF]='FPP')--) AA  
 --AND BILLVERSION.N_MILE_STONE_NO IN (SELECT [VALUE]  FROM #TEMP_INPUT_PARAMS WHERE [BILLING_TYPE_REF]='FPP')  
 AND MAP.N_CURRENT_STATUS = 4 --INVOICE MAPPING APROVED  
 AND MAP.N_INVOICE_STATUS=6  
  
UNION ALL  
--Expense for Milestone FPP  
select cast(@batch_no as varchar(50)) AS N_BATCH_NO,  
SOW.S_CUSTOMER_ID  
,SOW.S_BILLING_TYPE  
,NULL 'S_BILLING_CYCLE'  
,NULL 'N_MONTH'  
,NULL 'N_YEAR'  
,@consolidation_Key as N_MAPPING_ID  
,MILE_EXP.N_SOW_ID  
,MILE_EXP.N_MILE_STONE_NO  N_MILESTONE_ID  
,MILE.S_MILE_STONE_NAME  
,0 IS_SOW_LEVEL  
,0 IS_EMPLOYEE_LEVEL  
,NULL S_EMPLOYEE_ID  
,0 N_SERVICE_TRACK  
,0 N_SCHEDULE  
,NULL D_FROM_DATE  
,NULL D_TO_DATE  
,MILE_EXP.N_PO_ID  
,ISNULL(MILE_EXP.S_PO_IDENTIFIER ,'') AS S_PO_IDENTIFIER  
,ISNULL(MILE_EXP.S_PO_REFERENCE,'') as S_PO_REFERENCE  
,ISNULL(MILE_EXP.S_PO_CUSTOMER_ID,'')AS S_PO_CUSTOMER_ID  
,ISNULL(MILE_EXP.S_INVOICING_EXTRA_INFO1,'') AS S_INVOICING_EXTRA_INFO1  
,ISNULL(MILE_EXP.S_INVOICING_EXTRA_INFO2,'') AS S_INVOICING_EXTRA_INFO2  
,ISNULL(MILE_EXP.S_INVOICING_EXTRA_INFO3,'') AS S_INVOICING_EXTRA_INFO3  
,ISNULL(MILE_EXP.S_INVOICING_EXTRA_INFO4,'') AS S_INVOICING_EXTRA_INFO4  
,ISNULL(MILE_EXP.S_INVOICING_EXTRA_INFO5,'') AS S_INVOICING_EXTRA_INFO5  
,ISNULL(MILE_EXP.S_INVOICING_EXTRA_INFO6,'') AS S_INVOICING_EXTRA_INFO6  
--,MILE_EXP.N_AMOUNT N_VALUE   
,CASE WHEN MILE_EXP.S_TYPE IN (  
  'DISC'  
  ,'DISC_PROV'  
  ,'SRV_CRT'  
  ,'PLT'  
  ,'ABR'  
  )  
 THEN - 1 * isnull(MILE_EXP.N_AMOUNT, 0)  
ELSE MILE_EXP.N_AMOUNT  
END N_VALUE  
,0 AS N_UNIT  
,0 AS N_RATE  
  
,SOW.S_CURRENCY as S_BILLING_CURRENCY  
,MILE.S_BUINESS_UNIT  
,ISNULL(SOW.S_FINANCE_ID,'') as  S_FIN_ID  
,'' AS S_ORDER_ID  
  
,MILE_EXP.S_EXECUTION_MODEL  
,NULL N_RATE_ID  
,NULL AS S_PROFILE  
  
,MILE_EXP.N_FPP__MILESTONE_EXPENSES_ID AS N_DATA_TRACK_ID  
,NULL N_CONTRIBUTION_PERCENT  
,NULL N_ACCRUED_VALUE  
,1 AS N_NIVOICE_STATUS  
,'EXPENSES' S_SOURCE  
  
,MILE_EXP.S_TYPE S_OTHERS_COMP_TYPE  
,'' AS S_OTE  
,MILE.N_FPP_MILESTONE_ID N_PROJ_INVOICE_ID  
,SOW.S_CURRENCY AS RATE_CARD_CURRENCY  
,dbo.FUNC_ROUND_UP_DOWN_INVOICE_VALUE_O2C(CASE WHEN MILE_EXP.S_TYPE IN (  
  'DISC'  
  ,'DISC_PROV'  
  ,'SRV_CRT'  
  ,'PLT'  
  ,'ABR'  
  )  
 THEN - 1 * isnull(MILE_EXP.N_AMOUNT, 0)  
ELSE MILE_EXP.N_AMOUNT END,@ROUND_DETAIL_LEVEL,@DECIMAL_DETAIL_LEVEL) AS N_BILL_INV_VALUE  
,CAST(NULL AS varchar(100)) AS TAX_CODE  
,CAST (NULL AS DECIMAL(10,2)) AS TAX_PERCENTAGE  
,CAST(NULL AS varchar(100)) AS TAX_DESCRIPTION  
   
FROM M_TB_RT_MILE_STONE_EXPENSES MILE_EXP  
INNER JOIN M_RT_SOW_MASTER SOW ON SOW.N_SOW_ID = MILE_EXP.N_SOW_ID  
INNER JOIN M_TB_RT_FPP_MILE_STONE MILE ON SOW.N_SOW_ID=MILE.N_SOW_ID AND MILE_EXP.N_MILE_STONE_NO=MILE.N_MILE_STONE_NO  
--INNER JOIN DBO.[T_TB_INVOICE_MAPPING_O2C] MAP ON MAP.N_SOW_ID = SOW.N_SOW_ID  
INNER JOIN #TEMP_INPUT_PARAMS INPUTPARAMS ON SOW.N_SOW_ID=INPUTPARAMS.[SOW_ID]  
AND MILE_EXP.N_MILE_STONE_NO =INPUTPARAMS.[VALUE] AND INPUTPARAMS.[BILLING_TYPE_REF]='FPP'  
WHERE SOW.S_CUSTOMER_ID = @Customer_id AND isnull(MILE_EXP.S_TYPE,'') NOT IN ('DISC_PROV')  
AND SOW.S_BILLING_TYPE='FPP' --AND SOW.S_ORDER_ID IS NOT NULL   
--AND SOW.N_SOW_ID IN(SELECT [SOW_ID] FROM #TEMP_INPUT_PARAMS WHERE [BILLING_TYPE_REF]='FPP')   
--AND MILE_EXP.N_MILE_STONE_NO IN (SELECT [VALUE]  FROM #TEMP_INPUT_PARAMS WHERE [BILLING_TYPE_REF]='FPP')  
  
UNION ALL  
  
--OTE ENTRY T&B  
SELECT CAST(@BATCH_NO AS VARCHAR(50)) AS N_BATCH_NO  
,SOW.S_CUSTOMER_ID AS S_CUSTOMER_ID  
,SOW.S_BILLING_TYPE AS S_BILLING_TYPE  
--,DATENAME( MONTH , DATEADD( MONTH , A.N_MONTH , -1 ) ) AS S_BILLING_CYCLE  
,CONVERT(varchar, DATEADD(month,A.N_MONTH-1,DATEADD(year,A.N_YEAR-1900,0)), 103)+' - '+CONVERT(varchar, DATEADD(day,-1,DATEADD(month,A.N_MONTH,DATEADD(year,A.N_YEAR-1900,0))), 103)  AS 'S_BILLING_CYCLE'  
,A.N_MONTH AS N_MONTH  
,A.N_YEAR AS N_YEAR  
,@consolidation_Key AS N_MAPPING_ID  
,A.N_SOW_ID AS N_SOW_ID  
,0 N_MILESTONE_ID  
,'' S_MILESTONE_NAME  
,NULL AS IS_SOW_LEVEL  
,NULL AS IS_EMPLOYEE_LEVEL  
,NULL S_EMPLOYEE_ID  
,NULL AS N_SERVICE_TRACK  
,NULL AS N_SCHEDULE  
,NULL AS D_FROM_DATE  
,NULL AS D_TO_DATE  
,A.N_PO_ID AS N_PO_ID  
,ISNULL(A.S_PO_IDENTIFIER,'') AS S_PO_IDENTIFIER  
,ISNULL(A.S_PO_REFERENCE,'') AS S_PO_REFERENCE  
,ISNULL(A.S_PO_CUSTOMER_ID,'') AS S_PO_CUSTOMER_ID  
,ISNULL(A.S_INVOICING_EXTRA_INFO1,'') AS S_INVOICING_EXTRA_INFO1  
,ISNULL(A.S_INVOICING_EXTRA_INFO2,'') AS S_INVOICING_EXTRA_INFO2  
,ISNULL(A.S_INVOICING_EXTRA_INFO3,'') AS S_INVOICING_EXTRA_INFO3  
,ISNULL(A.S_INVOICING_EXTRA_INFO4,'') AS S_INVOICING_EXTRA_INFO4  
,ISNULL(A.S_INVOICING_EXTRA_INFO5,'') AS S_INVOICING_EXTRA_INFO5  
,ISNULL(A.S_INVOICING_EXTRA_INFO6,'') AS S_INVOICING_EXTRA_INFO6  
,A.N_AMOUNT AS N_VALUE  
,0 AS N_UNIT  
,0 AS N_RATE  
,SOW.S_CURRENCY AS S_BILLING_CURRENCY  
,A.S_FIN_BU AS S_BUINESS_UNIT  
,ISNULL(SOW.S_FINANCE_ID,'') AS  S_FIN_ID  
,'' AS S_ORDER_ID  
,A.S_EXECUTION_MODEL AS S_EXECUTION_MODEL  
,0 AS N_RATE_ID  
,'' AS S_PROFILE  
,A.N_UNIQUE_ID N_DATA_TRACK_ID  
,NULL N_CONTRIBUTION_PERCENT  
,NULL N_ACCRUED_VALUE  
,1 AS N_NIVOICE_STATUS  
,'TB-OTE' S_SOURCE  
,A.S_REVENUE_TYPE AS S_OTHERS_COMP_TYPE  
,'OTE' AS S_OTE_ATTRIBUTE  
,NULL AS N_PROJ_INVOICE_ID  
,SOW.S_CURRENCY AS RATE_CARD_CURRENCY  
,dbo.FUNC_ROUND_UP_DOWN_INVOICE_VALUE_O2C(A.N_AMOUNT, @ROUND_DETAIL_LEVEL,@DECIMAL_DETAIL_LEVEL) N_BILL_INV_VALUE  
,CAST(NULL AS varchar(100)) AS TAX_CODE  
,CAST (NULL AS DECIMAL(10,2)) AS TAX_PERCENTAGE  
,CAST(NULL AS varchar(100)) AS TAX_DESCRIPTION  
--INTO #TEMP_TB_OTE  
FROM M_TB_ONE_TIME_REVENUE_ENTRY A  
INNER JOIN M_RT_SOW_MASTER SOW ON SOW.N_SOW_ID = A.N_SOW_ID  
WHERE SOW.S_CUSTOMER_ID = @CUSTOMER_ID   
  AND SOW.S_BILLING_TYPE= @BILLING_TYPE AND A.S_PROJECT_TYPE=@BILLING_TYPE  
  AND A.D_CREATED_DATE>='2021-01-01'  
  AND SOW.N_SOW_ID IN(SELECT [SOW_ID] FROM #TEMP_INPUT_PARAMS WHERE [BILLING_TYPE_REF]='FPPTBOTE')   
  AND A.N_UNIQUE_ID  IN(SELECT [VALUE] FROM #TEMP_INPUT_PARAMS WHERE [BILLING_TYPE_REF]='FPPTBOTE')       
     --AND SOW.S_ORDER_ID IS NOT NULL  
  AND A.S_TB_STATUS IN('ASDM APPROVED','UH APPROVED')  
  AND A.S_RT_STATUS IS NULL    
  
UNION ALL  
SELECT CAST(@BATCH_NO AS VARCHAR(50)) AS N_BATCH_NO  
,SOW.S_CUSTOMER_ID AS S_CUSTOMER_ID  
,SOW.S_BILLING_TYPE AS S_BILLING_TYPE  
--,DATENAME( MONTH , DATEADD( MONTH , A.N_MONTH , -1 ) ) AS S_BILLING_CYCLE  
,CONVERT(varchar, DATEADD(month,A.N_MONTH-1,DATEADD(year,A.N_YEAR-1900,0)), 103)+' - '+CONVERT(varchar, DATEADD(day,-1,DATEADD(month,A.N_MONTH,DATEADD(year,A.N_YEAR-1900,0))), 103)  AS 'S_BILLING_CYCLE'  
,A.N_MONTH AS N_MONTH  
,A.N_YEAR AS N_YEAR  
,@consolidation_Key AS N_MAPPING_ID  
,A.N_SOW_ID AS N_SOW_ID  
,0 AS N_MILESTONE_ID  
,'' AS S_MILESTONE_NAME  
,NULL AS IS_SOW_LEVEL  
,NULL AS IS_EMPLOYEE_LEVEL  
,NULL S_EMPLOYEE_ID  
,NULL AS N_SERVICE_TRACK  
,NULL AS N_SCHEDULE  
,NULL AS D_FROM_DATE  
,NULL AS D_TO_DATE  
,A.N_PO_ID AS N_PO_ID  
,ISNULL(A.S_PO_IDENTIFIER,'') AS S_PO_IDENTIFIER  
,ISNULL(A.S_PO_REFERENCE,'') AS S_PO_REFERENCE  
,ISNULL(A.S_PO_CUSTOMER_ID,'') AS S_PO_CUSTOMER_ID  
,ISNULL(A.S_INVOICING_EXTRA_INFO1,'') AS S_INVOICING_EXTRA_INFO1  
,ISNULL(A.S_INVOICING_EXTRA_INFO2,'') AS S_INVOICING_EXTRA_INFO2  
,ISNULL(A.S_INVOICING_EXTRA_INFO3,'') AS S_INVOICING_EXTRA_INFO3  
,ISNULL(A.S_INVOICING_EXTRA_INFO4,'') AS S_INVOICING_EXTRA_INFO4  
,ISNULL(A.S_INVOICING_EXTRA_INFO5,'') AS S_INVOICING_EXTRA_INFO5  
,ISNULL(A.S_INVOICING_EXTRA_INFO6,'') AS S_INVOICING_EXTRA_INFO6  
,A.N_AMOUNT AS N_VALUE  
,0 AS N_UNIT  
,0 AS N_RATE  
,SOW.S_CURRENCY AS S_BILLING_CURRENCY  
,A.S_FIN_BU AS S_BUINESS_UNIT  
,ISNULL(SOW.S_FINANCE_ID,'') AS  S_FIN_ID  
,'' AS S_ORDER_ID  
,A.S_EXECUTION_MODEL AS S_EXECUTION_MODEL  
,0 AS N_RATE_ID  
,'' AS S_PROFILE  
,A.N_UNIQUE_ID N_DATA_TRACK_ID  
,NULL N_CONTRIBUTION_PERCENT  
,NULL N_ACCRUED_VALUE  
,1 AS N_NIVOICE_STATUS  
,'RT-OTE' S_SOURCE  
,A.S_REVENUE_TYPE AS S_OTHERS_COMP_TYPE  
,'OTE' AS S_OTE_ATTRIBUTE  
,NULL AS N_PROJ_INVOICE_ID  
,SOW.S_CURRENCY AS RATE_CARD_CURRENCY  
,dbo.FUNC_ROUND_UP_DOWN_INVOICE_VALUE_O2C(A.N_AMOUNT, @ROUND_DETAIL_LEVEL,@DECIMAL_DETAIL_LEVEL) N_BILL_INV_VALUE  
,CAST(NULL AS varchar(100)) AS TAX_CODE  
,CAST (NULL AS DECIMAL(10,2)) AS TAX_PERCENTAGE  
,CAST(NULL AS varchar(100)) AS TAX_DESCRIPTION  
--INTO #TEMP_RT_OTE  
FROM M_RT_ONE_TIME_REVENUE_ENTRY A  
INNER JOIN M_RT_SOW_MASTER SOW ON SOW.N_SOW_ID = A.N_SOW_ID  
WHERE SOW.S_CUSTOMER_ID = @CUSTOMER_ID    
  AND SOW.S_BILLING_TYPE= @BILLING_TYPE AND A.S_PROJECT_TYPE=@BILLING_TYPE  
  AND A.D_CREATED_DATE>='2021-01-01'  
  AND SOW.N_SOW_ID IN(SELECT [SOW_ID] FROM #TEMP_INPUT_PARAMS WHERE [BILLING_TYPE_REF]='FPPRTOTE')   
  AND A.N_UNIQUE_ID  IN(SELECT [VALUE] FROM #TEMP_INPUT_PARAMS WHERE [BILLING_TYPE_REF]='FPPRTOTE')        
     --AND SOW.S_ORDER_ID IS NOT NULL  
  AND A.S_RT_STATUS IN('MAKER SUBMITTED')  
) AA  
  
---FPP discount Distribution Starts  
select * into #TEMP_TIME_FPP_CONSOL from #TEMP_FPP_INVOICE with(nolock) where s_source in('TIMESHEET')   
select * into #TEMP_FPP_EXPENSES_INV_CONSOL from #TEMP_FPP_INVOICE with(nolock) where   s_source in('EXPENSES')  
 /*Since Discount needs to be distributed milestone and po wise, the discount is first cleaned up*/  
DELETE FROM #TEMP_FPP_INVOICE WHERE  S_SOURCE IN('EXPENSES')  AND S_OTHERS_COMP_TYPE='DISC'  
  
select N_SOW_ID,N_MILESTONE_ID,sum(abs(N_VALUE)) as InV_SUM_VALUE into #FPP_SOW_MILESTONE_INV    
from #TEMP_TIME_FPP_CONSOL where N_VALUE<>0  
group by N_SOW_ID,N_MILESTONE_ID  
select   
TEMP_INV_CONSOL.* ,isnull(abs(TEMP_INV_CONSOL.n_value),0)/isnull(InV_SUM_VALUE,0) Invoice_Contribution  
 into #temp_FPP_Inv_Contribution  
from  
#TEMP_TIME_FPP_CONSOL TEMP_INV_CONSOL   
inner join #FPP_SOW_MILESTONE_INV EXEC_MODL_INV  on EXEC_MODL_INV.N_SOW_ID=TEMP_INV_CONSOL.N_SOW_ID  
  and EXEC_MODL_INV.N_MILESTONE_ID=TEMP_INV_CONSOL.N_MILESTONE_ID  
  and TEMP_INV_CONSOL.n_value<>0--filter 0 invoice - KAMESH -IS-1301 -JAN-30-2021  
  order by TEMP_INV_CONSOL.N_SOW_ID,TEMP_INV_CONSOL.N_MILESTONE_ID  
  
SELECT  
ROW_NUMBER() OVER(PARTITION BY TEMP_INV_CONSOL.N_SOW_ID,TEMP_INV_CONSOL.N_MILESTONE_ID ORDER BY TEMP_INV_CONSOL.N_SOW_ID,TEMP_INV_CONSOL.N_MILESTONE_ID DESC) AS Row_Num,  
  SPLIT_DISCOUNT.N_BATCH_NO  
 ,TEMP_INV_CONSOL.S_CUSTOMER_ID  
 ,TEMP_INV_CONSOL.S_BILLING_TYPE  
 ,TEMP_INV_CONSOL.S_BILLING_CYCLE  
 ,TEMP_INV_CONSOL.N_MONTH  
 ,TEMP_INV_CONSOL.N_YEAR  
 ,TEMP_INV_CONSOL.N_MAPPING_ID  
 ,TEMP_INV_CONSOL.N_SOW_ID  
 ,TEMP_INV_CONSOL.N_MILESTONE_ID  
 ,TEMP_INV_CONSOL.S_MILESTONE_NAME  
 ,TEMP_INV_CONSOL.IS_SOW_LEVEL  
 ,TEMP_INV_CONSOL.IS_EMPLOYEE_LEVEL  
 ,TEMP_INV_CONSOL.S_EMPLOYEE_ID  
 ,TEMP_INV_CONSOL.N_SERVICE_TRACK  
 ,TEMP_INV_CONSOL.N_SCHEDULE  
 ,TEMP_INV_CONSOL.D_FROM_DATE  
 ,TEMP_INV_CONSOL.D_TO_DATE  
 ,TEMP_INV_CONSOL.N_PO_ID  
 ,TEMP_INV_CONSOL.S_PO_IDENTIFIER  
 ,TEMP_INV_CONSOL.S_PO_REFERENCE  
 ,TEMP_INV_CONSOL.S_PO_CUSTOMER_ID  
 ,TEMP_INV_CONSOL.S_INVOICING_EXTRA_INFO1  
 ,TEMP_INV_CONSOL.S_INVOICING_EXTRA_INFO2  
 ,TEMP_INV_CONSOL.S_INVOICING_EXTRA_INFO3  
 ,TEMP_INV_CONSOL.S_INVOICING_EXTRA_INFO4  
 ,TEMP_INV_CONSOL.S_INVOICING_EXTRA_INFO5  
 ,TEMP_INV_CONSOL.S_INVOICING_EXTRA_INFO6  
 ,SPLIT_DISCOUNT.N_VALUE * Invoice_Contribution as N_VALUE  
 --,TEMP_INV_CONSOL.N_UNIT  
 --,TEMP_INV_CONSOL.N_RATE  
 ,0 AS N_UNIT  
 ,0 AS N_RATE  
 ,TEMP_INV_CONSOL.S_BILLING_CURRENCY  
 ,TEMP_INV_CONSOL.S_BUINESS_UNIT  
 ,TEMP_INV_CONSOL.S_FIN_ID  
 ,TEMP_INV_CONSOL.S_ORDER_ID  
 ,SPLIT_DISCOUNT.S_EXECUTION_MODEL  
 ,TEMP_INV_CONSOL.N_RATE_ID  
 ,TEMP_INV_CONSOL.S_PROFILE  
 ,SPLIT_DISCOUNT.N_DATA_TRACK_ID  
 ,SPLIT_DISCOUNT.N_CONTRIBUTION_PERCENT  
 ,SPLIT_DISCOUNT.N_ACCRUED_VALUE  
 ,SPLIT_DISCOUNT.N_NIVOICE_STATUS  
 ,SPLIT_DISCOUNT.S_SOURCE  
 ,SPLIT_DISCOUNT.S_OTHERS_COMP_TYPE  
 ,TEMP_INV_CONSOL.S_OTE  
 ,SPLIT_DISCOUNT.N_PROJ_INVOICE_ID  
 ,SPLIT_DISCOUNT.RATE_CARD_CURRENCY  
 ,SPLIT_DISCOUNT.N_BILL_INV_VALUE * Invoice_Contribution N_BILL_INV_VALUE --Billing Invoice value also split based on Invoiced distribution for discount - 43746 - 19/05/21  
 ,CAST(NULL AS varchar(100)) AS TAX_CODE  
 ,CAST (NULL AS DECIMAL(10,2)) AS TAX_PERCENTAGE  
 ,CAST(NULL AS varchar(100)) AS TAX_DESCRIPTION  
  into #temp_FPP_DiscountDistribution  
   FROM #TEMP_FPP_EXPENSES_INV_CONSOL SPLIT_DISCOUNT  
inner join #temp_FPP_Inv_Contribution TEMP_INV_CONSOL   
  on SPLIT_DISCOUNT.N_SOW_ID=TEMP_INV_CONSOL.N_SOW_ID  
  and SPLIT_DISCOUNT.N_MILESTONE_ID=TEMP_INV_CONSOL.N_MILESTONE_ID  
where SPLIT_DISCOUNT.S_OTHERS_COMP_TYPE='DISC'  
order by TEMP_INV_CONSOL.N_SOW_ID,TEMP_INV_CONSOL.N_MILESTONE_ID  
  
/*  
--IDENTIFYING THE LEFTOVER REMAINING VALUE WHICH IS NOT COVERED DURING THE DISTRIBUTION SPLIT  
  
select *,cast(AA.Proj_Discount_Sum as numeric(18,9))-cast(BB.Discount_Distribution_Sum as numeric(18,9)) discount_actual_distrib_diff from (  
select N_SOW_ID,sum(cast(n_value as numeric(18,9))) Proj_Discount_Sum,N_MILESTONE_ID from #TEMP_FPP_EXPENSES_INV_CONSOL where S_OTHERS_COMP_TYPE='DISC' group by N_SOW_ID,N_MILESTONE_ID  
)AA,  
(  
select min(row_num)row_num,N_SOW_ID,sum(cast(n_value as numeric(18,9))) Discount_Distribution_Sum,N_MILESTONE_ID from #temp_FPP_DiscountDistribution group by N_SOW_ID,N_MILESTONE_ID  
)BB  
where AA.N_SOW_ID=BB.N_SOW_ID   
and AA.N_MILESTONE_ID=BB.N_MILESTONE_ID  
and AA.Proj_Discount_Sum!=BB.Discount_Distribution_Sum  
  
  
--and BB.row_num=1 and N_PROJ_INVOICE_ID=860723  
*/  
  
--START   
/*ADJUSTING THE BALANCE DISCOUNT WHICH IS NOT COVERED DURING DISCOUNT VALUE DITRIBUTION SPLIT IN THE ABOVE SECTION  
 TO ANY OF THE ONE TOP RECORD AGAINST THE SOW AND Milestone no*/  
/*  
--verify query  
select  cc.*,AA.*,BB.*,cast(AA.Proj_Discount_Sum as numeric(18,9))-cast(BB.Discount_Distribution_Sum as numeric(18,9))    
from (  
select N_SOW_ID,sum(cast(n_value as numeric(18,9))) Proj_Discount_Sum,N_MILESTONE_ID from #TEMP_FPP_EXPENSES_INV_CONSOL where S_OTHERS_COMP_TYPE='DISC' group by N_SOW_ID,N_MILESTONE_ID  
)AA,  
(  
select min(row_num)row_num,N_SOW_ID,sum(cast(n_value as numeric(18,9))) Discount_Distribution_Sum,N_MILESTONE_ID from #temp_FPP_DiscountDistribution group by N_SOW_ID,N_MILESTONE_ID  
)BB  
,#temp_FPP_DiscountDistribution CC  
where  
 AA.N_SOW_ID=BB.N_SOW_ID   
and AA.N_MILESTONE_ID=BB.N_MILESTONE_ID    
and BB.N_SOW_ID=CC.N_SOW_ID   
and BB.N_MILESTONE_ID=CC.N_MILESTONE_ID  
and AA.Proj_Discount_Sum!=BB.Discount_Distribution_Sum  
and BB.row_num=cc.row_num  
and BB.row_num=1*/  
  
update CC set CC.n_value=CC.n_value+(cast(AA.Proj_Discount_Sum as numeric(18,9))-cast(BB.Discount_Distribution_Sum as numeric(18,9)))  
from (  
select N_SOW_ID,sum(cast(n_value as numeric(18,9))) Proj_Discount_Sum,N_MILESTONE_ID from #TEMP_FPP_EXPENSES_INV_CONSOL where S_OTHERS_COMP_TYPE='DISC' group by N_SOW_ID,N_MILESTONE_ID  
)AA,  
(  
select min(row_num)row_num,N_SOW_ID,sum(cast(n_value as numeric(18,9))) Discount_Distribution_Sum,N_MILESTONE_ID from #temp_FPP_DiscountDistribution group by N_SOW_ID,N_MILESTONE_ID  
)BB  
,#temp_FPP_DiscountDistribution CC  
where  
 AA.N_SOW_ID=BB.N_SOW_ID   
and AA.N_MILESTONE_ID=BB.N_MILESTONE_ID    
and BB.N_SOW_ID=CC.N_SOW_ID   
and BB.N_MILESTONE_ID=CC.N_MILESTONE_ID  
and AA.Proj_Discount_Sum!=BB.Discount_Distribution_Sum  
and BB.row_num=cc.row_num  
and BB.row_num=1  
  
--after update validate  
/*  
--Validate Query  
  
select *,cast(AA.Proj_Discount_Sum as numeric(18,9))-cast(BB.Discount_Distribution_Sum as numeric(18,9)) discount_actual_distrib_diff from (  
select N_SOW_ID,sum(cast(n_value as numeric(18,9))) Proj_Discount_Sum,N_MILESTONE_ID from #TEMP_FPP_EXPENSES_INV_CONSOL where S_OTHERS_COMP_TYPE='DISC' group by N_SOW_ID,N_MILESTONE_ID  
)AA,  
(  
select min(row_num)row_num,N_SOW_ID,sum(cast(n_value as numeric(18,9))) Discount_Distribution_Sum,N_MILESTONE_ID from #temp_FPP_DiscountDistribution group by N_SOW_ID,N_MILESTONE_ID  
)BB  
where AA.N_SOW_ID=BB.N_SOW_ID   
and AA.N_MILESTONE_ID=BB.N_MILESTONE_ID  
and AA.Proj_Discount_Sum!=BB.Discount_Distribution_Sum  
*/  
--END Adjusting the balance discount which is not covered during discount value ditribution split in the above section  
  
select N_BATCH_NO,S_CUSTOMER_ID,S_BILLING_TYPE,S_BILLING_CYCLE,N_MONTH,N_YEAR,N_MAPPING_ID,N_SOW_ID  
,N_MILESTONE_ID,S_MILESTONE_NAME,IS_SOW_LEVEL,IS_EMPLOYEE_LEVEL,S_EMPLOYEE_ID,N_SERVICE_TRACK,N_SCHEDULE  
,D_FROM_DATE,D_TO_DATE,N_PO_ID,S_PO_IDENTIFIER,S_PO_REFERENCE,S_PO_CUSTOMER_ID  
,S_INVOICING_EXTRA_INFO1,S_INVOICING_EXTRA_INFO2,S_INVOICING_EXTRA_INFO3,S_INVOICING_EXTRA_INFO4  
,S_INVOICING_EXTRA_INFO5,S_INVOICING_EXTRA_INFO6,N_VALUE,  
0 AS N_UNIT,0 AS N_RATE,  
S_BILLING_CURRENCY,S_BUINESS_UNIT,S_FIN_ID  
,S_ORDER_ID,S_EXECUTION_MODEL,N_RATE_ID,S_PROFILE,N_DATA_TRACK_ID,N_CONTRIBUTION_PERCENT  
,N_ACCRUED_VALUE,N_NIVOICE_STATUS,S_SOURCE,S_OTHERS_COMP_TYPE,S_OTE,N_PROJ_INVOICE_ID  
,RATE_CARD_CURRENCY,N_BILL_INV_VALUE   
,TAX_CODE  
,TAX_PERCENTAGE  
,TAX_DESCRIPTION  
into #TEMP_FPP_TIMESHEET_DISTRBUTED_DISC  
from   
#temp_FPP_DiscountDistribution  
  
----VAT Tax Calculation FPP --Devi R --11-Oct-2021 Start  
  
  CREATE TABLE #TAXCODE_FPP (S_BUSINESS_UNIT VARCHAR(MAX), S_BILL_TO_CUST_ID VARCHAR(MAX), S_NAME VARCHAR(MAX), S_TAX_CD VARCHAR(MAX), D_UPLOADED_DATE DATETIME, SETID VARCHAR(MAX), TAX_CD VARCHAR(MAX), EFF_STATUS VARCHAR(MAX), EFFDT DATETIME, DESCR VARCH
AR(MAX), DESCRSHORT VARCHAR(MAX), TAX_PCT FLOAT, TAX_AUTHORITY_CD VARCHAR(MAX), TAX_CD_TYPE VARCHAR(MAX), TYPE_DESCR VARCHAR(MAX), ACCOUNT INT,CUST_COUNTRY VARCHAR(MAX))  
  
   DECLARE @SEQ_FPP INT  
  
   SELECT TOP 1 @SEQ_FPP=  ISNULL(N_BILL_TO_SEQ_NO,1) FROM T_TB_INVOICE_PRINT_HEADER_COLUMN_MAPPING WITH (NOLOCK) WHERE S_CUSTOMER_ID=@Customer_id AND S_BILLING_TYPE=@billing_type  
     
   select * into #LOCATION_FPP from FINANCEDB.FIN90PRD.dbo.PS_LOCATION_TBL B WITH (NOLOCK) WHERE EFF_STATUS='A' AND B.EFFDT = (SELECT MAX(B1.EFFDT) FROM FINANCEDB.FIN90PRD.dbo.PS_LOCATION_TBL B1 WITH (NOLOCK)  WHERE B.SETID = B1.SETID AND B.LOCATION = B1.
LOCATION)  
    
    
   INSERT INTO #TAXCODE_FPP EXECUTE FINANCEDB.FIN90PRD.dbo.USP_HX_BI_TAX_V1 '',@Customer_id,@SEQ_FPP  
   
   SELECT A.*,CASE WHEN A.TAX_CD_TYPE='V' AND A.CUST_COUNTRY COLLATE SQL_Latin1_General_CP1_CI_AS= B.COUNTRY THEN 'DOMESTIC'   
   WHEN A.TAX_CD_TYPE='V' AND A.CUST_COUNTRY COLLATE SQL_Latin1_General_CP1_CI_AS<> B.COUNTRY THEN 'EXPORT' ELSE S_NAME END AS TAX_TYPE   
   INTO #TX1_FPP  FROM #TAXCODE_FPP A ,#LOCATION_FPP  B   
   WHERE  A.S_BUSINESS_UNIT COLLATE SQL_Latin1_General_CP1_CI_AS=B.SETID  
   SELECT  * INTO #TX2_FPP FROM #TX1_FPP WHERE s_name=TAX_TYPE   
  
   ----Tax Calculation FPP --Devi R --11-Oct-2021 End  
  
insert into #TEMP_FPP_INVOICE  
select * from  #TEMP_FPP_TIMESHEET_DISTRBUTED_DISC  
---FPP discount Distribution Ends  
  INSERT INTO #TEMP_FPP_INVOICE    
   SELECT        
   CON.N_BATCH_NO  
   ,CON.S_CUSTOMER_ID  
   ,CON.S_BILLING_TYPE  
   ,CON.S_BILLING_CYCLE  
   ,CON.N_MONTH  
   ,CON.N_YEAR  
   ,CON.N_MAPPING_ID  
   ,CON.N_SOW_ID  
   ,CON.N_MILESTONE_ID  
   ,CON.S_MILESTONE_NAME  
   ,CON.IS_SOW_LEVEL  
   ,CON.IS_EMPLOYEE_LEVEL  
   ,CON.S_EMPLOYEE_ID  
   ,CON.N_SERVICE_TRACK  
   ,CON.N_SCHEDULE  
   ,CON.D_FROM_DATE  
   ,CON.D_TO_DATE  
   ,CON.N_PO_ID  
   ,CON.S_PO_IDENTIFIER  
   ,CON.S_PO_REFERENCE  
   ,CON.S_PO_CUSTOMER_ID  
   ,CON.S_INVOICING_EXTRA_INFO1  
   ,CON.S_INVOICING_EXTRA_INFO2  
   ,CON.S_INVOICING_EXTRA_INFO3  
   ,CON.S_INVOICING_EXTRA_INFO4  
   ,CON.S_INVOICING_EXTRA_INFO5  
   ,CON.S_INVOICING_EXTRA_INFO6  
   ,0 AS N_VALUE  
   ,0 as N_UNIT  
   ,CON.N_RATE  
   ,CON.S_BILLING_CURRENCY  
   ,CON.S_BUINESS_UNIT  
   ,CON.S_FIN_ID  
   ,CON.S_ORDER_ID  
   ,CON.S_EXECUTION_MODEL  
   ,CON.N_RATE_ID  
   ,CON.S_PROFILE  
   ,CON.N_DATA_TRACK_ID  
   ,CON.N_CONTRIBUTION_PERCENT  
   ,CON.N_ACCRUED_VALUE  
   ,CON.N_NIVOICE_STATUS  
   ,'TAX' AS S_SOURCE  
   ,CON.S_OTHERS_COMP_TYPE  
   ,CON.S_OTE  
   ,CON.N_PROJ_INVOICE_ID  
   ,CON.RATE_CARD_CURRENCY  
   ,CASE WHEN (CON.N_BILL_INV_VALUE *ISNULL(TAX_CD.TAX_PCT,0))=0 THEN 0 ELSE (CON.N_BILL_INV_VALUE *ISNULL(TAX_CD.TAX_PCT,0))/100 END  AS  N_BILL_INV_VALUE  
   ,TAX_CD.S_TAX_CD AS TAX_CODE  
   ,TAX_CD.TAX_PCT AS TAX_PERCENTAGE  
   ,TAX_CD.DESCRSHORT AS TAX_DESCRIPTION  
   FROM    
   #TEMP_FPP_INVOICE CON   
   LEFT JOIN #TX2_FPP TAX_CD   
   ON TAX_CD.S_BILL_TO_CUST_ID COLLATE SQL_Latin1_General_CP1_CI_AS=CON.S_CUSTOMER_ID  
   AND CON.S_BUINESS_UNIT COLLATE SQL_Latin1_General_CP1_CI_AS=TAX_CD.S_BUSINESS_UNIT  
   WHERE TAX_CD.S_TAX_CD IS NOT NULL AND TAX_CD.TAX_PCT IS NOT NULL   
  
   --SELECT * FROM #TEMP_FPP_INVOICE  
  
-----------------Validate PO value starts  
--SELECT S_PO_IDENTIFIER, S_PO_CUSTOMER_ID,S_BILLING_TYPE, SUM(N_Value) AS N_Value INTO #PODETAILS2 FROM #TEMP_FPP_INVOICE  
--GROUP BY  S_PO_IDENTIFIER, S_PO_CUSTOMER_ID,S_BILLING_TYPE  
  
SELECT *INTO #PO_SUM_FPP  FROM #TEMP_FPP_INVOICE  WHERE S_SOURCE<>'TAX'  
  SELECT *INTO #PO_SUM_FPP_TAX  FROM #TEMP_FPP_INVOICE  WHERE S_SOURCE='TAX'  
  
  SELECT S_PO_IDENTIFIER, S_PO_CUSTOMER_ID,S_BILLING_TYPE, SUM(N_BILL_INV_VALUE) AS N_Value,N_BATCH_NO   
  INTO #PO1_FPP FROM #PO_SUM_FPP  
  GROUP BY  S_PO_IDENTIFIER, S_PO_CUSTOMER_ID,S_BILLING_TYPE,N_BATCH_NO  
  
  SELECT S_PO_IDENTIFIER, S_PO_CUSTOMER_ID,S_BILLING_TYPE, SUM(N_BILL_INV_VALUE) AS N_Value,N_BATCH_NO   
  INTO #PO11_FPP FROM #PO_SUM_FPP_TAX  
  GROUP BY  S_PO_IDENTIFIER, S_PO_CUSTOMER_ID,S_BILLING_TYPE,N_BATCH_NO  
  
  SELECT case when b.B_IS_TAX_INCLUSIVE=1 then isnull(a.n_value,0)+ISNULL(c.N_Value,0)   
  else a.n_value end as n_value--Added missing column as error throwing - Surendar - 04/27/2021 - INCT0035890  
  ,b.N_PO_VALUE,b.N_PO_INVOICED_VALUE,a.S_PO_IDENTIFIER  
       ,a.S_PO_CUSTOMER_ID  
       ,a.S_BILLING_TYPE INTO #PODETAILS2 FROM #PO1_FPP a  
  LEFT JOIN  #PO11_FPP c on a.N_BATCH_NO=c.N_BATCH_NO and a.S_PO_IDENTIFIER=c.S_PO_IDENTIFIER,  
  [M_TB_PO_MASTER_O2C] b WHERE a.S_PO_IDENTIFIER=b.S_PO_IDENTIFIER AND a.S_PO_CUSTOMER_ID=b.S_CUSTOMER_ID  
  AND a.S_PO_IDENTIFIER IS NOT NULL AND a.S_BILLING_TYPE=b.S_BILLING_MODE   
  /*Mismatch in po value and invoice value INCT0034911*/  
IF EXISTS (SELECT * FROM #PODETAILS2   
  WHERE CONVERT(NUMERIC(15,2),N_Value)>CONVERT(NUMERIC(15,2),(N_PO_VALUE-N_PO_INVOICED_VALUE)))--Increased numeric as PO datatype throwing error--Rasavalli D --04/23 - INCT0035663  
BEGIN  
 SELECT @ERROR_PO_ID = COALESCE(@ERROR_PO_ID + ', ', '') + CAST(a.S_PO_IDENTIFIER AS VARCHAR(max))  
    FROM #PODETAILS2 a,   
 [M_TB_PO_MASTER_O2C] b WHERE a.S_PO_IDENTIFIER=b.S_PO_IDENTIFIER AND a.S_PO_CUSTOMER_ID=b.S_CUSTOMER_ID  
 AND a.S_PO_IDENTIFIER IS NOT NULL AND a.S_BILLING_TYPE=b.S_BILLING_MODE   
 AND a.N_Value>(b.N_PO_VALUE-b.N_PO_INVOICED_VALUE)  
  
 SET @STATUS_VALUE = 409          
 SET @STATUS_DESCRIPTION = 'Invoice value exceeded PO available value for  '+@ERROR_PO_ID  
END  
ELSE  
BEGIN  
SET @SQLINSERT= 'INSERT INTO T_TB_INVOICE_CONSOLIDATION_BUFFER_BATCH_O2C(N_BATCH_NO,S_CUSTOMER_ID,S_BILLING_TYPE,S_BILLING_CYCLE,N_MONTH,N_YEAR,N_MAPPING_ID,N_SOW_ID,N_MILESTONE_ID,S_MILESTONE_NAME,IS_SOW_LEVEL,IS_EMPLOYEE_LEVEL  
,S_EMPLOYEE_ID,N_SERVICE_TRACK,N_SCHEDULE,D_FROM_DATE,D_TO_DATE,N_PO_ID  
,S_PO_IDENTIFIER,S_PO_REFERENCE,S_PO_CUSTOMER_ID,S_INVOICING_EXTRA_INFO1,S_INVOICING_EXTRA_INFO2  
,S_INVOICING_EXTRA_INFO3,S_INVOICING_EXTRA_INFO4,S_INVOICING_EXTRA_INFO5,S_INVOICING_EXTRA_INFO6,N_VALUE,N_UNIT,N_RATE  
,S_BILLING_CURRENCY,S_BUINESS_UNIT,S_FIN_ID,S_ORDER_ID  
,S_EXECUTION_MODEL,N_RATE_ID,S_PROFILE  
,N_DATA_TRACK_ID,  
N_CONTRIBUTION_PERCENT,  
N_ACCRUED_VALUE,  
N_NIVOICE_STATUS,  
S_SOURCE,  
S_OTHERS_COMP_TYPE,  
S_OTE,  
N_PROJ_INVOICE_ID,RATE_CARD_CURRENCY,N_BILL_INV_VALUE,TAX_CODE,TAX_PERCENTAGE,TAX_DESCRIPTION  
  
)  
SELECT * FROM #TEMP_FPP_INVOICE where N_BILL_INV_VALUE<>0 ORDER BY ROW_NUMBER() OVER(ORDER BY '+@invocelevel_grouping_col+')'  
  --PRINT @SQLInsert  
  exec(@SQLInsert)  
END  
END  
ELSE IF(@billing_type='VOL')  
BEGIN  
CREATE TABLE #TEMP_VOLUME (N_SOW_ID INT,N_SCHEDULE_ID INT,S_SCHEDULE_NAME VARCHAR(100),S_FIN_BU VARCHAR(10)   
,D_BILLING_START_DATE DATETIME,D_BILLING_END_DATE DATETIME,FIXED_REVENUE FLOAT,N_TRACK_ID INT,SERVICE_TRACK VARCHAR(100)  
,VOLUME_REVENUE FLOAT,TOTAL_VOLUME_REVENUE FLOAT,FIXED_REVENUE_ALLOCATION FLOAT,INVOICE_VALUE FLOAT,N_VOL_INVOICING_ID INT,N_VOL_BASE_CHARGE INT,N_ACTUAL_VOLUME FLOAT,N_MONTH INT,N_YEAR INT)   
  
INSERT INTO #TEMP_VOLUME (N_SOW_ID ,N_SCHEDULE_ID ,S_SCHEDULE_NAME ,S_FIN_BU,D_BILLING_START_DATE ,D_BILLING_END_DATE,   
FIXED_REVENUE,N_TRACK_ID ,SERVICE_TRACK,VOLUME_REVENUE,N_ACTUAL_VOLUME,   
N_VOL_INVOICING_ID,N_VOL_BASE_CHARGE,N_MONTH,N_YEAR)   
SELECT DISTINCT A.N_SOW_ID,C.N_SCHEDULE_ID,C.S_SCHEDULE_NAME,A.S_FIN_BU,C.D_INVOICE_START_DATE,C.D_INVOICE_DUE_DATE   
,E.N_MONTHLY_FIXED_INVOICE AS FIXED_REVENUE,B.N_TRACK_ID,B.S_TRACK_NAME,ROUND(A.N_MONTHLY_VOLUME_REVENUE,2) AS VOLUME_REVENUE,F.N_ACTUAL_VOLUME   
,E.N_VOL_INVOICING_ID,B.N_VOL_BASE_CHARGE,A.N_MONTH,A.N_YEAR  
FROM M_VOL_SUMMARY_FOR_THE_MONTH (NOLOCK) A   
INNER JOIN M_VOL_SERVICE_TRACK (NOLOCK) B ON B.N_SOW_ID=A.N_SOW_ID AND B.N_TRACK_ID=A.N_TRACK_ID   
INNER JOIN M_VOL_INVOICING (NOLOCK) E ON E.N_SOW_ID=A.N_SOW_ID AND E.N_VOL_INVOICING_ID=A.N_VOL_INVOICING_ID   
INNER JOIN M_VOL_FIXED_REV_SCHEDULES (NOLOCK) C ON C.N_SOW_ID=E.N_SOW_ID AND C.N_SCHEDULE_ID=E.N_SCHEDULE_ID   
INNER JOIN M_VOL_VARIABLE_VOLUME_BILLING (NOLOCK) F ON F.N_SOW_ID=E.N_SOW_ID AND F.N_SCHEDULE_ID=E.N_SCHEDULE_ID AND F.N_TRACK_ID=B.N_TRACK_ID AND F.N_VOL_VAR_BILLING_ID=A.N_VOL_VAR_BILLING_ID   
WHERE A.N_SOW_ID IN(SELECT [SOW_ID] FROM #TEMP_INPUT_PARAMS WHERE [BILLING_TYPE_REF]='VOL')  AND A.IS_VALID=1 AND (A.S_VER_SOURCE='ORG')   
AND E.N_SCHEDULE_ID IN(SELECT [VALUE] FROM #TEMP_INPUT_PARAMS WHERE [BILLING_TYPE_REF]='VOL')  
   
SELECT A.N_SOW_ID,N_SCHEDULE_ID,N_VOL_INVOICING_ID,SUM(VOLUME_REVENUE) AS TOTAL_VOLUME_REVENUE   
INTO #TOTAL_VOLUME_REVENUE   
FROM #TEMP_VOLUME A WHERE N_VOL_BASE_CHARGE=1   
GROUP BY A.N_SOW_ID,N_SCHEDULE_ID,N_VOL_INVOICING_ID   
   
UPDATE A SET A.TOTAL_VOLUME_REVENUE=ISNULL(B.TOTAL_VOLUME_REVENUE,0)   
FROM #TEMP_VOLUME A,#TOTAL_VOLUME_REVENUE B   
WHERE A.N_SOW_ID=B.N_SOW_ID   
AND A.N_SCHEDULE_ID=B.N_SCHEDULE_ID   
AND A.N_VOL_INVOICING_ID=B.N_VOL_INVOICING_ID   
   
UPDATE A SET FIXED_REVENUE_ALLOCATION= (CASE WHEN N_VOL_BASE_CHARGE = 0 THEN 0  ELSE   
(CASE WHEN TOTAL_VOLUME_REVENUE = 0 THEN 0 ELSE ((VOLUME_REVENUE / TOTAL_VOLUME_REVENUE) * FIXED_REVENUE) END) END) FROM #TEMP_VOLUME A  
   
UPDATE A SET INVOICE_VALUE=ROUND((VOLUME_REVENUE+FIXED_REVENUE_ALLOCATION),2) FROM #TEMP_VOLUME A   
  
SELECT CAST(@BATCH_NO AS VARCHAR(50)) AS N_BATCH_NO  
,MAP.S_CUSTOMER_ID AS S_CUSTOMER_ID  
,MAP.S_BILLING_TYPE AS S_BILLING_TYPE  
--,DATENAME( MONTH , DATEADD( MONTH , VOLSUMMARY.N_MONTH , -1 ) ) AS S_BILLING_CYCLE  
,CONVERT(varchar, DATEADD(month,VOLSUMMARY.N_MONTH-1,DATEADD(year,VOLSUMMARY.N_YEAR-1900,0)), 103)+' - '+CONVERT(varchar, DATEADD(day,-1,DATEADD(month,VOLSUMMARY.N_MONTH,DATEADD(year,VOLSUMMARY.N_YEAR-1900,0))), 103)  AS 'S_BILLING_CYCLE'  
,NULL AS N_MONTH  
,VOLSUMMARY.N_YEAR AS N_YEAR  
,MAP.N_MAPPING_ID AS N_MAPPING_ID  
,MAP.N_SOW_ID AS N_SOW_ID  
,0 AS IS_SOW_LEVEL  
,0 AS IS_EMPLOYEE_LEVEL  
,MAP.N_SERVICE_TRACK AS N_SERVICE_TRACK  
,MAP.N_SCHEDULE AS N_SCHEDULE  
,MAP.D_FROM_DATE AS D_FROM_DATE  
,MAP.D_TO_DATE AS D_TO_DATE  
,MAP.N_PO_ID AS N_PO_ID  
,isnull(MAP.S_PO_IDENTIFIER,'') AS S_PO_IDENTIFIER  
,isnull(MAP.S_PO_REFERENCE,'') AS S_PO_REFERENCE  
,isnull(ltrim(rtrim(MAP.S_PO_CUSTOMER_ID)),'') AS S_PO_CUSTOMER_ID  
,isnull(MAP.S_INVOICING_EXTRA_INFO1,'') AS S_INVOICING_EXTRA_INFO1  
,isnull(MAP.S_INVOICING_EXTRA_INFO2,'') AS S_INVOICING_EXTRA_INFO2  
,isnull(MAP.S_INVOICING_EXTRA_INFO3,'') AS S_INVOICING_EXTRA_INFO3  
,isnull(MAP.S_INVOICING_EXTRA_INFO4,'') AS S_INVOICING_EXTRA_INFO4  
,isnull(MAP.S_INVOICING_EXTRA_INFO5,'') AS S_INVOICING_EXTRA_INFO5  
,isnull(MAP.S_INVOICING_EXTRA_INFO6,'') AS S_INVOICING_EXTRA_INFO6  
,((MAP.N_CONTRIBUTION_PERCENT * VOLSUMMARY.INVOICE_VALUE) / 100) AS N_VALUE  
,0 AS N_UNIT  
,0 AS N_RATE  
,SOW.S_CURRENCY AS S_BILLING_CURRENCY  
,VOLSUMMARY.S_FIN_BU AS S_BUINESS_UNIT  
,SOW.S_FINANCE_ID AS  S_FIN_ID  
,'' AS S_ORDER_ID  
,'' AS S_EXECUTION_MODEL  
,0 AS N_RATE_ID  
,'' AS S_PROFILE   
  
,NULL N_DATA_TRACK_ID  
,NULL N_CONTRIBUTION_PERCENT  
,NULL N_ACCRUED_VALUE  
,1 AS N_NIVOICE_STATUS  
,'VOL-ORG' S_SOURCE  
,SOW.S_CURRENCY_AS_PER_RATE_CARD AS RATE_CARD_CURRENCY  
,CAST(NULL AS FLOAT) N_BILL_INV_VALUE  
,CAST(NULL AS varchar(100)) AS TAX_CODE  
,CAST (NULL AS DECIMAL(10,2)) AS TAX_PERCENTAGE  
,CAST(NULL AS varchar(100)) AS TAX_DESCRIPTION  
INTO #TEMP_VOLUME_VALUE  
  
FROM #TEMP_VOLUME VOLSUMMARY  
INNER JOIN M_RT_SOW_MASTER SOW ON SOW.N_SOW_ID = VOLSUMMARY.N_SOW_ID  
--INNER JOIN DBO.T_TB_INVOICE_MAPPING_O2C MAP ON MAP.N_SOW_ID = SOW.N_SOW_ID AND VOLSUMMARY.N_SCHEDULE_ID=MAP.N_SCHEDULE AND VOLSUMMARY.N_TRACK_ID = MAP.N_SERVICE_TRACK  
INNER JOIN #TMP_INVOICE_CONSOLIDATION_MAPPING MAP ON MAP.N_SOW_ID = SOW.N_SOW_ID AND VOLSUMMARY.N_SCHEDULE_ID=MAP.N_SCHEDULE AND VOLSUMMARY.N_TRACK_ID = MAP.N_SERVICE_TRACK  
  
  
WHERE SOW.S_CUSTOMER_ID = @CUSTOMER_ID   
  AND SOW.S_BILLING_TYPE= @BILLING_TYPE  
  AND SOW.N_SOW_ID IN(SELECT [SOW_ID] FROM #TEMP_INPUT_PARAMS WHERE [BILLING_TYPE_REF]='VOL')    
  AND VOLSUMMARY.N_SCHEDULE_ID IN(SELECT [VALUE] FROM #TEMP_INPUT_PARAMS WHERE [BILLING_TYPE_REF]='VOL')  
     AND MAP.N_CURRENT_STATUS = 4 --INVOICE MAPPING APROVED  
  AND MAP.N_INVOICE_STATUS=6  
     --AND SOW.S_ORDER_ID IS NOT NULL  
  AND ((VOLSUMMARY.D_BILLING_START_DATE BETWEEN MAP.D_FROM_DATE AND MAP.D_TO_DATE)  
    OR (VOLSUMMARY.D_BILLING_END_DATE BETWEEN MAP.D_FROM_DATE AND MAP.D_TO_DATE)  
    OR (MAP.D_FROM_DATE BETWEEN VOLSUMMARY.D_BILLING_START_DATE AND VOLSUMMARY.D_BILLING_END_DATE)  
    OR (MAP.D_TO_DATE BETWEEN VOLSUMMARY.D_BILLING_START_DATE AND VOLSUMMARY.D_BILLING_END_DATE))   
  
  
SELECT CAST(@BATCH_NO AS VARCHAR(50)) AS N_BATCH_NO  
,SOW.S_CUSTOMER_ID AS S_CUSTOMER_ID  
,SOW.S_BILLING_TYPE AS S_BILLING_TYPE  
--,DATENAME( MONTH , DATEADD( MONTH , A.N_MONTH , -1 ) ) AS S_BILLING_CYCLE  
,CONVERT(varchar, DATEADD(month,A.N_MONTH-1,DATEADD(year,A.N_YEAR-1900,0)), 103)+' - '+CONVERT(varchar, DATEADD(day,-1,DATEADD(month,A.N_MONTH,DATEADD(year,A.N_YEAR-1900,0))), 103)  AS 'S_BILLING_CYCLE'  
,NULL AS N_MONTH  
,A.N_YEAR AS N_YEAR  
,@consolidation_Key AS N_MAPPING_ID  
,A.N_SOW_ID AS N_SOW_ID  
,0 AS IS_SOW_LEVEL  
,0 AS IS_EMPLOYEE_LEVEL  
,0 AS N_SERVICE_TRACK  
,ISNULL(A.N_SCHEDULE_ID,0) AS N_SCHEDULE  
,C.D_INVOICE_START_DATE AS D_FROM_DATE  
,C.D_INVOICE_DUE_DATE AS D_TO_DATE  
,A.N_PO_ID AS N_PO_ID  
,isnull(A.S_PO_IDENTIFIER,'') AS S_PO_IDENTIFIER  
,isnull(A.S_PO_REFERENCE,'') AS S_PO_REFERENCE  
,isnull(A.S_PO_CUSTOMER_ID,'') AS S_PO_CUSTOMER_ID  
,isnull(A.S_INVOICING_EXTRA_INFO1,'') AS S_INVOICING_EXTRA_INFO1  
,isnull(A.S_INVOICING_EXTRA_INFO2,'') AS S_INVOICING_EXTRA_INFO2  
,isnull(A.S_INVOICING_EXTRA_INFO3,'') AS S_INVOICING_EXTRA_INFO3  
,isnull(A.S_INVOICING_EXTRA_INFO4,'') AS S_INVOICING_EXTRA_INFO4  
,isnull(A.S_INVOICING_EXTRA_INFO5,'') AS S_INVOICING_EXTRA_INFO5  
,isnull(A.S_INVOICING_EXTRA_INFO6,'') AS S_INVOICING_EXTRA_INFO6  
,(CASE WHEN A.S_TYPE IN (  
      'DISC'  
      ,'DISC_PROV'  
      ,'SRV_CRT'  
      ,'PLT'  
      ,'ABR'  
      )  
 THEN - 1 * isnull(A.N_AMOUNT, 0) ELSE A.N_AMOUNT END) AS N_VALUE  
,0 AS N_UNIT  
,0 AS N_RATE  
,SOW.S_CURRENCY AS S_BILLING_CURRENCY  
,C.S_BUSINESS_UNIT AS S_BUINESS_UNIT  
,SOW.S_FINANCE_ID AS  S_FIN_ID  
,'' AS S_ORDER_ID  
,A.S_EXECUTION_MODEL AS S_EXECUTION_MODEL  
,0 AS N_RATE_ID  
,'' AS S_PROFILE  
,NULL N_DATA_TRACK_ID  
,NULL N_CONTRIBUTION_PERCENT  
,NULL N_ACCRUED_VALUE  
,1 AS N_NIVOICE_STATUS  
,'EXPENSES' S_SOURCE  
,B.S_DESC AS S_OTHERS_COMP_TYPE  
,NULL AS S_OTE_ATTRIBUTE  
,NULL AS N_PROJ_INVOICE_ID  
,SOW.S_CURRENCY_AS_PER_RATE_CARD AS RATE_CARD_CURRENCY  
,CAST(NULL AS FLOAT) N_BILL_INV_VALUE  
,CAST(NULL AS varchar(100)) AS TAX_CODE  
,CAST (NULL AS DECIMAL(10,2)) AS TAX_PERCENTAGE  
,CAST(NULL AS varchar(100)) AS TAX_DESCRIPTION  
INTO #TEMP_VOLUME_EXPENSES  
  
FROM M_VOL_EXPENSES A  
INNER JOIN M_RT_OTHEREXPEN_COMP B ON A.S_TYPE=B.S_CODE AND B_ISACTIVE=1  
INNER JOIN M_RT_SOW_MASTER SOW ON SOW.N_SOW_ID = A.N_SOW_ID  
INNER JOIN M_VOL_INVOICING (NOLOCK) C ON C.N_SOW_ID=A.N_SOW_ID AND C.N_SCHEDULE_ID=A.N_SCHEDULE_ID AND C.N_INVOICE_STATUS=3  
AND C.N_SCHEDULE_ID IN (SELECT [VALUE]  FROM #TEMP_INPUT_PARAMS WHERE [BILLING_TYPE_REF]='VOL')  
  
--INNER JOIN DBO.T_TB_INVOICE_MAPPING_O2C MAP ON MAP.N_SOW_ID = SOW.N_SOW_ID AND VOLSUMMARY.N_SCHEDULE_ID=MAP.N_SCHEDULE AND VOLSUMMARY.N_TRACK_ID = MAP.N_SERVICE_TRACK  
  
WHERE isnull(A.S_TYPE,'') NOT IN ('DISC_PROV') AND SOW.S_CUSTOMER_ID = @CUSTOMER_ID   
  AND SOW.S_BILLING_TYPE= @BILLING_TYPE  
  AND SOW.N_SOW_ID IN(SELECT [SOW_ID]  FROM #TEMP_INPUT_PARAMS WHERE [BILLING_TYPE_REF]='VOL')   
  AND A.N_SCHEDULE_ID IN (SELECT [VALUE] FROM #TEMP_INPUT_PARAMS WHERE [BILLING_TYPE_REF]='VOL')  
     --AND MAP.N_CURRENT_STATUS = 4 --INVOICE MAPPING APROVED  
     --AND SOW.S_ORDER_ID IS NOT NULL  
  --AND ((VOLSUMMARY.D_BILLING_START_DATE BETWEEN MAP.D_FROM_DATE AND MAP.D_TO_DATE)  
  --  OR (VOLSUMMARY.D_BILLING_END_DATE BETWEEN MAP.D_FROM_DATE AND MAP.D_TO_DATE)  
  --  OR (MAP.D_FROM_DATE BETWEEN VOLSUMMARY.D_BILLING_START_DATE AND VOLSUMMARY.D_BILLING_END_DATE)  
  --  OR (MAP.D_TO_DATE BETWEEN VOLSUMMARY.D_BILLING_START_DATE AND VOLSUMMARY.D_BILLING_END_DATE))  
  
SELECT CAST(@BATCH_NO AS VARCHAR(50)) AS N_BATCH_NO  
,SOW.S_CUSTOMER_ID AS S_CUSTOMER_ID  
,SOW.S_BILLING_TYPE AS S_BILLING_TYPE  
--,DATENAME( MONTH , DATEADD( MONTH , A.N_MONTH , -1 ) ) AS S_BILLING_CYCLE  
,CONVERT(varchar, DATEADD(month,A.N_MONTH-1,DATEADD(year,A.N_YEAR-1900,0)), 103)+' - '+CONVERT(varchar, DATEADD(day,-1,DATEADD(month,A.N_MONTH,DATEADD(year,A.N_YEAR-1900,0))), 103)  AS 'S_BILLING_CYCLE'  
,A.N_MONTH AS N_MONTH  
,A.N_YEAR AS N_YEAR  
,@consolidation_Key AS N_MAPPING_ID  
,A.N_SOW_ID AS N_SOW_ID  
,0 AS IS_SOW_LEVEL  
,0 AS IS_EMPLOYEE_LEVEL  
,0 AS N_SERVICE_TRACK  
,0 AS N_SCHEDULE  
,NULL AS D_FROM_DATE  
,NULL AS D_TO_DATE  
,A.N_PO_ID AS N_PO_ID  
,isnull(A.S_PO_IDENTIFIER,'') AS S_PO_IDENTIFIER  
,isnull(A.S_PO_REFERENCE,'') AS S_PO_REFERENCE  
,isnull(A.S_PO_CUSTOMER_ID,'') AS S_PO_CUSTOMER_ID  
,isnull(A.S_INVOICING_EXTRA_INFO1,'') AS S_INVOICING_EXTRA_INFO1  
,isnull(A.S_INVOICING_EXTRA_INFO2,'') AS S_INVOICING_EXTRA_INFO2  
,isnull(A.S_INVOICING_EXTRA_INFO3,'') AS S_INVOICING_EXTRA_INFO3  
,isnull(A.S_INVOICING_EXTRA_INFO4,'') AS S_INVOICING_EXTRA_INFO4  
,isnull(A.S_INVOICING_EXTRA_INFO5,'') AS S_INVOICING_EXTRA_INFO5  
,isnull(A.S_INVOICING_EXTRA_INFO6,'') AS S_INVOICING_EXTRA_INFO6  
,A.N_AMOUNT AS N_VALUE  
,0 AS N_UNIT  
,0 AS N_RATE  
,SOW.S_CURRENCY AS S_BILLING_CURRENCY  
,A.S_FIN_BU AS S_BUINESS_UNIT  
,SOW.S_FINANCE_ID AS  S_FIN_ID  
,'' AS S_ORDER_ID  
,A.S_EXECUTION_MODEL AS S_EXECUTION_MODEL  
,0 AS N_RATE_ID  
,'' AS S_PROFILE  
,A.N_UNIQUE_ID N_DATA_TRACK_ID  
,NULL N_CONTRIBUTION_PERCENT  
,NULL N_ACCRUED_VALUE  
,1 AS N_NIVOICE_STATUS  
,'TB-OTE' S_SOURCE  
,A.S_REVENUE_TYPE AS S_OTHERS_COMP_TYPE  
,'OTE' AS S_OTE_ATTRIBUTE  
,NULL AS N_PROJ_INVOICE_ID  
,SOW.S_CURRENCY_AS_PER_RATE_CARD AS RATE_CARD_CURRENCY  
,CAST(NULL AS FLOAT) N_BILL_INV_VALUE  
,CAST(NULL AS varchar(100)) AS TAX_CODE  
,CAST (NULL AS DECIMAL(10,2)) AS TAX_PERCENTAGE  
,CAST(NULL AS varchar(100)) AS TAX_DESCRIPTION  
INTO #TEMP_TB_OTE  
  
FROM M_TB_ONE_TIME_REVENUE_ENTRY A  
INNER JOIN M_RT_SOW_MASTER SOW ON SOW.N_SOW_ID = A.N_SOW_ID  
WHERE SOW.S_CUSTOMER_ID = @CUSTOMER_ID   
  AND SOW.S_BILLING_TYPE= @BILLING_TYPE AND A.S_PROJECT_TYPE=@BILLING_TYPE  
  AND A.D_CREATED_DATE>='2021-01-01'  
  AND SOW.N_SOW_ID IN(SELECT [SOW_ID] FROM #TEMP_INPUT_PARAMS WHERE [BILLING_TYPE_REF]='VOLTBOTE')   
  AND A.N_UNIQUE_ID  IN(SELECT [VALUE] FROM #TEMP_INPUT_PARAMS WHERE [BILLING_TYPE_REF]='VOLTBOTE')       
     --AND SOW.S_ORDER_ID IS NOT NULL  
  AND A.S_TB_STATUS IN('ASDM APPROVED','UH APPROVED')  
  AND A.S_RT_STATUS IS NULL    
  
SELECT CAST(@BATCH_NO AS VARCHAR(50)) AS N_BATCH_NO  
,SOW.S_CUSTOMER_ID AS S_CUSTOMER_ID  
,SOW.S_BILLING_TYPE AS S_BILLING_TYPE  
--,DATENAME( MONTH , DATEADD( MONTH , A.N_MONTH , -1 ) ) AS S_BILLING_CYCLE  
,CONVERT(varchar, DATEADD(month,A.N_MONTH-1,DATEADD(year,A.N_YEAR-1900,0)), 103)+' - '+CONVERT(varchar, DATEADD(day,-1,DATEADD(month,A.N_MONTH,DATEADD(year,A.N_YEAR-1900,0))), 103)  AS 'S_BILLING_CYCLE'  
,A.N_MONTH AS N_MONTH  
,A.N_YEAR AS N_YEAR  
,@consolidation_Key AS N_MAPPING_ID  
,A.N_SOW_ID AS N_SOW_ID  
,0 AS IS_SOW_LEVEL  
,0 AS IS_EMPLOYEE_LEVEL  
,0 AS N_SERVICE_TRACK  
,0 AS N_SCHEDULE  
,NULL AS D_FROM_DATE  
,NULL AS D_TO_DATE  
,A.N_PO_ID AS N_PO_ID  
,isnull(A.S_PO_IDENTIFIER,'') AS S_PO_IDENTIFIER  
,isnull(A.S_PO_REFERENCE,'') AS S_PO_REFERENCE  
,isnull(A.S_PO_CUSTOMER_ID,'') AS S_PO_CUSTOMER_ID  
,isnull(A.S_INVOICING_EXTRA_INFO1,'') AS S_INVOICING_EXTRA_INFO1  
,isnull(A.S_INVOICING_EXTRA_INFO2,'') AS S_INVOICING_EXTRA_INFO2  
,isnull(A.S_INVOICING_EXTRA_INFO3,'') AS S_INVOICING_EXTRA_INFO3  
,isnull(A.S_INVOICING_EXTRA_INFO4,'') AS S_INVOICING_EXTRA_INFO4  
,isnull(A.S_INVOICING_EXTRA_INFO5,'') AS S_INVOICING_EXTRA_INFO5  
,isnull(A.S_INVOICING_EXTRA_INFO6,'') AS S_INVOICING_EXTRA_INFO6  
,A.N_AMOUNT AS N_VALUE  
,0 AS N_UNIT  
,0 AS N_RATE  
,SOW.S_CURRENCY AS S_BILLING_CURRENCY  
,A.S_FIN_BU AS S_BUINESS_UNIT  
,SOW.S_FINANCE_ID AS  S_FIN_ID  
,'' AS S_ORDER_ID  
,A.S_EXECUTION_MODEL AS S_EXECUTION_MODEL  
,0 AS N_RATE_ID  
,'' AS S_PROFILE  
,A.N_UNIQUE_ID N_DATA_TRACK_ID  
,NULL N_CONTRIBUTION_PERCENT  
,NULL N_ACCRUED_VALUE  
,1 AS N_NIVOICE_STATUS  
,'RT-OTE' S_SOURCE  
,A.S_REVENUE_TYPE AS S_OTHERS_COMP_TYPE  
,'OTE' AS S_OTE_ATTRIBUTE  
,NULL AS N_PROJ_INVOICE_ID  
,SOW.S_CURRENCY_AS_PER_RATE_CARD AS RATE_CARD_CURRENCY  
,CAST(NULL AS FLOAT) N_BILL_INV_VALUE  
,CAST(NULL AS varchar(100)) AS TAX_CODE  
,CAST (NULL AS DECIMAL(10,2)) AS TAX_PERCENTAGE  
,CAST(NULL AS varchar(100)) AS TAX_DESCRIPTION  
INTO #TEMP_RT_OTE  
  
  
FROM M_RT_ONE_TIME_REVENUE_ENTRY A  
INNER JOIN M_RT_SOW_MASTER SOW ON SOW.N_SOW_ID = A.N_SOW_ID  
WHERE SOW.S_CUSTOMER_ID = @CUSTOMER_ID    
  AND SOW.S_BILLING_TYPE= @BILLING_TYPE AND A.S_PROJECT_TYPE=@BILLING_TYPE  
  AND A.D_CREATED_DATE>='2021-01-01'  
  AND SOW.N_SOW_ID IN(SELECT [SOW_ID] FROM #TEMP_INPUT_PARAMS WHERE [BILLING_TYPE_REF]='VOLRTOTE')   
  AND A.N_UNIQUE_ID  IN(SELECT [VALUE] FROM #TEMP_INPUT_PARAMS WHERE [BILLING_TYPE_REF]='VOLRTOTE')        
     --AND SOW.S_ORDER_ID IS NOT NULL  
  AND A.S_RT_STATUS IN('MAKER SUBMITTED')  
    
SELECT * INTO #TEMP_VOLUME_INVOICE FROM (  
  SELECT *   FROM #TEMP_VOLUME_VALUE  
  UNION All  
  SELECT *   FROM #TEMP_VOLUME_EXPENSES  
  UNION All  
  SELECT *   FROM #TEMP_TB_OTE  
  UNION All  
  SELECT *   FROM #TEMP_RT_OTE  
) as temp  
  
  --UPDATE A SET N_BILL_INV_VALUE=ROUND(N_VALUE*CUR_EXCHNG_RT,2) FROM #TEMP_TNB_INVOICE A JOIN #TEMP_CURRENCY B ON   
  UPDATE A SET N_BILL_INV_VALUE=dbo.FUNC_ROUND_UP_DOWN_INVOICE_VALUE_O2C(N_VALUE*CUR_EXCHNG_RT, @ROUND_DETAIL_LEVEL,@DECIMAL_DETAIL_LEVEL) FROM #TEMP_TNB_INVOICE A JOIN #TEMP_CURRENCY B ON   
   A.RATE_CARD_CURRENCY COLLATE Latin1_General_BIN=B.FROM_CUR AND A.S_BILLING_CURRENCY COLLATE Latin1_General_BIN=B.TO_CUR   
  
   ----VAT Tax Calculation VOL --Devi R --11-Oct-2021 Start  
  
  CREATE TABLE #TAXCODE_VOL (S_BUSINESS_UNIT VARCHAR(MAX), S_BILL_TO_CUST_ID VARCHAR(MAX), S_NAME VARCHAR(MAX), S_TAX_CD VARCHAR(MAX), D_UPLOADED_DATE DATETIME, SETID VARCHAR(MAX), TAX_CD VARCHAR(MAX), EFF_STATUS VARCHAR(MAX), EFFDT DATETIME, DESCR VARCHA
R(MAX), DESCRSHORT VARCHAR(MAX), TAX_PCT FLOAT, TAX_AUTHORITY_CD VARCHAR(MAX), TAX_CD_TYPE VARCHAR(MAX), TYPE_DESCR VARCHAR(MAX), ACCOUNT INT,CUST_COUNTRY VARCHAR(MAX))  
  
   DECLARE @SEQ_VOL INT  
  
   SELECT TOP 1 @SEQ_VOL=  ISNULL(N_BILL_TO_SEQ_NO,1) FROM T_TB_INVOICE_PRINT_HEADER_COLUMN_MAPPING WITH (NOLOCK) WHERE S_CUSTOMER_ID=@Customer_id AND S_BILLING_TYPE=@billing_type  
     
   select * into #LOCATION_VOL from FINANCEDB.FIN90PRD.dbo.PS_LOCATION_TBL B WITH (NOLOCK) WHERE EFF_STATUS='A' AND B.EFFDT = (SELECT MAX(B1.EFFDT) FROM FINANCEDB.FIN90PRD.dbo.PS_LOCATION_TBL B1 WITH (NOLOCK) WHERE B.SETID = B1.SETID AND B.LOCATION = B1.L
OCATION)  
    
    
   INSERT INTO #TAXCODE_VOL EXECUTE FINANCEDB.FIN90PRD.dbo.USP_HX_BI_TAX_V1 '',@Customer_id,@SEQ_VOL  
   
   SELECT A.*,CASE WHEN A.TAX_CD_TYPE='V' AND A.CUST_COUNTRY COLLATE SQL_Latin1_General_CP1_CI_AS= B.COUNTRY THEN 'DOMESTIC'   
   WHEN A.TAX_CD_TYPE='V' AND A.CUST_COUNTRY COLLATE SQL_Latin1_General_CP1_CI_AS<> B.COUNTRY THEN 'EXPORT' ELSE S_NAME END AS TAX_TYPE   
   INTO #TX1_VOL  FROM #TAXCODE_VOL A ,#LOCATION_VOL  B   
   WHERE  A.S_BUSINESS_UNIT COLLATE SQL_Latin1_General_CP1_CI_AS=B.SETID  
   SELECT  * INTO #TX2_VOL FROM #TX1_VOL WHERE s_name=TAX_TYPE   
  
   ----Tax Calculation VOL --Devi R --11-Oct-2021 End  
  
   INSERT INTO #TEMP_VOLUME_INVOICE   
   SELECT        
   CON.N_BATCH_NO  
   , CON.S_CUSTOMER_ID  
   , CON.S_BILLING_TYPE  
   , CON.S_BILLING_CYCLE  
   , CON.N_MONTH  
   , CON.N_YEAR  
   , CON.N_MAPPING_ID  
   , CON.N_SOW_ID  
   , CON.IS_SOW_LEVEL  
   , CON.IS_EMPLOYEE_LEVEL  
   , CON.N_SERVICE_TRACK  
   , CON.N_SCHEDULE  
   , CON.D_FROM_DATE  
   , CON.D_TO_DATE  
   , CON.N_PO_ID  
   ,CON.S_PO_IDENTIFIER  
   ,CON.S_PO_REFERENCE  
   ,CON.S_PO_CUSTOMER_ID  
   ,CON.S_INVOICING_EXTRA_INFO1  
   ,CON.S_INVOICING_EXTRA_INFO2  
   ,CON.S_INVOICING_EXTRA_INFO3  
   ,CON.S_INVOICING_EXTRA_INFO4  
   ,CON.S_INVOICING_EXTRA_INFO5  
   ,CON.S_INVOICING_EXTRA_INFO6  
   ,0 AS N_VALUE  
   ,0 as N_UNIT  
   ,CON.N_RATE  
   ,CON.S_BILLING_CURRENCY  
   ,CON.S_BUINESS_UNIT  
   ,CON.S_FIN_ID  
   ,CON.S_ORDER_ID  
   ,CON.S_EXECUTION_MODEL  
   ,CON.N_RATE_ID  
   ,CON.S_PROFILE  
   ,CON.N_DATA_TRACK_ID  
   ,CON.N_CONTRIBUTION_PERCENT  
   ,CON.N_ACCRUED_VALUE  
   ,CON.N_NIVOICE_STATUS  
   ,'TAX' AS S_SOURCE  
   ,CON.S_OTHERS_COMP_TYPE  
   ,CON.S_OTE_ATTRIBUTE  
   ,CON.N_PROJ_INVOICE_ID  
   ,CON.RATE_CARD_CURRENCY  
   ,CASE WHEN (CON.N_BILL_INV_VALUE *ISNULL(TAX_CD.TAX_PCT,0))=0 THEN 0 ELSE CON.N_BILL_INV_VALUE *ISNULL(TAX_CD.TAX_PCT,0)/100 END AS  N_BILL_INV_VALUE  
   ,TAX_CD.S_TAX_CD AS TAX_CODE  
   ,TAX_CD.TAX_PCT AS TAX_PERCENTAGE  
   ,TAX_CD.DESCRSHORT AS TAX_DESCRIPTION  
   FROM    
   #TEMP_VOLUME_INVOICE CON   
   LEFT JOIN #TX2_VOL TAX_CD   
   ON TAX_CD.S_BILL_TO_CUST_ID COLLATE SQL_Latin1_General_CP1_CI_AS=CON.S_CUSTOMER_ID  
   AND CON.S_BUINESS_UNIT COLLATE SQL_Latin1_General_CP1_CI_AS=TAX_CD.S_BUSINESS_UNIT  
   WHERE TAX_CD.S_TAX_CD IS NOT NULL AND TAX_CD.TAX_PCT IS NOT NULL   
  
  
-----------------Validate PO value starts  
--SELECT S_PO_IDENTIFIER, S_PO_CUSTOMER_ID,S_BILLING_TYPE, SUM(N_Value) AS N_Value INTO #PODETAILS3 FROM #TEMP_VOLUME_INVOICE  
--GROUP BY  S_PO_IDENTIFIER, S_PO_CUSTOMER_ID,S_BILLING_TYPE  
  
SELECT *INTO #PO_SUM_VOL  FROM #TEMP_VOLUME_INVOICE  WHERE S_SOURCE<>'TAX'  
  SELECT *INTO #PO_SUM_VOL_TAX  FROM #TEMP_VOLUME_INVOICE  WHERE S_SOURCE='TAX'  
  
  SELECT S_PO_IDENTIFIER, S_PO_CUSTOMER_ID,S_BILLING_TYPE, SUM(N_BILL_INV_VALUE) AS N_Value,N_BATCH_NO   
  INTO #PO1_VOL FROM #PO_SUM_VOL  
  GROUP BY  S_PO_IDENTIFIER, S_PO_CUSTOMER_ID,S_BILLING_TYPE,N_BATCH_NO  
  
  SELECT S_PO_IDENTIFIER, S_PO_CUSTOMER_ID,S_BILLING_TYPE, SUM(N_BILL_INV_VALUE) AS N_Value,N_BATCH_NO   
  INTO #PO11_VOL FROM #PO_SUM_VOL_TAX  
  GROUP BY  S_PO_IDENTIFIER, S_PO_CUSTOMER_ID,S_BILLING_TYPE,N_BATCH_NO  
  
  SELECT case when b.B_IS_TAX_INCLUSIVE=1 then isnull(a.n_value,0)+ISNULL(c.N_Value,0)   
  else a.n_value end as n_value  
  ,b.N_PO_VALUE,b.N_PO_INVOICED_VALUE INTO #PODETAILS3 FROM #PO1_VOL a  
  LEFT JOIN  #PO11_VOL c on a.N_BATCH_NO=c.N_BATCH_NO and a.S_PO_IDENTIFIER=c.S_PO_IDENTIFIER,  
  [M_TB_PO_MASTER_O2C] b WHERE a.S_PO_IDENTIFIER=b.S_PO_IDENTIFIER AND a.S_PO_CUSTOMER_ID=b.S_CUSTOMER_ID  
  AND a.S_PO_IDENTIFIER IS NOT NULL AND a.S_BILLING_TYPE=b.S_BILLING_MODE   
  
  /*Mismatch in po value and invoice value INCT0034911*/  
IF EXISTS (SELECT * FROM #PODETAILS3   
  WHERE CONVERT(NUMERIC(15,2),N_Value)>CONVERT(NUMERIC(15,2),(N_PO_VALUE-N_PO_INVOICED_VALUE)))--Increased numeric as PO datatype throwing error--Rasavalli --04/23 - INCT0035663  
BEGIN  
 SELECT @ERROR_PO_ID = COALESCE(@ERROR_PO_ID + ', ', '') + CAST(a.S_PO_IDENTIFIER AS VARCHAR(max))  
    FROM #PODETAILS3 a,   
 [M_TB_PO_MASTER_O2C] b WHERE a.S_PO_IDENTIFIER=b.S_PO_IDENTIFIER AND a.S_PO_CUSTOMER_ID=b.S_CUSTOMER_ID  
 AND a.S_PO_IDENTIFIER IS NOT NULL AND a.S_BILLING_TYPE=b.S_BILLING_MODE   
 AND a.N_Value>(b.N_PO_VALUE-b.N_PO_INVOICED_VALUE)  
  
 SET @STATUS_VALUE = 409          
 SET @STATUS_DESCRIPTION = 'Invoice value exceeded PO available value for  '+@ERROR_PO_ID  
END  
ELSE  
BEGIN  
SET @SQLINSERT= 'INSERT INTO T_TB_INVOICE_CONSOLIDATION_BUFFER_BATCH_O2C(N_BATCH_NO,S_CUSTOMER_ID,S_BILLING_TYPE,S_BILLING_CYCLE,N_MONTH,N_YEAR,N_MAPPING_ID,N_SOW_ID,IS_SOW_LEVEL,IS_EMPLOYEE_LEVEL  
,N_SERVICE_TRACK,N_SCHEDULE,D_FROM_DATE,D_TO_DATE,N_PO_ID  
,S_PO_IDENTIFIER,S_PO_REFERENCE,S_PO_CUSTOMER_ID,S_INVOICING_EXTRA_INFO1,S_INVOICING_EXTRA_INFO2  
,S_INVOICING_EXTRA_INFO3,S_INVOICING_EXTRA_INFO4,S_INVOICING_EXTRA_INFO5,S_INVOICING_EXTRA_INFO6,N_VALUE,N_UNIT,N_RATE  
,S_BILLING_CURRENCY,S_BUINESS_UNIT,S_FIN_ID,S_ORDER_ID  
,S_EXECUTION_MODEL,N_RATE_ID,S_PROFILE,RATE_CARD_CURRENCY,N_BILL_INV_VALUE,TAX_CODE,TAX_PERCENTAGE,TAX_DESCRIPTION  
)  
SELECT * FROM #TEMP_VOLUME_INVOICE ORDER BY ROW_NUMBER() OVER(ORDER BY '+@INVOCELEVEL_GROUPING_COL+')'  
EXEC(@SQLINSERT)  
END  
  
  
DROP TABLE #TEMP_VOLUME_INVOICE  
DROP TABLE #TEMP_VOLUME  
DROP TABLE #TOTAL_VOLUME_REVENUE  
DROP TABLE #TEMP_VOLUME_VALUE  
DROP TABLE #TEMP_VOLUME_EXPENSES  
DROP TABLE #TEMP_TB_OTE  
DROP TABLE #TEMP_RT_OTE  
PRINT 'VOL'  
  
END  
     
   --select * from #temp_grouping_column_table  
   --select * from  T_TB_INVOICE_CONSOLIDATION_BUFFER_BATCH_O2C WHERE N_BATCH_NO= @batch_no  
--if(isnull(@invocelevel_grouping_col,'')<>'')  
--begin  
   set @sqlinvoicelevel='insert into T_TB_INVOICE_CONSOLIDATION_O2C ('+@invocelevel_grouping_col+',N_VALUE,N_KEY_LEVEL,N_MAPPING_ID,D_CREATED_DATE,S_CREATED_BY,N_INVOICE_STATUS,N_UNIT,N_BATCH_NO)  
          select '+@invocelevel_grouping_col+',dbo.FUNC_ROUND_UP_DOWN_INVOICE_VALUE_O2C(sum(N_BILL_INV_VALUE),'+cast(@ROUND_INV_LEVEL as varchar)+','+cast(@DECIMAL_INV_LEVEL as varchar)+') as N_VALUE,1,N_MAPPING_ID,GETDATE(),'+ @USERID +',1,sum(isnull(N_U
NIT,0)) as N_UNIT,N_BATCH_NO from T_TB_INVOICE_CONSOLIDATION_BUFFER_BATCH_O2C  WHERE N_BATCH_NO='+ CAST(@batch_no AS VARCHAR)+'  
         group by '+@invocelevel_grouping_col+',N_MAPPING_ID,N_BATCH_NO'  
  
PRINT @sqlinvoicelevel  
  
exec(@sqlinvoicelevel)  
--AUDIT  
INSERT INTO T_TB_INVOICE_CONSOLIDATION_AUDIT_O2C  
SELECT *,'Draft Invoice',@USERID,GETDATE() FROM T_TB_INVOICE_CONSOLIDATION_O2C WHERE  N_BATCH_NO= @batch_no  
  
declare @tblPsupdate as PS_NUMBER_UPDATE_ID  
insert into  @tblPsupdate   
select N_ID,S_BUINESS_UNIT  from T_TB_INVOICE_CONSOLIDATION_O2C where S_DRAFT_INVOICE_NO is null and N_BATCH_NO in(select N_BATCH_NO from T_TB_INVOICE_CONSOLIDATION_BUFFER_BATCH_O2C where N_BATCH_NO=@batch_no)  
  
create table #tmp_draft_invoice(n_id int, draft_invoice varchar(50))  
declare @D_INVOICED_DATE datetime  
select @D_INVOICED_DATE=getdate()  
insert into #tmp_draft_invoice  
exec USP_TB_INVOICE_CONSOLIDATION_INVOICE_NUMB_GEN_O2C @tblPsupdate,'DRAFT_INVOICE',@D_INVOICED_DATE;  
  
--select * from #tmp_draft_invoice  
--select * from #TMP_INV_LEVEL TmpInvLevel,#tmp_draft_invoice tmpDraftNo where TmpInvLevel.rownum_invlevel=tmpDraftNo.n_id  
update TmpInvLevel set TmpInvLevel.S_DRAFT_INVOICE_NO=tmpDraftNo.draft_invoice   
from T_TB_INVOICE_CONSOLIDATION_O2C TmpInvLevel,#tmp_draft_invoice tmpDraftNo   
where TmpInvLevel.N_ID=tmpDraftNo.n_id;  
--select * from T_TB_INVOICE_CONSOLIDATION_O2C where n_id in(select n_id from #tmp_draft_invoice)  
  
--DELETE from T_TB_INVOICE_CONSOLIDATION_O2C where n_id in(select n_id from #tmp_draft_invoice)  
--DELETE from T_TB_INVOICE_CONSOLIDATION_O2C where N_ID in(23,24,27,28)  
--select @invocelevel_grouping_col  
dECLARE @SqlBufferDraft varchar(max)  
set @SqlBufferDraft='update AA set S_DRAFT_INVOICE_NO=BB.S_DRAFT_INVOICE_NO from T_TB_INVOICE_CONSOLIDATION_BUFFER_BATCH_O2C AA    
      inner join   
         (select * from T_TB_INVOICE_CONSOLIDATION_O2C where N_BATCH_NO='+ CAST(@batch_no AS VARCHAR)+' AND n_id in(select n_id from #tmp_draft_invoice))BB  
         on CAST(AA.'+replace(@invocelevel_grouping_col,',',' AS varchar(4000))+CAST(AA.')+' AS varchar(4000))=CAST(BB.'+replace(@invocelevel_grouping_col,',',' AS varchar(4000))+CAST(BB.')+' AS varchar(4000))  
         and AA.N_BATCH_NO=BB.N_BATCH_NO and AA.N_BATCH_NO='+ CAST(@batch_no AS VARCHAR)+''  
--print @SqlBufferDraft  
exec(@SqlBufferDraft)  
update A --61389 --- Added for rate card value and billing value mismatch for same currency 04/May/2022.  
set A.N_VALUE=A.N_BILL_INV_VALUE  
from T_TB_INVOICE_CONSOLIDATION_BUFFER_BATCH_O2C A,#tmp_draft_invoice B  
where (A.S_BILLING_CURRENCY=A.RATE_CARD_CURRENCY) and A.S_DRAFT_INVOICE_NO=B.draft_invoice and S_SOURCE in ('TIMESHEET','ADJ','EXPENSES','DISC')  
  
if(isnull(@sublevel1_grouping_col,'')<>'')  
begin   
  
----invoice level completed  
     
 set @sqlsublevel1='insert into T_TB_INVOICE_CONSOLIDATION_LEVEL1_O2C(S_DRAFT_INVOICE_NO,'+@invocelevel_grouping_col+','+@sublevel1_grouping_col+',N_VALUE,N_KEY_LEVEL,N_MAPPING_ID,D_CREATED_DATE,S_CREATED_BY,N_UNIT)  
         select BB.S_DRAFT_INVOICE_NO,AA.* FROM (select '+@invocelevel_grouping_col+','+@sublevel1_grouping_col+',dbo.FUNC_ROUND_UP_DOWN_INVOICE_VALUE_O2C(sum(N_BILL_INV_VALUE),'+cast(@ROUND_L1_LEVEL as varchar)+','+cast(@DECIMAL_L1_LEVEL as varchar)+') 
as N_VALUE,2 N_KEY_LEVEL,N_MAPPING_ID,GETDATE() D_CREATED_DATE,'''+ @USERID +''' S_CREATED_BY,sum(isnull(N_UNIT,0)) as N_UNIT from T_TB_INVOICE_CONSOLIDATION_BUFFER_BATCH_O2C  WHERE N_BATCH_NO='+ CAST(@batch_no AS VARCHAR)+'  
         group by '+@invocelevel_grouping_col+','+@sublevel1_grouping_col+',N_MAPPING_ID)AA inner join  
         (select * from T_TB_INVOICE_CONSOLIDATION_O2C where N_BATCH_NO='+ CAST(@batch_no AS VARCHAR)+' AND n_id in(select n_id from #tmp_draft_invoice))BB  
         on CAST(AA.'+replace(@invocelevel_grouping_col,',',' AS varchar(4000))+CAST(AA.')+' AS varchar(4000))=CAST(BB.'+replace(@invocelevel_grouping_col,',',' AS varchar(4000))+CAST(BB.')+' AS varchar(4000))'  
  
--PRINT @sqlsublevel1  
EXEC (@sqlsublevel1)  
  
dECLARE @SqlBufferSubLevel1Id varchar(max)  
set @SqlBufferSubLevel1Id='update AA set N_SUBLEVEL_1=BB.N_ID from T_TB_INVOICE_CONSOLIDATION_BUFFER_BATCH_O2C AA    
      inner join   
         (select * from T_TB_INVOICE_CONSOLIDATION_LEVEL1_O2C where S_DRAFT_INVOICE_NO IN( select S_DRAFT_INVOICE_NO from T_TB_INVOICE_CONSOLIDATION_O2C where N_BATCH_NO='+ CAST(@batch_no AS VARCHAR)+' AND n_id in(select n_id from #tmp_draft_invoice)))BB 
 
         on CAST(AA.'+replace(@invocelevel_grouping_col+','+@sublevel1_grouping_col,',',' AS varchar(4000))+CAST(AA.')+' AS varchar(4000))=CAST(BB.'+replace(@invocelevel_grouping_col+','+@sublevel1_grouping_col,',',' AS varchar(4000))+CAST(BB.')+' AS varc
har(4000))  
         and AA.N_BATCH_NO='+ CAST(@batch_no AS VARCHAR)+''  
--print @SqlBufferSubLevel1Id  
exec(@SqlBufferSubLevel1Id)  
--Level1 cOMPLETED  
  
if(isnull(@sublevel2_grouping_col,'')<>'')  
begin   
--PRINT @sqlsublevel1  
   set @sqlsublevel2='insert into T_TB_INVOICE_CONSOLIDATION_LEVEL2_O2C (S_DRAFT_INVOICE_NO,N_LEVEL1_ID,'+@invocelevel_grouping_col+','+@sublevel1_grouping_col+','+@sublevel2_grouping_col+',N_VALUE,N_KEY_LEVEL,N_MAPPING_ID,D_CREATED_DATE,S_CREATED_BY,N_UN
IT)  
         select BB.S_DRAFT_INVOICE_NO,BB.N_ID,AA.* FROM (select '+@invocelevel_grouping_col+','+@sublevel1_grouping_col+','+@sublevel2_grouping_col+',dbo.FUNC_ROUND_UP_DOWN_INVOICE_VALUE_O2C(sum(N_BILL_INV_VALUE),'+cast(@ROUND_L2_LEVEL as varchar)+','+cas
t(@DECIMAL_L2_LEVEL as varchar)+') as N_VALUE,3 N_KEY_LEVEL,N_MAPPING_ID,GETDATE() D_CREATED_DATE,'''+ @USERID +''' S_CREATED_BY,sum(isnull(N_UNIT,0)) as N_UNIT from T_TB_INVOICE_CONSOLIDATION_BUFFER_BATCH_O2C  WHERE N_BATCH_NO='+ CAST(@batch_no AS VARCHA
R)+'  
         group by '+@invocelevel_grouping_col+','+@sublevel1_grouping_col+','+@sublevel2_grouping_col+',N_MAPPING_ID)AA inner join  
         (select * from T_TB_INVOICE_CONSOLIDATION_LEVEL1_O2C where S_DRAFT_INVOICE_NO IN( select S_DRAFT_INVOICE_NO from T_TB_INVOICE_CONSOLIDATION_O2C where N_BATCH_NO='+ CAST(@batch_no AS VARCHAR)+' AND n_id in(select n_id from #tmp_draft_invoice)))BB 
 
         on CAST(AA.'+replace(@invocelevel_grouping_col+','+@sublevel1_grouping_col,',',' AS varchar(4000))+CAST(AA.')+' AS varchar(4000))=CAST(BB.'+replace(@invocelevel_grouping_col+','+@sublevel1_grouping_col,',',' AS varchar(4000))+CAST(BB.')+' AS varc
har(4000))'  
  
--PRINT @sqlsublevel2  
EXEC (@sqlsublevel2)  
dECLARE @SqlBufferSubLeve2Id varchar(max)  
set @SqlBufferSubLeve2Id='update AA set N_SUBLEVEL_2=BB.N_ID from T_TB_INVOICE_CONSOLIDATION_BUFFER_BATCH_O2C AA    
      inner join   
         (select * from T_TB_INVOICE_CONSOLIDATION_LEVEL2_O2C where S_DRAFT_INVOICE_NO IN( select S_DRAFT_INVOICE_NO from T_TB_INVOICE_CONSOLIDATION_O2C where N_BATCH_NO='+ CAST(@batch_no AS VARCHAR)+' AND n_id in(select n_id from #tmp_draft_invoice)))BB 
 
         on CAST(AA.'+replace(@invocelevel_grouping_col+','+@sublevel1_grouping_col+','+@sublevel2_grouping_col,',',' AS varchar(4000))+CAST(AA.')+' AS varchar(4000))=CAST(BB.'+replace(@invocelevel_grouping_col+','+@sublevel1_grouping_col+','+@sublevel2_g
rouping_col,',',' AS varchar(4000))+CAST(BB.')+' AS varchar(4000))  
         and AA.N_BATCH_NO='+ CAST(@batch_no AS VARCHAR)+''  
--print @SqlBufferSubLeve2Id  
exec(@SqlBufferSubLeve2Id)  
--SELECT 'Level2 COMPLETED'  
--Level2 COMPLETED  
---------------  
  
  
END  
END  
IF(@STATUS_VALUE!=409)  
BEGIN  
 --PRINT 'COSNO'  
 SET @STATUS_VALUE = 200          
 SET @STATUS_DESCRIPTION = 'Invoice Consolidation Inserted Successfully.'  
 DECLARE @S_INVOICE_NO_LIST NVARCHAR(MAX)  
  
 SELECT @S_INVOICE_NO_LIST = STRING_AGG(S_DRAFT_INVOICE_NO , ', ')  
 FROM T_TB_INVOICE_CONSOLIDATION_O2C  
 WHERE N_BATCH_NO = @batch_no  
  
 PRINT @S_INVOICE_NO_LIST  
  
 EXEC USP_TB_INSERT_INVOICE_PRINTING_INFORMATION @Customer_id,@billing_type,@S_INVOICE_NO_LIST,@USERID   
  
END  
END  
END  
END  
ELSE  
BEGIN  
   SET @STATUS_VALUE = 409          
   SET @STATUS_DESCRIPTION = 'Please configure Consolidation key grouping'  
END  
--SELECT @STATUS_VALUE  
  
 select @STATUS_VALUE as'STATUS_VALUE',        
  @STATUS_DESCRIPTION as 'STATUS_DESCRIPTION'   
  
IF OBJECT_ID('tempdb..#TEMP_INV_KEY_LEVEL') IS NOT NULL  
 DROP TABLE #TEMP_INV_KEY_LEVEL  
  
IF OBJECT_ID('tempdb..#temp_grouping_column_table') IS NOT NULL  
 DROP TABLE #temp_grouping_column_table  
  
IF OBJECT_ID('tempdb..#tmp_draft_invoice') IS NOT NULL  
 DROP TABLE #tmp_draft_invoice  
  
IF OBJECT_ID('tempdb..#TEMP_QRY_PARAMS') IS NOT NULL  
 DROP TABLE #TEMP_QRY_PARAMS  
  
IF OBJECT_ID('tempdb..#TEMP_INPUT_PARAMS') IS NOT NULL  
 DROP TABLE #TEMP_INPUT_PARAMS   
    
IF OBJECT_ID('tempdb..#TEMP_TIME_ADJ_INV_CONSOL') IS NOT NULL  
 DROP TABLE #TEMP_TIME_ADJ_INV_CONSOL   
  
IF OBJECT_ID('tempdb..#TEMP_TNM_EXPENSES_INV_CONSOL') IS NOT NULL  
 DROP TABLE #TEMP_TNM_EXPENSES_INV_CONSOL  
  
IF OBJECT_ID('tempdb..#TMP_INVOICE_CONSOLIDATION_MAPPING') IS NOT NULL  
 DROP TABLE #TMP_INVOICE_CONSOLIDATION_MAPPING   
  
IF OBJECT_ID('tempdb..#TEMP_INVOICE_MAP_DATA') IS NOT NULL  
 DROP TABLE #TEMP_INVOICE_MAP_DATA  
  
IF OBJECT_ID('tempdb..#TEMP_ROUND_DECIMAL') IS NOT NULL  
 DROP TABLE #TEMP_ROUND_DECIMAL  
  
IF OBJECT_ID('tempdb..#PRJ_EXEC_MODL_INV') IS NOT NULL  
 DROP TABLE #PRJ_EXEC_MODL_INV  
  
IF OBJECT_ID('tempdb..#temp_Inv_Contribution') IS NOT NULL  
 DROP TABLE #temp_Inv_Contribution  
  
IF OBJECT_ID('tempdb..#tempDiscountDistribution') IS NOT NULL  
 DROP TABLE #tempDiscountDistribution  
  
IF OBJECT_ID('tempdb..#TEMP_TIMESHEET_DISTRBUTED_DISC') IS NOT NULL  
 DROP TABLE #TEMP_TIMESHEET_DISTRBUTED_DISC  
  
IF OBJECT_ID('tempdb..#TEMP_FPP_EXPENSES_INV_CONSOL') IS NOT NULL  
 DROP TABLE #TEMP_FPP_EXPENSES_INV_CONSOL  
  
IF OBJECT_ID('tempdb..#TEMP_TIME_FPP_CONSOL') IS NOT NULL  
 DROP TABLE #TEMP_TIME_FPP_CONSOL  
  
IF OBJECT_ID('tempdb..#FPP_SOW_MILESTONE_INV') IS NOT NULL  
 DROP TABLE #FPP_SOW_MILESTONE_INV  
  
IF OBJECT_ID('tempdb..#temp_FPP_Inv_Contribution') IS NOT NULL  
 DROP TABLE #temp_FPP_Inv_Contribution  
  
IF OBJECT_ID('tempdb..#temp_FPP_DiscountDistribution') IS NOT NULL  
 DROP TABLE #temp_FPP_DiscountDistribution  
  
IF OBJECT_ID('tempdb..#TEMP_FPP_TIMESHEET_DISTRBUTED_DISC') IS NOT NULL  
 DROP TABLE #TEMP_FPP_TIMESHEET_DISTRBUTED_DISC  
  
   
END TRY          
          
 BEGIN CATCH          
  SELECT 409 AS 'STATUS_VALUE'          
   ,'Error_Line: ' + CAST(ERROR_LINE() AS VARCHAR(20)) + ' Error_Message: ' + ERROR_MESSAGE() AS 'STATUS_DESCRIPTION'          
 END CATCH   
  
 END   
   
 -------------------------------------------------------------------------------
 
   
-- SELECT * FROM T_TB_INVOICE_PRINT_BODY_INVOICE_VALUE WHERE S_INVOICE_NUMBER='R2011USA001'  
-- EXEC USP_TB_INVOICE_PRINTING_GET_BODY_VALUES 'D2203LUK1021'  
 --EXEC USP_TB_INVOICE_PRINTING_GET_BODY_VALUES 'R2203LUK177'  
-- EXEC USP_TB_INVOICE_PRINTING_GET_BODY_VALUES_TESTTT 'D2203LUK1056'  
-- EXEC USP_TB_INVOICE_PRINTING_GET_BODY_VALUES_TESTTT 'D2203LUK740'  
CREATE    PROCEDURE [dbo].[USP_TB_INVOICE_PRINTING_GET_BODY_VALUES] (@S_INVOICE_NUMBER VARCHAR(MAX))  
AS  
BEGIN  
--DECLARE @S_INVOICE_NUMBER VARCHAR(MAX)='D2202SZ3018'   
--DECLARE @S_INVOICE_NUMBER VARCHAR(MAX)='D2109LUK271'   
  
 DECLARE @D_START_DATE DATETIME, @D_END_DATE DATETIME  
  
 DECLARE @S_CUSTOMER_ID VARCHAR(100)  
  ,@S_BILLING_TYPE VARCHAR(10)  
  
  
CREATE TABLE #TEMP_DATA(  
      N_SUBLEVEL_1 INT NULL,S_FIN_ID INT,N_SOW_ID INT,S_PO_REFERENCE NVARCHAR(500),S_PO_CUSTOMER_ID NVARCHAR(100),  
      S_OTE NVARCHAR(500),S_BILLING_CYCLE NVARCHAR(100),         
      S_INVOICING_EXTRA_INFO1 NVARCHAR(500),S_INVOICING_EXTRA_INFO2 NVARCHAR(500),S_INVOICING_EXTRA_INFO3 NVARCHAR(500),  
      S_INVOICING_EXTRA_INFO4 NVARCHAR(500),S_INVOICING_EXTRA_INFO5 NVARCHAR(500),S_INVOICING_EXTRA_INFO6 NVARCHAR(500),  
      S_EXECUTION_MODEL NVARCHAR(50),S_PROFILE NVARCHAR(500),N_RATE_ID INT,  
      S_EMPLOYEE_ID_TEMP NVARCHAR(500),N_MILESTONE_ID_TEMP INT,S_MILESTONE_NAME_TEMP NVARCHAR(500),  
      S_EMPLOYEE_ID NVARCHAR(500),N_MILESTONE_ID INT,S_MILESTONE_NAME NVARCHAR(500),  
      RATE_CARD_CURRENCY NVARCHAR(50),S_OTHERS_COMP_TYPE NVARCHAR(50),  
      S_BILLING_CURRENCY NVARCHAR(10), S_BILLING_TYPE NVARCHAR(10), S_BUINESS_UNIT NVARCHAR(20),S_CUSTOMER_ID NVARCHAR(100),  
         --N_SERVICE_TRACK,N_SCHEDULE,  
      GROUP_COLUMN NVARCHAR(500),  
      N_VALUE FLOAT,N_SUB_TOTAL FLOAT,N_TOTAL FLOAT         
      )    
  
  SELECT *  
 INTO #TEMP_CONSOLIDATION  
 FROM [T_TB_INVOICE_CONSOLIDATION_O2C] WITH (NOLOCK)  
 WHERE (S_DRAFT_INVOICE_NO IN (SELECT *FROM dbo.SplitString(@S_INVOICE_NUMBER, ','))  
  OR S_INVOICE_NUMBER IN (SELECT *FROM dbo.SplitString(@S_INVOICE_NUMBER, ',')))  
  
 SET @D_START_DATE = GETDATE()  
  
   
  SELECT A.*  
 INTO #TEMP_BUFFER_BEFORE  
 FROM [T_TB_INVOICE_CONSOLIDATION_BUFFER_BATCH_O2C] A WITH (NOLOCK),#TEMP_CONSOLIDATION B WITH (NOLOCK)  
 WHERE A.S_DRAFT_INVOICE_NO =B.S_DRAFT_INVOICE_NO  
  
   
 SET @D_END_DATE = GETDATE()  
  
 INSERT INTO T_TB_INVOICE_PRINT_PERFORMANCE_LOG(S_INVOICE_NUMBER, S_DRAFT_INVOICE_NUMBER, D_START_DATE, D_END_DATE, SP_NAME, S_OUTPUT_METHOD_NAME, S_FINANCE_VIEW_OR_SP)  
 VALUES(@S_INVOICE_NUMBER,@S_INVOICE_NUMBER, @D_START_DATE, @D_END_DATE, OBJECT_NAME(@@PROCID), '#TEMP_BUFFER_BEFORE', 'T_TB_INVOICE_CONSOLIDATION_BUFFER_BATCH_O2C')  
  
 SELECT BUF.*,CASE   
   WHEN BUF.S_SOURCE = 'EXPENSES'  
    THEN OTH.S_DESC  
   WHEN BUF.S_BILLING_TYPE = 'T&M'  
    THEN ISNULL(EXCH.S_EMPLOYEE_FNAME,'') + ' ' + ISNULL(EXCH.S_EMPLOYEE_LNAME,'')  
   WHEN BUF.S_BILLING_TYPE = 'FPP'  
    THEN BUF.S_MILESTONE_NAME  
   WHEN BUF.S_BILLING_TYPE = 'VOL'  
    THEN SCH.S_SCHEDULE_NAME      
   END AS 'S_DESCRIPTION'   
 INTO #TEMP_BUFFER FROM #TEMP_BUFFER_BEFORE BUF WITH (NOLOCK)  
 LEFT JOIN HELIXPRD.DBO.M_EMPLOYEE_EXCHANGE EXCH WITH (NOLOCK) ON EXCH.S_EMPLOYEE_ID = BUF.S_EMPLOYEE_ID  
 LEFT JOIN M_RT_OTHEREXPEN_COMP OTH WITH (NOLOCK) ON OTH.S_CODE = BUF.S_OTHERS_COMP_TYPE  
 LEFT JOIN [dbo].[M_VOL_FIXED_REV_SCHEDULES] SCH WITH (NOLOCK) ON SCH.N_SOW_ID = BUF.N_SOW_ID  
  
  SELECT TOP 1 @S_CUSTOMER_ID = S_CUSTOMER_ID  
  ,@S_BILLING_TYPE = S_BILLING_TYPE  
 FROM T_TB_INVOICE_PRINT_HEADER_INVOICE_VALUE WITH (NOLOCK)--#TEMP_CONSOLIDATION  
 WHERE S_INVOICE_NUMBER = @S_INVOICE_NUMBER  
  OR S_DRAFT_INVOICE_NO = @S_INVOICE_NUMBER  
  
 --DECLARE @S_FIN_BU VARCHAR(20)  
 --select top 1 @S_FIN_BU= S_FIN_BU from T_TB_INVOICE_PRINT_ANNEXURE_INVOICE_VALUE where S_INVOICE_NUMBER=@S_INVOICE_NUMBER  
 CREATE TABLE #temp_grouping_column_table (  
  S_CUSTOMER_ID VARCHAR(100)  
  ,S_BILLING_TYPE VARCHAR(20)  
  ,S_DISPLAY_COLUMN_REF VARCHAR(100)  
  ,DB_QRY_MAPPING_COL NVARCHAR(MAX)  
  ,DB_QRY_GROUPING_COL NVARCHAR(MAX)  
  )  
  
 INSERT INTO #temp_grouping_column_table  
 SELECT DISTINCT B.S_CUSTOMER_ID  
  ,B.S_BILLING_TYPE  
  ,A.S_DISPLAY_COLUMN_REF  
  ,'S_DESCRIPTION' AS DB_QRY_MAPPING_COL  
  ,'S_DESCRIPTION' AS DB_QRY_GROUPING_COL  
 FROM T_TB_INVOICE_PRINT_BODY_COLUMN_MAPPING A WITH (NOLOCK)  
 LEFT JOIN T_TB_INVOICE_PRINT_BODY_INVOICE_VALUE B WITH (NOLOCK) ON B.S_CUSTOMER_ID = A.S_CUSTOMER_ID  
  AND B.S_BILLING_TYPE = A.S_BILLING_TYPE  
 WHERE B.S_CUSTOMER_ID = @S_CUSTOMER_ID  
  AND B.S_BILLING_TYPE = @S_BILLING_TYPE  
  AND A.S_DISPLAY_COLUMN = 'Invoice Body1'  
  AND (  
   S_INVOICE_NUMBER = @S_INVOICE_NUMBER  
   OR S_DRAFT_INVOICE_NO = @S_INVOICE_NUMBER  
   )  
   
 UNION ALL  
   
 SELECT DISTINCT B.S_CUSTOMER_ID  
  ,B.S_BILLING_TYPE  
  ,A.S_DISPLAY_COLUMN_REF  
  ,'CASE WHEN LEFT(ISNULL(S_EXECUTION_MODEL,''''),3)=''ONS'' THEN ''ONSITE''  
  WHEN LEFT(ISNULL(S_EXECUTION_MODEL,''''),3)=''OFF'' THEN ''OFFSHORE''   
  WHEN LEFT(ISNULL(S_EXECUTION_MODEL,''''),3)=''NEA'' THEN ''NEARSHORE''   
  ELSE ISNULL(S_EXECUTION_MODEL,'''') END AS S_EXECUTION_MODEL' AS DB_QRY_MAPPING_COL  
  ,'S_EXECUTION_MODEL' AS DB_QRY_GROUPING_COL  
 FROM T_TB_INVOICE_PRINT_BODY_COLUMN_MAPPING A WITH (NOLOCK)  
 LEFT JOIN T_TB_INVOICE_PRINT_BODY_INVOICE_VALUE B WITH (NOLOCK) ON B.S_CUSTOMER_ID = A.S_CUSTOMER_ID  
  AND B.S_BILLING_TYPE = A.S_BILLING_TYPE  
 WHERE B.S_CUSTOMER_ID = @S_CUSTOMER_ID  
  AND B.S_BILLING_TYPE = @S_BILLING_TYPE  
  AND A.S_DISPLAY_COLUMN = 'Invoice Body2'  
  AND (  
   S_INVOICE_NUMBER = @S_INVOICE_NUMBER  
   OR S_DRAFT_INVOICE_NO = @S_INVOICE_NUMBER  
   )  
   
 UNION ALL  
   
 SELECT DISTINCT B.S_CUSTOMER_ID  
  ,B.S_BILLING_TYPE  
  ,A.S_DISPLAY_COLUMN_REF  
  ,'ISNULL(S_ROLE,'''') S_ROLE' AS DB_QRY_MAPPING_COL  
  ,'S_ROLE' AS DB_QRY_GROUPING_COL  
 FROM T_TB_INVOICE_PRINT_BODY_COLUMN_MAPPING A WITH (NOLOCK)  
 LEFT JOIN T_TB_INVOICE_PRINT_BODY_INVOICE_VALUE B WITH (NOLOCK) ON B.S_CUSTOMER_ID = A.S_CUSTOMER_ID  
  AND B.S_BILLING_TYPE = A.S_BILLING_TYPE  
 WHERE B.S_CUSTOMER_ID = @S_CUSTOMER_ID  
  AND B.S_BILLING_TYPE = @S_BILLING_TYPE  
  AND A.S_DISPLAY_COLUMN = 'Invoice Body3'  
  AND (  
   S_INVOICE_NUMBER = @S_INVOICE_NUMBER  
   OR S_DRAFT_INVOICE_NO = @S_INVOICE_NUMBER  
   )  
   
 UNION ALL  
   
 SELECT DISTINCT B.S_CUSTOMER_ID  
  ,B.S_BILLING_TYPE  
  ,A.S_DISPLAY_COLUMN_REF  
  ,'ISNULL(N_QUANTITY,0) N_QUANTITY' AS DB_QRY_MAPPING_COL  
  ,'N_QUANTITY' AS DB_QRY_GROUPING_COL  
 FROM T_TB_INVOICE_PRINT_BODY_COLUMN_MAPPING A WITH (NOLOCK)  
 LEFT JOIN T_TB_INVOICE_PRINT_BODY_INVOICE_VALUE B WITH (NOLOCK) ON B.S_CUSTOMER_ID = A.S_CUSTOMER_ID  
  AND B.S_BILLING_TYPE = A.S_BILLING_TYPE  
 WHERE B.S_CUSTOMER_ID = @S_CUSTOMER_ID  
  AND B.S_BILLING_TYPE = @S_BILLING_TYPE  
  AND A.S_DISPLAY_COLUMN = 'Invoice Body4'  
  AND (  
   S_INVOICE_NUMBER = @S_INVOICE_NUMBER  
   OR S_DRAFT_INVOICE_NO = @S_INVOICE_NUMBER  
   )  
   
 UNION ALL  
   
 SELECT DISTINCT B.S_CUSTOMER_ID  
  ,B.S_BILLING_TYPE  
  ,A.S_DISPLAY_COLUMN_REF  
  ,'ISNULL(N_RATE,0) N_RATE' AS DB_QRY_MAPPING_COL  
  ,'N_RATE' AS DB_QRY_GROUPING_COL  
 FROM T_TB_INVOICE_PRINT_BODY_COLUMN_MAPPING A WITH (NOLOCK)  
 LEFT JOIN T_TB_INVOICE_PRINT_BODY_INVOICE_VALUE B WITH (NOLOCK) ON B.S_CUSTOMER_ID = A.S_CUSTOMER_ID  
  AND B.S_BILLING_TYPE = A.S_BILLING_TYPE  
 WHERE B.S_CUSTOMER_ID = @S_CUSTOMER_ID  
  AND B.S_BILLING_TYPE = @S_BILLING_TYPE  
  AND A.S_DISPLAY_COLUMN = 'Invoice Body5'  
  AND (  
   S_INVOICE_NUMBER = @S_INVOICE_NUMBER  
   OR S_DRAFT_INVOICE_NO = @S_INVOICE_NUMBER  
   )AND ISNULL (N_AMOUNT,0) <> 0 --For zero line item.........[Developer Name:Satya].....Script Date: 23/03/2022  
  
 DECLARE @ANNEXURE_DETAILS VARCHAR(100) = ''  
  
 IF EXISTS (  
   SELECT *  
   FROM RMG.DBO.T_TB_INVOICE_PRINTING_ADDITIONAL_INFO WITH (NOLOCK)  
   WHERE (  
     S_DRAFT_INVOICE_NO = @S_INVOICE_NUMBER  
     OR S_INVOICE_NUMBER = @S_INVOICE_NUMBER  
     )  
    AND (  
     S_FILE_NAME <> ''  
     OR S_FILE_NAME <> NULL  
     )  
   )  
 BEGIN  
  SET @ANNEXURE_DETAILS = 'Details as per Annexure'  
 END  
 ELSE IF EXISTS (  
   SELECT *  
   FROM RMG.DBO.T_TB_INVOICE_PRINT_ANNEXURE_INVOICE_VALUE WITH (NOLOCK)  
   WHERE (  
     S_DRAFT_INVOICE_NO = @S_INVOICE_NUMBER  
     OR S_INVOICE_NUMBER = @S_INVOICE_NUMBER  
     )  
   )  
 BEGIN  
  SET @ANNEXURE_DETAILS = 'Details as per Annexure'  
 END  
  
 SELECT *  
 INTO #T_TB_INVOICE_PRINT_BODY_INVOICE_VALUE  
 FROM T_TB_INVOICE_PRINT_BODY_INVOICE_VALUE WITH (NOLOCK)  
 WHERE (  
   S_DRAFT_INVOICE_NO = @S_INVOICE_NUMBER  
   OR S_INVOICE_NUMBER = @S_INVOICE_NUMBER  
   )  
  
  
 IF (@ANNEXURE_DETAILS = 'Details as per Annexure')  
 BEGIN  
  INSERT INTO #T_TB_INVOICE_PRINT_BODY_INVOICE_VALUE  
  SELECT S_CUSTOMER_ID  
   ,S_BILLING_TYPE  
   ,S_INVOICE_NUMBER  
   ,@ANNEXURE_DETAILS  
   ,NULL  
   ,NULL  
   ,NULL  
   ,NULL  
   ,NULL  
   ,NULL  
   ,NULL  
   ,NULL  
   ,NULL  
   ,NULL  
   ,S_DRAFT_INVOICE_NO  
   ,NULL  
   ,N_SUBLEVEL_1  
  FROM T_TB_INVOICE_PRINT_BODY_INVOICE_VALUE WITH (NOLOCK)  
  WHERE (  
    S_DRAFT_INVOICE_NO = @S_INVOICE_NUMBER  
    OR S_INVOICE_NUMBER = @S_INVOICE_NUMBER  
    )  
   AND S_DESCRIPTION = 'Gross Taxable Value'  
 END  
  
   
-------------------Invoice Sub level 1 grouping ------starts----------------------------------------------  
  
SELECT S_CUSTOMER_ID,S_BILLING_TYPE,FIELD,INV_LEVEL  
INTO #TEMP_INV_LEVEL  
FROM dbo.[T_TB_INVOICE_KEY_LEVEL_MAPPING_O2C]  WITH (NOLOCK)  
UNPIVOT (  
    INV_LEVEL FOR FIELD IN (  
        N_CUSTOMER_ID_ATTRIBUTE,N_BILLING_MODE_ATTRIBUTE,N_FIN_BU_ATTRIBUTE,N_BILLING_CURRENCY_ATTRIBUTE,N_OTE_ATTRIBUTE,N_BILLING_CYCLE_ATTRIBUTE,  
  N_BILLING_ENTITY_ATTRIBUTE,N_FIN_ID_ATTRIBUTE,N_SOW_ID_ATTRIBUTE,N_PO_REF_ATTRIBUTE,N_CUSTOM_FIELD1_ATTRIBUTE,N_CUSTOM_FIELD2_ATTRIBUTE,  
  N_CUSTOM_FIELD3_ATTRIBUTE,N_CUSTOM_FIELD4_ATTRIBUTE,N_CUSTOM_FIELD5_ATTRIBUTE,N_CUSTOM_FIELD6_ATTRIBUTE,N_EXECUTION_MODEL,N_PROFILE,  
  S_EMPLOYEE_ID,N_MILESTONE_ATTRIBUTE,N_RATECARD_CURRENCY  
  
    )  
) unpvt  
WHERE S_CUSTOMER_ID=@S_CUSTOMER_ID and S_BILLING_TYPE=@S_BILLING_TYPE AND N_FINANCE_STATUS=4 AND N_CURRENT_STATUS=4  
  
SELECT DISTINCT A.*,C.S_EMPLOYEE_ID,C.S_MILESTONE_NAME,N_SUBLEVEL_1  
,CASE WHEN A.FIELD='N_CUSTOMER_ID_ATTRIBUTE' THEN 'Customer : '+A.S_CUSTOMER_ID  
  WHEN A.FIELD='N_BILLING_MODE_ATTRIBUTE' THEN 'Billing Mode : '+A.S_BILLING_TYPE  
  WHEN A.FIELD='N_FIN_BU_ATTRIBUTE' THEN 'Fin BU : '+C.S_BUINESS_UNIT  
  WHEN A.FIELD='N_BILLING_CURRENCY_ATTRIBUTE' THEN 'Billing Currency : '+C.S_BILLING_CURRENCY  
  WHEN A.FIELD='N_OTE_ATTRIBUTE' THEN 'OTE : '+C.S_OTE  
  WHEN A.FIELD='N_BILLING_CYCLE_ATTRIBUTE' THEN 'Billing Cycle : '+C.S_BILLING_CYCLE  
  WHEN A.FIELD='N_BILLING_ENTITY_ATTRIBUTE' THEN 'Billing Entity : '+C.S_PO_CUSTOMER_ID  
  WHEN A.FIELD='N_FIN_ID_ATTRIBUTE' THEN 'Fin ID : '+C.S_FIN_ID  
  WHEN A.FIELD='N_SOW_ID_ATTRIBUTE' THEN 'SOW Ref : '+D.S_PROJECT_NAME  
  WHEN A.FIELD='N_PO_REF_ATTRIBUTE' THEN 'PO/WO Ref : '+C.S_PO_REFERENCE  
  WHEN A.FIELD='N_CUSTOM_FIELD1_ATTRIBUTE' THEN B.S_CUSTOM_FIELD1+' : '+C.S_INVOICING_EXTRA_INFO1  
  WHEN A.FIELD='N_CUSTOM_FIELD2_ATTRIBUTE' THEN B.S_CUSTOM_FIELD2+' : '+C.S_INVOICING_EXTRA_INFO2  
  WHEN A.FIELD='N_CUSTOM_FIELD3_ATTRIBUTE' THEN B.S_CUSTOM_FIELD3+' : '+C.S_INVOICING_EXTRA_INFO3  
  WHEN A.FIELD='N_CUSTOM_FIELD4_ATTRIBUTE' THEN B.S_CUSTOM_FIELD4+' : '+C.S_INVOICING_EXTRA_INFO4  
  WHEN A.FIELD='N_CUSTOM_FIELD5_ATTRIBUTE' THEN B.S_CUSTOM_FIELD5+' : '+C.S_INVOICING_EXTRA_INFO5  
  WHEN A.FIELD='N_CUSTOM_FIELD6_ATTRIBUTE' THEN B.S_CUSTOM_FIELD6+' : '+C.S_INVOICING_EXTRA_INFO6  
  WHEN A.FIELD='N_EXECUTION_MODEL' THEN 'Execution Model : '+C.S_EXECUTION_MODEL   
  WHEN A.FIELD='N_PROFILE' THEN 'Rate-Card Profile : '+C.S_PROFILE  
  WHEN A.FIELD='S_EMPLOYEE_ID' THEN CASE WHEN C.S_SOURCE ='TIMESHEET' THEN 'Employee ID : '+C.S_EMPLOYEE_ID  -- EXCH.S_EMPLOYEE_NAME  
           WHEN C.S_SOURCE ='EXPENSES'  THEN 'Expenses : '+C.S_DESCRIPTION --C.S_OTHERS_COMP_TYPE   
           END  
  WHEN A.FIELD='N_MILESTONE_ATTRIBUTE' THEN 'Milestone : '+C.S_MILESTONE_NAME  
  WHEN A.FIELD='N_RATECARD_CURRENCY' THEN 'Rate-Card Currency : '+C.RATE_CARD_CURRENCY   
            END AS [VALUE]  
,CASE WHEN A.FIELD='N_CUSTOMER_ID_ATTRIBUTE' THEN 'S_CUSTOMER_ID'  
  WHEN A.FIELD='N_BILLING_MODE_ATTRIBUTE' THEN 'S_BILLING_TYPE'  
  WHEN A.FIELD='N_FIN_BU_ATTRIBUTE' THEN 'S_BUINESS_UNIT'  
  WHEN A.FIELD='N_BILLING_CURRENCY_ATTRIBUTE' THEN 'S_BILLING_CURRENCY'  
  WHEN A.FIELD='N_OTE_ATTRIBUTE' THEN 'S_OTE'  
  WHEN A.FIELD='N_BILLING_CYCLE_ATTRIBUTE' THEN 'S_BILLING_CYCLE'  
  WHEN A.FIELD='N_BILLING_ENTITY_ATTRIBUTE' THEN ''  
  WHEN A.FIELD='N_FIN_ID_ATTRIBUTE' THEN 'S_FIN_ID'  
  WHEN A.FIELD='N_SOW_ID_ATTRIBUTE' THEN 'N_SOW_ID'  
  WHEN A.FIELD='N_PO_REF_ATTRIBUTE' THEN 'S_PO_REFERENCE'  
  WHEN A.FIELD='N_CUSTOM_FIELD1_ATTRIBUTE' THEN 'S_INVOICING_EXTRA_INFO1'  
  WHEN A.FIELD='N_CUSTOM_FIELD2_ATTRIBUTE' THEN 'S_INVOICING_EXTRA_INFO2'  
  WHEN A.FIELD='N_CUSTOM_FIELD3_ATTRIBUTE' THEN 'S_INVOICING_EXTRA_INFO3'  
  WHEN A.FIELD='N_CUSTOM_FIELD4_ATTRIBUTE' THEN 'S_INVOICING_EXTRA_INFO4'  
  WHEN A.FIELD='N_CUSTOM_FIELD5_ATTRIBUTE' THEN 'S_INVOICING_EXTRA_INFO5'  
  WHEN A.FIELD='N_CUSTOM_FIELD6_ATTRIBUTE' THEN 'S_INVOICING_EXTRA_INFO6'  
  WHEN A.FIELD='N_EXECUTION_MODEL' THEN 'S_EXECUTION_MODEL'  
  WHEN A.FIELD='N_PROFILE' THEN 'S_PROFILE'  
  WHEN A.FIELD='S_EMPLOYEE_ID' THEN CASE WHEN C.S_SOURCE ='TIMESHEET' THEN 'S_EMPLOYEE_ID' ELSE 'S_OTHERS_COMP_TYPE' END  
  WHEN A.FIELD='N_MILESTONE_ATTRIBUTE' THEN 'S_MILESTONE_NAME'  
  WHEN A.FIELD='N_RATECARD_CURRENCY' THEN 'RATE_CARD_CURRENCY' END AS [GROUP_COLUMN]  
INTO #TEMP_INV_LEVEL_DATA_BEFORE  
FROM #TEMP_INV_LEVEL A WITH (NOLOCK)  
LEFT OUTER JOIN [T_TB_INVOICE_CUSTOMER_FILED_VALUE_MASTER_O2C] B WITH (NOLOCK) ON A.S_CUSTOMER_ID=B.S_CUSTOMER_ID  
LEFT OUTER JOIN #TEMP_BUFFER C WITH (NOLOCK) ON A.S_CUSTOMER_ID=ISNULL(NULLIF(C.S_PO_CUSTOMER_ID,''),C.S_CUSTOMER_ID) AND A.S_BILLING_TYPE=C.S_BILLING_TYPE  
LEFT OUTER JOIN M_RT_SOW_MASTER D WITH (NOLOCK) ON C.N_SOW_ID=D.N_SOW_ID  
--OUTER APPLY(SELECT S_EMPLOYEE_FNAME + ' ' + S_EMPLOYEE_LNAME AS S_EMPLOYEE_NAME FROM HELIXPRD.DBO.M_EMPLOYEE_EXCHANGE WHERE S_EMPLOYEE_ID = C.S_EMPLOYEE_ID)EXCH  
--WHERE A.S_CUSTOMER_ID=B.S_CUSTOMER_ID  
--AND A.S_CUSTOMER_ID=C.S_CUSTOMER_ID  
--AND A.S_BILLING_TYPE=C.S_BILLING_TYPE  
--AND C.N_SOW_ID=D.N_SOW_ID  
--AND   
WHERE ISNULL(C.S_OTHERS_COMP_TYPE, '') <> 'DISC' AND C.S_SOURCE<>'TAX'  
AND A.INV_LEVEL in(1,2)  
ORDER BY A.FIELD  
  
SELECT * INTO  #TEMP_INV_LEVEL_DATA FROM #TEMP_INV_LEVEL_DATA_BEFORE WHERE 1=2  
  
IF EXISTS (SELECT * FROM #TEMP_INV_LEVEL_DATA_BEFORE WHERE INV_LEVEL=2)  
BEGIN  
INSERT INTO #TEMP_INV_LEVEL_DATA   
SELECT * FROM #TEMP_INV_LEVEL_DATA_BEFORE WHERE INV_LEVEL=2  
END  
ELSE  
BEGIN  
INSERT INTO #TEMP_INV_LEVEL_DATA   
SELECT * FROM #TEMP_INV_LEVEL_DATA_BEFORE  
END  
  
  
SELECT DISTINCT GROUP_COLUMN INTO #TEMP_GROUP FROM #TEMP_INV_LEVEL_DATA WHERE INV_LEVEL=2  
  
DECLARE @grouping_col_1 VARCHAR(max),@grouping_data_col_1 VARCHAR(max)  
  
SELECT @grouping_col_1 = COALESCE(@grouping_col_1 + ',', '') + [VALUE] FROM #TEMP_INV_LEVEL_DATA  
SELECT @grouping_data_col_1 = COALESCE(@grouping_data_col_1 + ',', '') + [GROUP_COLUMN] FROM #TEMP_GROUP ORDER BY GROUP_COLUMN  
  
  
PRINT @grouping_col_1  
PRINT @grouping_data_col_1  
  
 --SELECT DISTINCT S_EMPLOYEE_ID,@grouping_data_col_1 AS GROUP_COLUMN FROM #TEMP_INV_LEVEL_DATA  
  
SELECT @grouping_data_col_1=REPLACE(@grouping_data_col_1,'S_PROFILE','S_PROFILE,N_RATE_ID')  
SELECT @grouping_data_col_1=REPLACE(@grouping_data_col_1,'S_MILESTONE_NAME','N_MILESTONE_ID,S_MILESTONE_NAME')  
DECLARE @sqlquery1 NVARCHAR(MAX)  
DECLARE @SqlSub_Total varchar(max)  
  
  
IF @S_BILLING_TYPE='T&M'  
BEGIN  
print 't&m'  
--if CHARINDEX('S_EMPLOYEE_ID',@grouping_data_col_1) > 0  
--SET @sqlquery1 = 'INSERT INTO #TEMP_DATA (N_SUBLEVEL_1,S_OTHERS_COMP_TYPE,'+@grouping_data_col_1+',N_VALUE)'  
--+'SELECT N_SUBLEVEL_1,S_OTHERS_COMP_TYPE,'+ @grouping_data_col_1+',ABS(ROUND(SUM(ISNULL(N_BILL_INV_VALUE, N_VALUE)),2)) AS N_VALUE    
--FROM #TEMP_BUFFER   
--WHERE ISNULL(S_OTHERS_COMP_TYPE, '''') <> ''DISC'' AND   
--S_SOURCE<>''TAX''   
--GROUP BY N_SUBLEVEL_1,S_OTHERS_COMP_TYPE,'+ @grouping_data_col_1  
--ELSE                    
  
/*****-For multi currency, rate card currency amount is added on the basis of currency ...[Developer Name:Rahul/Chandana]...PROBLEM TICKET NO: PRB0040515..Script Date: 08/04/2022--***/  
 SET @sqlquery1 = 'INSERT INTO #TEMP_DATA (N_SUBLEVEL_1,S_EMPLOYEE_ID_TEMP,S_OTHERS_COMP_TYPE,'+@grouping_data_col_1+',N_VALUE)'  
+'SELECT N_SUBLEVEL_1,S_EMPLOYEE_ID,S_OTHERS_COMP_TYPE,'+ @grouping_data_col_1+',ABS(ROUND(SUM(ISNULL(N_VALUE,N_BILL_INV_VALUE)),2)) AS N_VALUE     
FROM #TEMP_BUFFER   
WHERE ISNULL(S_OTHERS_COMP_TYPE, '''') <> ''DISC'' AND   
S_SOURCE<>''TAX''   
GROUP BY N_SUBLEVEL_1,S_EMPLOYEE_ID,S_OTHERS_COMP_TYPE,'+ @grouping_data_col_1  
  
PRINT @sqlquery1  
EXEC sp_executesql @sqlquery1  
  
set @SqlSub_Total='UPDATE A SET A.N_SUB_TOTAL=B.N_VALUE,A.GROUP_COLUMN=C.VALUE from #TEMP_DATA A    
       inner join   
         (SELECT '+ @grouping_data_col_1+',SUM(N_VALUE) AS N_VALUE    
FROM #TEMP_DATA WHERE ISNULL(S_OTHERS_COMP_TYPE, '''') <> ''DISC''   
GROUP BY '+ @grouping_data_col_1+')B  
on CAST(A.'+replace(@grouping_data_col_1,',',' AS varchar(4000))+CAST(A.')+' AS varchar(4000))=CAST(B.'+replace(@grouping_data_col_1,',',' AS varchar(4000))+CAST(B.')+' AS varchar(4000))  
INNER JOIN (SELECT DISTINCT S_EMPLOYEE_ID,N_SUBLEVEL_1, VALUE =   
    STUFF((SELECT '' | '' + VALUE  
           FROM #TEMP_INV_LEVEL_DATA b   
           WHERE b.S_EMPLOYEE_ID = a.S_EMPLOYEE_ID AND A.N_SUBLEVEL_1=B.N_SUBLEVEL_1  
     ORDER BY N_SUBLEVEL_1,FIELD  
          FOR XML PATH('''')), 1, 2, '''')  
FROM #TEMP_INV_LEVEL_DATA a  
GROUP BY S_EMPLOYEE_ID,N_SUBLEVEL_1)C ON A.S_EMPLOYEE_ID_TEMP=C.S_EMPLOYEE_ID AND A.N_SUBLEVEL_1=C.N_SUBLEVEL_1'  
  
--SELECT DISTINCT S_EMPLOYEE_ID,N_SUBLEVEL_1, VALUE =   
--    STUFF((SELECT ' | ' + VALUE  
--           FROM #TEMP_INV_LEVEL_DATA b   
--           WHERE b.S_EMPLOYEE_ID = a.S_EMPLOYEE_ID AND A.N_SUBLEVEL_1=B.N_SUBLEVEL_1  
--     ORDER BY N_SUBLEVEL_1,FIELD  
--          FOR XML PATH('')), 1, 2, '')  
--FROM #TEMP_INV_LEVEL_DATA a  
--where S_EMPLOYEE_ID='52827'  
--GROUP BY S_EMPLOYEE_ID,N_SUBLEVEL_1  
  
  
--SELECT * FROM #TEMP_INV_LEVEL_DATA where S_EMPLOYEE_ID='52827'  
  
print @SqlSub_Total  
exec(@SqlSub_Total)  
  
set @SqlSub_Total='UPDATE A SET A.N_TOTAL=B.N_VALUE from #TEMP_DATA A    
       OUTER APPLY  
       (SELECT SUM(N_VALUE) AS N_VALUE FROM #TEMP_DATA  
       WHERE ISNULL(S_OTHERS_COMP_TYPE, '''') <> ''DISC''  
       )B'   
print @SqlSub_Total  
exec(@SqlSub_Total)  
  
--SELECT SUM(N_VALUE) AS N_VALUE FROM #TEMP_DATA WHERE ISNULL(S_OTHERS_COMP_TYPE, '') <> 'DISC'  
--SELECT * FROM #TEMP_DATA WHERE ISNULL(S_OTHERS_COMP_TYPE, '') <> 'DISC'  
  
END  
IF @S_BILLING_TYPE='FPP'  
BEGIN  
print 'fpp'  
/*****-For multi currency, rate card currency amount is added on the basis of currency ...[Developer Name:Rahul/Chandana]...PROBLEM TICKET NO: PRB0040515..Script Date: 08/04/2022--***/  
 SET @sqlquery1 = 'INSERT INTO #TEMP_DATA (N_SUBLEVEL_1,N_MILESTONE_ID_TEMP,S_MILESTONE_NAME_TEMP,S_EMPLOYEE_ID_TEMP,'+@grouping_data_col_1+',N_VALUE)'  
+'SELECT N_SUBLEVEL_1,N_MILESTONE_ID,S_MILESTONE_NAME,S_MILESTONE_NAME,'+ @grouping_data_col_1+',ABS(ROUND(SUM(ISNULL(N_VALUE,N_BILL_INV_VALUE)),2)) AS N_VALUE    
FROM #TEMP_BUFFER   
WHERE  ISNULL(S_OTHERS_COMP_TYPE, '''') <> ''DISC'' AND   
S_SOURCE<>''TAX''   
GROUP BY N_SUBLEVEL_1,N_MILESTONE_ID,S_MILESTONE_NAME,'+ @grouping_data_col_1  
  
PRINT @sqlquery1  
EXEC sp_executesql @sqlquery1  
  
set @SqlSub_Total='UPDATE A SET A.N_SUB_TOTAL=B.N_VALUE,A.GROUP_COLUMN=C.VALUE   
     from #TEMP_DATA A    
       inner join   
     (SELECT '+ @grouping_data_col_1+',SUM(N_VALUE) AS N_VALUE    
      FROM #TEMP_DATA WHERE ISNULL(S_OTHERS_COMP_TYPE, '''') <> ''DISC''  
      GROUP BY '+ @grouping_data_col_1+')B  
     on CAST(A.'+replace(@grouping_data_col_1,',',' AS varchar(4000))+CAST(A.')+' AS varchar(4000))=CAST(B.'+replace(@grouping_data_col_1,',',' AS varchar(4000))+CAST(B.')+' AS varchar(4000))  
       inner join   
     (SELECT DISTINCT S_MILESTONE_NAME,N_SUBLEVEL_1, VALUE =   
       STUFF((SELECT '' | '' + VALUE FROM #TEMP_INV_LEVEL_DATA b   
      WHERE b.S_MILESTONE_NAME = a.S_MILESTONE_NAME AND A.N_SUBLEVEL_1=B.N_SUBLEVEL_1  
      ORDER BY N_SUBLEVEL_1,FIELD  
      FOR XML PATH('''')), 1, 2, '''')  
      FROM #TEMP_INV_LEVEL_DATA a  
      GROUP BY S_MILESTONE_NAME,N_SUBLEVEL_1)C on A.S_MILESTONE_NAME_TEMP=C.S_MILESTONE_NAME AND A.N_SUBLEVEL_1=C.N_SUBLEVEL_1'  
  
print @SqlSub_Total  
exec(@SqlSub_Total)  
  
set @SqlSub_Total='UPDATE A SET A.N_TOTAL=B.N_VALUE from #TEMP_DATA A    
       OUTER APPLY  
       (SELECT SUM(N_VALUE) AS N_VALUE FROM #TEMP_DATA  
       WHERE ISNULL(S_OTHERS_COMP_TYPE, '''') <> ''DISC''  
       )B'  
  
print @SqlSub_Total  
exec(@SqlSub_Total)  
  
END  
  
  
--SELECT * FROM #TEMP_DATA   
  
-------------------Invoice Sub level 1 grouping ------ends----------------------------------------------  
  
  
 DECLARE @grouping_col VARCHAR(max)  
  ,@grouping_data_col NVARCHAR(max)  
  
 DELETE FROM #temp_grouping_column_table WHERE DB_QRY_GROUPING_COL='N_QUANTITY' AND S_BILLING_TYPE='T&M'  
  
 SELECT @grouping_col = COALESCE(@grouping_col + ',', '') + DB_QRY_MAPPING_COL  
 FROM #temp_grouping_column_table  
  
 SELECT @grouping_data_col = COALESCE(@grouping_data_col + ',', '') + DB_QRY_GROUPING_COL  
 FROM #temp_grouping_column_table  
  
  
 select DENSE_RANK() OVER(ORDER BY B.GROUP_COLUMN)ORDER_NO,B.GROUP_COLUMN,B.N_SUB_TOTAL,B.N_TOTAL,A.*   
 INTO #TEMP_DATA_FINAL   
 FROM #T_TB_INVOICE_PRINT_BODY_INVOICE_VALUE A   
 LEFT JOIN #TEMP_DATA B  
 ON A.S_EMPLOYEE_ID=B.S_EMPLOYEE_ID_TEMP AND A.N_SUBLEVEL_1=B.N_SUBLEVEL_1  
 WHERE A.S_DESCRIPTION NOT IN('DISCOUNT','Gross Taxable Value','Details as per Annexure')  
 AND ISNULL(S_OTHERS_COMP_TYPE,'') <> 'DISC'  
   
  
  
-- SELECT DISTINCT S_EMPLOYEE_ID,VALUE =   
--    STUFF((SELECT ', ' + VALUE  
--           FROM #TEMP_INV_LEVEL_DATA b   
--           WHERE b.S_EMPLOYEE_ID = a.S_EMPLOYEE_ID ORDER BY VALUE  
--          FOR XML PATH('')), 1, 2, '')  
--FROM #TEMP_INV_LEVEL_DATA a  
--GROUP BY S_EMPLOYEE_ID  
  
 --select DENSE_RANK() OVER(ORDER BY N_SUB_TOTAL)ORDER_NO,* INTO #TEMP_DATA_FINAL   
 --FROM #T_TB_INVOICE_PRINT_BODY_INVOICE_VALUE  
 --WHERE S_DESCRIPTION NOT IN('DISCOUNT','Gross Taxable Value')  
  
 PRINT @grouping_col  
 DECLARE @sqlquery NVARCHAR(MAX)  
 IF @S_BILLING_TYPE='FPP'  
 BEGIN  
  SET @sqlquery=   
  'SELECT ORDER_NO,A.S_INVOICE_NUMBER,A.S_DRAFT_INVOICE_NO,' + @grouping_col + ',SUM(A.N_AMOUNT) N_AMOUNT  
  ,(A.GROUP_COLUMN) GROUP_COLUMN,(A.N_SUB_TOTAL) N_SUB_TOTAL,(A.N_TOTAL) N_TOTAL  
  FROM #TEMP_DATA_FINAL A   
 where A.S_CUSTOMER_ID=''' + @S_CUSTOMER_ID + ''' AND A.S_BILLING_TYPE=''' + @S_BILLING_TYPE + ''' AND (A.S_INVOICE_NUMBER=''' + @S_INVOICE_NUMBER + ''' OR A.S_DRAFT_INVOICE_NO ='''+ @S_INVOICE_NUMBER +''') AND A.S_DESCRIPTION<>''' + 'Gross Taxable Value
' + '''AND A.S_DESCRIPTION NOT LIKE''' + '%DISCOUNT%'+ '''AND A.S_DESCRIPTION NOT LIKE''' + '%Details as per Annexure%' + '''  
 GROUP BY A.GROUP_COLUMN,A.N_SUB_TOTAL,A.N_TOTAL,ORDER_NO,A.S_INVOICE_NUMBER,A.S_DRAFT_INVOICE_NO,' + @grouping_data_col --+ ' select * from #temp3'  
 + ' UNION ALL '   
 + 'SELECT 0,S_INVOICE_NUMBER,S_DRAFT_INVOICE_NO,' + @grouping_col + ',ABS(SUM(N_AMOUNT)) N_AMOUNT  
 ,NULL GROUP_COLUMN,NULL N_SUB_TOTAL,NULL N_TOTAL    
 FROM #T_TB_INVOICE_PRINT_BODY_INVOICE_VALUE where S_CUSTOMER_ID=''' + @S_CUSTOMER_ID + ''' AND S_BILLING_TYPE=''' + @S_BILLING_TYPE + ''' AND (S_INVOICE_NUMBER=''' + @S_INVOICE_NUMBER + ''' OR S_DRAFT_INVOICE_NO ='''+ @S_INVOICE_NUMBER +''') AND S_DESCRI
PTION<>''' + 'Gross Taxable Value' + '''AND S_DESCRIPTION LIKE''' + '%DISCOUNT%' + '''   
 GROUP BY S_INVOICE_NUMBER,S_DRAFT_INVOICE_NO,' + @grouping_data_col   
   
 + ' UNION ALL '   
 + 'SELECT 0,S_INVOICE_NUMBER,S_DRAFT_INVOICE_NO,' + @grouping_col + ', N_AMOUNT  
 ,NULL GROUP_COLUMN,NULL N_SUB_TOTAL,NULL N_TOTAL    
 FROM #T_TB_INVOICE_PRINT_BODY_INVOICE_VALUE where S_CUSTOMER_ID=''' + @S_CUSTOMER_ID + ''' AND S_BILLING_TYPE=''' + @S_BILLING_TYPE + ''' AND (S_INVOICE_NUMBER=''' + @S_INVOICE_NUMBER + ''' OR S_DRAFT_INVOICE_NO ='''+ @S_INVOICE_NUMBER +''') AND S_DESCRI
PTION=''' + 'Gross Taxable Value'''  
 + ' UNION ALL '   
 + 'SELECT 0,S_INVOICE_NUMBER,S_DRAFT_INVOICE_NO,' + @grouping_col + ', N_AMOUNT  
 ,NULL GROUP_COLUMN,NULL N_SUB_TOTAL,NULL N_TOTAL    
 FROM #T_TB_INVOICE_PRINT_BODY_INVOICE_VALUE   
 where S_CUSTOMER_ID=''' + @S_CUSTOMER_ID + ''' AND S_BILLING_TYPE=''' + @S_BILLING_TYPE + ''' AND (S_INVOICE_NUMBER=''' + @S_INVOICE_NUMBER + ''' OR S_DRAFT_INVOICE_NO ='''+ @S_INVOICE_NUMBER +''') AND S_DESCRIPTION=''' + 'Details as per Annexure'''  
 END  
 ELSE  
 BEGIN  
 PRINT 'FINAL QUERY'  
 SET @sqlquery= 'SELECT ORDER_NO,S_INVOICE_NUMBER,S_DRAFT_INVOICE_NO,' + @grouping_col + ',SUM(N_QUANTITY) AS N_QUANTITY,SUM(N_AMOUNT) N_AMOUNT   
 ,(A.GROUP_COLUMN) GROUP_COLUMN,(A.N_SUB_TOTAL) N_SUB_TOTAL,(A.N_TOTAL) N_TOTAL  
 FROM #TEMP_DATA_FINAL A  
 where S_CUSTOMER_ID=''' + @S_CUSTOMER_ID + ''' AND S_BILLING_TYPE=''' + @S_BILLING_TYPE + ''' AND (S_INVOICE_NUMBER=''' + @S_INVOICE_NUMBER + ''' OR S_DRAFT_INVOICE_NO ='''+ @S_INVOICE_NUMBER +''') AND S_DESCRIPTION<>''' + 'Gross Taxable Value' + '''AND 
S_DESCRIPTION NOT LIKE''' + '%DISCOUNT%'+ '''AND S_DESCRIPTION NOT LIKE''' + '%Details as per Annexure%' + '''  
 GROUP BY A.GROUP_COLUMN,A.N_SUB_TOTAL,A.N_TOTAL,ORDER_NO,S_INVOICE_NUMBER,S_DRAFT_INVOICE_NO,' + @grouping_data_col --+ ' select * from #temp3'  
 + ' UNION ALL '   
 + 'SELECT 0,S_INVOICE_NUMBER,S_DRAFT_INVOICE_NO,' + @grouping_col + ',SUM(N_QUANTITY) AS N_QUANTITY,ABS(SUM(N_AMOUNT)) N_AMOUNT   
 ,NULL GROUP_COLUMN,NULL N_SUB_TOTAL,NULL N_TOTAL    
 FROM #T_TB_INVOICE_PRINT_BODY_INVOICE_VALUE where S_CUSTOMER_ID=''' + @S_CUSTOMER_ID + ''' AND S_BILLING_TYPE=''' + @S_BILLING_TYPE + ''' AND (S_INVOICE_NUMBER=''' + @S_INVOICE_NUMBER + ''' OR S_DRAFT_INVOICE_NO ='''+ @S_INVOICE_NUMBER +''') AND S_DESCRI
PTION<>''' + 'Gross Taxable Value' + '''AND S_DESCRIPTION LIKE''' + '%DISCOUNT%' + '''   
 GROUP BY S_INVOICE_NUMBER,S_DRAFT_INVOICE_NO,' + @grouping_data_col   
   
 + ' UNION ALL '   
 + 'SELECT 0,S_INVOICE_NUMBER,S_DRAFT_INVOICE_NO,' + @grouping_col + ',N_QUANTITY, N_AMOUNT   
 ,NULL GROUP_COLUMN,NULL N_SUB_TOTAL,NULL N_TOTAL    
 FROM #T_TB_INVOICE_PRINT_BODY_INVOICE_VALUE where S_CUSTOMER_ID=''' + @S_CUSTOMER_ID + ''' AND S_BILLING_TYPE=''' + @S_BILLING_TYPE + ''' AND (S_INVOICE_NUMBER=''' + @S_INVOICE_NUMBER + ''' OR S_DRAFT_INVOICE_NO ='''+ @S_INVOICE_NUMBER +''') AND S_DESCRI
PTION=''' + 'Gross Taxable Value'''  
 + ' UNION ALL '   
 + 'SELECT 0,S_INVOICE_NUMBER,S_DRAFT_INVOICE_NO,' + @grouping_col + ',N_QUANTITY, N_AMOUNT   
 ,NULL GROUP_COLUMN,NULL N_SUB_TOTAL,NULL N_TOTAL    
 FROM #T_TB_INVOICE_PRINT_BODY_INVOICE_VALUE   
 where S_CUSTOMER_ID=''' + @S_CUSTOMER_ID + ''' AND S_BILLING_TYPE=''' + @S_BILLING_TYPE + ''' AND (S_INVOICE_NUMBER=''' + @S_INVOICE_NUMBER + ''' OR S_DRAFT_INVOICE_NO ='''+ @S_INVOICE_NUMBER +''') AND S_DESCRIPTION=''' + 'Details as per Annexure'''  
  
 END  
 PRINT @sqlquery  
  
 EXEC sp_executesql @sqlquery  
  
    
 DROP TABLE #temp_grouping_column_table  
 DROP TABLE #T_TB_INVOICE_PRINT_BODY_INVOICE_VALUE  
 DROP TABLE #TEMP_INV_LEVEL  
 DROP TABLE #TEMP_CONSOLIDATION  
 DROP TABLE #TEMP_BUFFER_BEFORE  
 DROP TABLE #TEMP_BUFFER  
 DROP TABLE #TEMP_INV_LEVEL_DATA_BEFORE  
 DROP TABLE #TEMP_INV_LEVEL_DATA  
 DROP TABLE #TEMP_GROUP  
 DROP TABLE #TEMP_DATA  
 DROP TABLE #TEMP_DATA_FINAL  
  
  --DROP TABLE #TEMP_TOTAL  
  --DROP TABLE #TEMP_TAX  
END  
  
---------------------------------------------------------------------------------------------------------------------
public static EmployeeInfo GetEmployeeInfo(string employeeid)
            {
                Database db = DatabaseFactory.CreateDatabase();
                //DbCommand dbCommand = db.GetStoredProcCommand("[USP_ALLOCATION_GET_EMPLOYEE_INFO]");
                DbCommand dbCommand = db.GetStoredProcCommand(dbSPNameSetting.GetEmployeeInfo);
                db.AddInParameter(dbCommand, "S_EMPLOYEE_ID", DbType.String, employeeid);
                IDataReader _employeeReader = db.ExecuteReader(dbCommand);

                try
                {
                    EmployeeInfo _EmployeeInfo = new EmployeeInfo();

                    while (_employeeReader.Read())
                    {
                        if (_employeeReader["S_EMPLOYEE_ID"] != DBNull.Value)
                        {
                            _EmployeeInfo.Id = _employeeReader["S_EMPLOYEE_ID"].ToString();
                        }                        
                        if (_employeeReader["S_EMPLOYEE_EMAIL"] != DBNull.Value)
                        {
                            _EmployeeInfo.Email = _employeeReader["S_EMPLOYEE_EMAIL"].ToString();
                        }                        
                    }

                    return _EmployeeInfo;
                }
                catch (Exception e)
                {
                    return null;
                }
                finally
                {
                    if (!_employeeReader.IsClosed)
                        _employeeReader.Close();
                }
            } 
			
----------------------------------------------------------------------------------------------------------------------------------------------------
------- code to write file to shared path ------------
strLastDocTitle = Path.GetFileNameWithoutExtension(strLastDocTitle);
string path = outputFilePath + strLastDocTitle + ".csv";
byte[] content = Encoding.ASCII.GetBytes(oracleHCMExtractDocument.docXML);
File.WriteAllBytes(path, content);
----------------------------------------------------------------------------------------------------------------------------------------------------

XmlElement root = xmlDocument1.DocumentElement;
                                    //created datatable to insert data from XML and passed as parameter to SP
                                    try
                                    {
                                        XmlNodeList nodes = root.SelectNodes("//Person/Person_Details");
                                        if (nodes.Count > 0)
                                        {
                                            DataTable dtpersonDetails = new DataTable();
                                            dtpersonDetails.Columns.Add("Person_Number");
                                            dtpersonDetails.Columns.Add("Person_Region_of_Birth");
                                            dtpersonDetails.Columns.Add("Person_Country_of_Birth");
                                            dtpersonDetails.Columns.Add("Person_Town_of_Birth");
                                            dtpersonDetails.Columns.Add("Person_Date_of_Death");
                                            dtpersonDetails.Columns.Add("Effective_Start_Date");
                                            dtpersonDetails.Columns.Add("Last_Update_Date");
                                            dtpersonDetails.Columns.Add("Person_Date_of_Birth");
                                            foreach (XmlNode node in nodes)
                                            {
                                                if (node["Person_Number"] != null)
                                                {
                                                    dtpersonDetails.Rows.Add(node["Person_Number"].InnerText.ToString(),
                                                                         node["Person_Region_of_Birth"].InnerText.ToString(),
                                                                         node["Person_Country_of_Birth"].InnerText.ToString(),
                                                                         node["Person_Town_of_Birth"].InnerText.ToString(),
                                                                         node["Person_Date_of_Death"].InnerText.ToString(),
                                                                         node["Effective_Start_Date"].InnerText.ToString(),
                                                                         node["Last_Update_Date"].InnerText.ToString(),
                                                                         node["Person_Date_of_Birth"].InnerText.ToString()
                                                           );
                                                }
                                            }

                                            if (dtpersonDetails.Rows.Count > 0)
                                            {
                                                log.Debug("SPName: XML_USP_PS_PERSON_SYNC ; Execution_Start_time " + DateTime.Now.ToString());
                                                SQLDBHelper.InsertPersonDetails(dtpersonDetails, deptType, "dbo.XML_USP_PS_PERSON_SYNC");
                                            }
                                            dtpersonDetails.Dispose();
                                        }
                                    }
                                    catch (Exception)
                                    {
                                        String strPerson = "XML_USP_PS_PERSON_SYNC";
                                        log.Error("EntityName:" + strPerson + ";ProcessExtractDefinition : END : " + DateTime.Now.ToString());
                                        throw;
                                    }
------------------------------------------------------------------------------------------------------------------------------------------------

public void InsertPersonDetails(DataTable dtpersonDetails, String deptType, String strEntityStoredProcedure)
        {
            try
            {
                string cs = System.Configuration.ConfigurationManager.ConnectionStrings["DBConnection"].ConnectionString;

                //open db: Connection StrD:\STEP\SOAPService\CallUCMSoapService\CallUCMSoapService\Common\DBHelper.csing
                using (SqlConnection con = new SqlConnection(cs))
                {
                    using (SqlCommand cmd = new SqlCommand(strEntityStoredProcedure, con))
                    {
                        // Setting command timeout to 1 second  
                        cmd.CommandTimeout = 10000;

                        cmd.CommandType = System.Data.CommandType.StoredProcedure;
                        cmd.Parameters.AddWithValue("@TBL_XML_USP_PS_PERSON_SYNC", dtpersonDetails);
                        cmd.Parameters.AddWithValue("@deptType", deptType);
                        con.Open();
                        cmd.ExecuteNonQuery();
                    }
                }
            }
            catch (Exception e)
            {
                throw e;
            }
        }
----------------------------------------------------------------------------------------------------------------------------------------------------
//get USP_GET_ORA_EXTRACTS_DEFINITION
        public DataTable GET_EXTRACTS_DEFINITION(int intServiceId)
        {
            DataTable dtExtractDefinition = new DataTable("Extract_Definition");
            try
            {
                string cs = System.Configuration.ConfigurationManager.ConnectionStrings["DBConnection"].ConnectionString;

                //open db: Connection StrD:\STEP\SOAPService\CallUCMSoapService\CallUCMSoapService\Common\DBHelper.csing
                using (SqlConnection con = new SqlConnection(cs))
                {
                    using (SqlCommand cmd = new SqlCommand("dbo.USP_GET_ORA_EXTRACTS_DEFINITION", con))
                    {
                        cmd.CommandType = System.Data.CommandType.StoredProcedure;
                        cmd.Parameters.Add("@SERVICE_ID", System.Data.SqlDbType.SmallInt, -1).Value = intServiceId;
                        con.Open();

                        using (SqlDataAdapter sda = new SqlDataAdapter(cmd))
                        {
                           sda.Fill(dtExtractDefinition);
                        }
                    }
                }
            }
            catch (Exception e)
            {
                throw e;
            }
            return dtExtractDefinition;

        }
---------------------------------------------------------------------------------------------------------------------------------------